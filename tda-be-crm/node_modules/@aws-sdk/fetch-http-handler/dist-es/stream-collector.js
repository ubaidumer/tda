import { __awaiter, __generator } from "tslib";
import { fromBase64 } from "@aws-sdk/util-base64-browser";
export var streamCollector = function (stream) {
    if (typeof Blob === "function" && stream instanceof Blob) {
        return collectBlob(stream);
    }
    return collectStream(stream);
};
function collectBlob(blob) {
    return __awaiter(this, void 0, void 0, function () {
        var base64, arrayBuffer;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, readToBase64(blob)];
                case 1:
                    base64 = _a.sent();
                    arrayBuffer = fromBase64(base64);
                    return [2, new Uint8Array(arrayBuffer)];
            }
        });
    });
}
function collectStream(stream) {
    return __awaiter(this, void 0, void 0, function () {
        var res, reader, isDone, _a, done, value, prior;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    res = new Uint8Array(0);
                    reader = stream.getReader();
                    isDone = false;
                    _b.label = 1;
                case 1:
                    if (!!isDone) return [3, 3];
                    return [4, reader.read()];
                case 2:
                    _a = _b.sent(), done = _a.done, value = _a.value;
                    if (value) {
                        prior = res;
                        res = new Uint8Array(prior.length + value.length);
                        res.set(prior);
                        res.set(value, prior.length);
                    }
                    isDone = done;
                    return [3, 1];
                case 3: return [2, res];
            }
        });
    });
}
function readToBase64(blob) {
    return new Promise(function (resolve, reject) {
        var reader = new FileReader();
        reader.onloadend = function () {
            var _a;
            if (reader.readyState !== 2) {
                return reject(new Error("Reader aborted too early"));
            }
            var result = ((_a = reader.result) !== null && _a !== void 0 ? _a : "");
            var commaIndex = result.indexOf(",");
            var dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
            resolve(result.substring(dataOffset));
        };
        reader.onabort = function () { return reject(new Error("Read aborted")); };
        reader.onerror = function () { return reject(reader.error); };
        reader.readAsDataURL(blob);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyZWFtLWNvbGxlY3Rvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zdHJlYW0tY29sbGVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFHMUQsTUFBTSxDQUFDLElBQU0sZUFBZSxHQUFvQixVQUFDLE1BQTZCO0lBQzVFLElBQUksT0FBTyxJQUFJLEtBQUssVUFBVSxJQUFJLE1BQU0sWUFBWSxJQUFJLEVBQUU7UUFDeEQsT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDNUI7SUFFRCxPQUFPLGFBQWEsQ0FBQyxNQUF3QixDQUFDLENBQUM7QUFDakQsQ0FBQyxDQUFDO0FBRUYsU0FBZSxXQUFXLENBQUMsSUFBVTs7Ozs7d0JBQ3BCLFdBQU0sWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFBOztvQkFBakMsTUFBTSxHQUFHLFNBQXdCO29CQUNqQyxXQUFXLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUN2QyxXQUFPLElBQUksVUFBVSxDQUFDLFdBQVcsQ0FBQyxFQUFDOzs7O0NBQ3BDO0FBRUQsU0FBZSxhQUFhLENBQUMsTUFBc0I7Ozs7OztvQkFDN0MsR0FBRyxHQUFHLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN0QixNQUFNLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO29CQUM5QixNQUFNLEdBQUcsS0FBSyxDQUFDOzs7eUJBQ1osQ0FBQyxNQUFNO29CQUNZLFdBQU0sTUFBTSxDQUFDLElBQUksRUFBRSxFQUFBOztvQkFBckMsS0FBa0IsU0FBbUIsRUFBbkMsSUFBSSxVQUFBLEVBQUUsS0FBSyxXQUFBO29CQUNuQixJQUFJLEtBQUssRUFBRTt3QkFDSCxLQUFLLEdBQUcsR0FBRyxDQUFDO3dCQUNsQixHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7d0JBQ2xELEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7d0JBQ2YsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO3FCQUM5QjtvQkFDRCxNQUFNLEdBQUcsSUFBSSxDQUFDOzt3QkFFaEIsV0FBTyxHQUFHLEVBQUM7Ozs7Q0FDWjtBQUVELFNBQVMsWUFBWSxDQUFDLElBQVU7SUFDOUIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1FBQ2pDLElBQU0sTUFBTSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7UUFDaEMsTUFBTSxDQUFDLFNBQVMsR0FBRzs7WUFHakIsSUFBSSxNQUFNLENBQUMsVUFBVSxLQUFLLENBQUMsRUFBRTtnQkFDM0IsT0FBTyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxDQUFDO2FBQ3REO1lBQ0QsSUFBTSxNQUFNLEdBQUcsQ0FBQyxNQUFBLE1BQU0sQ0FBQyxNQUFNLG1DQUFJLEVBQUUsQ0FBVyxDQUFDO1lBRy9DLElBQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdkMsSUFBTSxVQUFVLEdBQUcsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1lBQ3BFLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDO1FBQ0YsTUFBTSxDQUFDLE9BQU8sR0FBRyxjQUFNLE9BQUEsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQWpDLENBQWlDLENBQUM7UUFDekQsTUFBTSxDQUFDLE9BQU8sR0FBRyxjQUFNLE9BQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBcEIsQ0FBb0IsQ0FBQztRQUU1QyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0cmVhbUNvbGxlY3RvciB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgZnJvbUJhc2U2NCB9IGZyb20gXCJAYXdzLXNkay91dGlsLWJhc2U2NC1icm93c2VyXCI7XG5cbi8vcmVmZXJlbmNlOiBodHRwczovL3NuYWNrLmV4cG8uaW8vcjFKQ1NXUkdVXG5leHBvcnQgY29uc3Qgc3RyZWFtQ29sbGVjdG9yOiBTdHJlYW1Db2xsZWN0b3IgPSAoc3RyZWFtOiBCbG9iIHwgUmVhZGFibGVTdHJlYW0pOiBQcm9taXNlPFVpbnQ4QXJyYXk+ID0+IHtcbiAgaWYgKHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgJiYgc3RyZWFtIGluc3RhbmNlb2YgQmxvYikge1xuICAgIHJldHVybiBjb2xsZWN0QmxvYihzdHJlYW0pO1xuICB9XG5cbiAgcmV0dXJuIGNvbGxlY3RTdHJlYW0oc3RyZWFtIGFzIFJlYWRhYmxlU3RyZWFtKTtcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIGNvbGxlY3RCbG9iKGJsb2I6IEJsb2IpOiBQcm9taXNlPFVpbnQ4QXJyYXk+IHtcbiAgY29uc3QgYmFzZTY0ID0gYXdhaXQgcmVhZFRvQmFzZTY0KGJsb2IpO1xuICBjb25zdCBhcnJheUJ1ZmZlciA9IGZyb21CYXNlNjQoYmFzZTY0KTtcbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY29sbGVjdFN0cmVhbShzdHJlYW06IFJlYWRhYmxlU3RyZWFtKTogUHJvbWlzZTxVaW50OEFycmF5PiB7XG4gIGxldCByZXMgPSBuZXcgVWludDhBcnJheSgwKTtcbiAgY29uc3QgcmVhZGVyID0gc3RyZWFtLmdldFJlYWRlcigpO1xuICBsZXQgaXNEb25lID0gZmFsc2U7XG4gIHdoaWxlICghaXNEb25lKSB7XG4gICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0gYXdhaXQgcmVhZGVyLnJlYWQoKTtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGNvbnN0IHByaW9yID0gcmVzO1xuICAgICAgcmVzID0gbmV3IFVpbnQ4QXJyYXkocHJpb3IubGVuZ3RoICsgdmFsdWUubGVuZ3RoKTtcbiAgICAgIHJlcy5zZXQocHJpb3IpO1xuICAgICAgcmVzLnNldCh2YWx1ZSwgcHJpb3IubGVuZ3RoKTtcbiAgICB9XG4gICAgaXNEb25lID0gZG9uZTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiByZWFkVG9CYXNlNjQoYmxvYjogQmxvYik6IFByb21pc2U8c3RyaW5nPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICByZWFkZXIub25sb2FkZW5kID0gKCkgPT4ge1xuICAgICAgLy8gcmVmZXJlbmNlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRmlsZVJlYWRlci9yZWFkQXNEYXRhVVJMXG4gICAgICAvLyByZXNwb25zZSBmcm9tIHJlYWRBc0RhdGFVUkwgaXMgYWx3YXlzIHByZXBlbmRlZCB3aXRoIFwiZGF0YToqLyo7YmFzZTY0LFwiXG4gICAgICBpZiAocmVhZGVyLnJlYWR5U3RhdGUgIT09IDIpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoXCJSZWFkZXIgYWJvcnRlZCB0b28gZWFybHlcIikpO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVzdWx0ID0gKHJlYWRlci5yZXN1bHQgPz8gXCJcIikgYXMgc3RyaW5nO1xuICAgICAgLy8gUmVzcG9uc2UgY2FuIGluY2x1ZGUgb25seSAnZGF0YTonIGZvciBlbXB0eSBibG9iLCByZXR1cm4gZW1wdHkgc3RyaW5nIGluIHRoaXMgY2FzZS5cbiAgICAgIC8vIE90aGVyd2lzZSwgcmV0dXJuIHRoZSBzdHJpbmcgYWZ0ZXIgJywnXG4gICAgICBjb25zdCBjb21tYUluZGV4ID0gcmVzdWx0LmluZGV4T2YoXCIsXCIpO1xuICAgICAgY29uc3QgZGF0YU9mZnNldCA9IGNvbW1hSW5kZXggPiAtMSA/IGNvbW1hSW5kZXggKyAxIDogcmVzdWx0Lmxlbmd0aDtcbiAgICAgIHJlc29sdmUocmVzdWx0LnN1YnN0cmluZyhkYXRhT2Zmc2V0KSk7XG4gICAgfTtcbiAgICByZWFkZXIub25hYm9ydCA9ICgpID0+IHJlamVjdChuZXcgRXJyb3IoXCJSZWFkIGFib3J0ZWRcIikpO1xuICAgIHJlYWRlci5vbmVycm9yID0gKCkgPT4gcmVqZWN0KHJlYWRlci5lcnJvcik7XG4gICAgLy8gcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyIGlzIG5vdCBhbHdheXMgYXZhaWxhYmxlXG4gICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoYmxvYik7XG4gIH0pO1xufVxuIl19