"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromSharedConfigFiles = exports.ENV_PROFILE = void 0;
const property_provider_1 = require("@aws-sdk/property-provider");
const shared_ini_file_loader_1 = require("@aws-sdk/shared-ini-file-loader");
const DEFAULT_PROFILE = "default";
exports.ENV_PROFILE = "AWS_PROFILE";
const fromSharedConfigFiles = (configSelector, { preferredFile = "config", ...init } = {}) => async () => {
    const { loadedConfig = shared_ini_file_loader_1.loadSharedConfigFiles(init), profile = process.env[exports.ENV_PROFILE] || DEFAULT_PROFILE } = init;
    const { configFile, credentialsFile } = await loadedConfig;
    const profileFromCredentials = credentialsFile[profile] || {};
    const profileFromConfig = configFile[profile] || {};
    const mergedProfile = preferredFile === "config"
        ? { ...profileFromCredentials, ...profileFromConfig }
        : { ...profileFromConfig, ...profileFromCredentials };
    try {
        const configValue = configSelector(mergedProfile);
        if (configValue === undefined) {
            throw new Error();
        }
        return configValue;
    }
    catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message ||
            `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`);
    }
};
exports.fromSharedConfigFiles = fromSharedConfigFiles;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbVNoYXJlZENvbmZpZ0ZpbGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Zyb21TaGFyZWRDb25maWdGaWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxrRUFBc0U7QUFDdEUsNEVBS3lDO0FBR3pDLE1BQU0sZUFBZSxHQUFHLFNBQVMsQ0FBQztBQUNyQixRQUFBLFdBQVcsR0FBRyxhQUFhLENBQUM7QUE2QmxDLE1BQU0scUJBQXFCLEdBQ2hDLENBQ0UsY0FBbUMsRUFDbkMsRUFBRSxhQUFhLEdBQUcsUUFBUSxFQUFFLEdBQUcsSUFBSSxLQUF1QixFQUFFLEVBQy9DLEVBQUUsQ0FDakIsS0FBSyxJQUFJLEVBQUU7SUFDVCxNQUFNLEVBQUUsWUFBWSxHQUFHLDhDQUFxQixDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFXLENBQUMsSUFBSSxlQUFlLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFFbkgsTUFBTSxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsR0FBRyxNQUFNLFlBQVksQ0FBQztJQUUzRCxNQUFNLHNCQUFzQixHQUFHLGVBQWUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDOUQsTUFBTSxpQkFBaUIsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3BELE1BQU0sYUFBYSxHQUNqQixhQUFhLEtBQUssUUFBUTtRQUN4QixDQUFDLENBQUMsRUFBRSxHQUFHLHNCQUFzQixFQUFFLEdBQUcsaUJBQWlCLEVBQUU7UUFDckQsQ0FBQyxDQUFDLEVBQUUsR0FBRyxpQkFBaUIsRUFBRSxHQUFHLHNCQUFzQixFQUFFLENBQUM7SUFFMUQsSUFBSTtRQUNGLE1BQU0sV0FBVyxHQUFHLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNsRCxJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7WUFDN0IsTUFBTSxJQUFJLEtBQUssRUFBRSxDQUFDO1NBQ25CO1FBQ0QsT0FBTyxXQUFXLENBQUM7S0FDcEI7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE1BQU0sSUFBSSw0Q0FBd0IsQ0FDaEMsQ0FBQyxDQUFDLE9BQU87WUFDUCxrQ0FBa0MsT0FBTyw0Q0FBNEMsY0FBYyxFQUFFLENBQ3hHLENBQUM7S0FDSDtBQUNILENBQUMsQ0FBQztBQTdCUyxRQUFBLHFCQUFxQix5QkE2QjlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ3JlZGVudGlhbHNQcm92aWRlckVycm9yIH0gZnJvbSBcIkBhd3Mtc2RrL3Byb3BlcnR5LXByb3ZpZGVyXCI7XG5pbXBvcnQge1xuICBsb2FkU2hhcmVkQ29uZmlnRmlsZXMsXG4gIFByb2ZpbGUsXG4gIFNoYXJlZENvbmZpZ0ZpbGVzLFxuICBTaGFyZWRDb25maWdJbml0IGFzIEJhc2VTaGFyZWRDb25maWdJbml0LFxufSBmcm9tIFwiQGF3cy1zZGsvc2hhcmVkLWluaS1maWxlLWxvYWRlclwiO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuY29uc3QgREVGQVVMVF9QUk9GSUxFID0gXCJkZWZhdWx0XCI7XG5leHBvcnQgY29uc3QgRU5WX1BST0ZJTEUgPSBcIkFXU19QUk9GSUxFXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2hhcmVkQ29uZmlnSW5pdCBleHRlbmRzIEJhc2VTaGFyZWRDb25maWdJbml0IHtcbiAgLyoqXG4gICAqIFRoZSBjb25maWd1cmF0aW9uIHByb2ZpbGUgdG8gdXNlLlxuICAgKi9cbiAgcHJvZmlsZT86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHByZWZlcnJlZCBzaGFyZWQgaW5pIGZpbGUgdG8gbG9hZCB0aGUgY29uZmlnLiBcImNvbmZpZ1wiIG9wdGlvbiByZWZlcnMgdG9cbiAgICogdGhlIHNoYXJlZCBjb25maWcgZmlsZShkZWZhdWx0cyB0byBgfi8uYXdzL2NvbmZpZ2ApLiBcImNyZWRlbnRpYWxzXCIgb3B0aW9uXG4gICAqIHJlZmVycyB0byB0aGUgc2hhcmVkIGNyZWRlbnRpYWxzIGZpbGUoZGVmYXVsdHMgdG8gYH4vLmF3cy9jcmVkZW50aWFsc2ApXG4gICAqL1xuICBwcmVmZXJyZWRGaWxlPzogXCJjb25maWdcIiB8IFwiY3JlZGVudGlhbHNcIjtcblxuICAvKipcbiAgICogQSBwcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB3aXRoIGxvYWRlZCBhbmQgcGFyc2VkIGNyZWRlbnRpYWxzIGZpbGVzLlxuICAgKiBVc2VkIHRvIGF2b2lkIGxvYWRpbmcgc2hhcmVkIGNvbmZpZyBmaWxlcyBtdWx0aXBsZSB0aW1lcy5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBsb2FkZWRDb25maWc/OiBQcm9taXNlPFNoYXJlZENvbmZpZ0ZpbGVzPjtcbn1cblxuZXhwb3J0IHR5cGUgR2V0dGVyRnJvbUNvbmZpZzxUPiA9IChwcm9maWxlOiBQcm9maWxlKSA9PiBUIHwgdW5kZWZpbmVkO1xuXG4vKipcbiAqIEdldCBjb25maWcgdmFsdWUgZnJvbSB0aGUgc2hhcmVkIGNvbmZpZyBmaWxlcyB3aXRoIGluZmVycmVkIHByb2ZpbGUgbmFtZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGZyb21TaGFyZWRDb25maWdGaWxlcyA9XG4gIDxUID0gc3RyaW5nPihcbiAgICBjb25maWdTZWxlY3RvcjogR2V0dGVyRnJvbUNvbmZpZzxUPixcbiAgICB7IHByZWZlcnJlZEZpbGUgPSBcImNvbmZpZ1wiLCAuLi5pbml0IH06IFNoYXJlZENvbmZpZ0luaXQgPSB7fVxuICApOiBQcm92aWRlcjxUPiA9PlxuICBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyBsb2FkZWRDb25maWcgPSBsb2FkU2hhcmVkQ29uZmlnRmlsZXMoaW5pdCksIHByb2ZpbGUgPSBwcm9jZXNzLmVudltFTlZfUFJPRklMRV0gfHwgREVGQVVMVF9QUk9GSUxFIH0gPSBpbml0O1xuXG4gICAgY29uc3QgeyBjb25maWdGaWxlLCBjcmVkZW50aWFsc0ZpbGUgfSA9IGF3YWl0IGxvYWRlZENvbmZpZztcblxuICAgIGNvbnN0IHByb2ZpbGVGcm9tQ3JlZGVudGlhbHMgPSBjcmVkZW50aWFsc0ZpbGVbcHJvZmlsZV0gfHwge307XG4gICAgY29uc3QgcHJvZmlsZUZyb21Db25maWcgPSBjb25maWdGaWxlW3Byb2ZpbGVdIHx8IHt9O1xuICAgIGNvbnN0IG1lcmdlZFByb2ZpbGUgPVxuICAgICAgcHJlZmVycmVkRmlsZSA9PT0gXCJjb25maWdcIlxuICAgICAgICA/IHsgLi4ucHJvZmlsZUZyb21DcmVkZW50aWFscywgLi4ucHJvZmlsZUZyb21Db25maWcgfVxuICAgICAgICA6IHsgLi4ucHJvZmlsZUZyb21Db25maWcsIC4uLnByb2ZpbGVGcm9tQ3JlZGVudGlhbHMgfTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBjb25maWdWYWx1ZSA9IGNvbmZpZ1NlbGVjdG9yKG1lcmdlZFByb2ZpbGUpO1xuICAgICAgaWYgKGNvbmZpZ1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29uZmlnVmFsdWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IENyZWRlbnRpYWxzUHJvdmlkZXJFcnJvcihcbiAgICAgICAgZS5tZXNzYWdlIHx8XG4gICAgICAgICAgYENhbm5vdCBsb2FkIGNvbmZpZyBmb3IgcHJvZmlsZSAke3Byb2ZpbGV9IGluIFNESyBjb25maWd1cmF0aW9uIGZpbGVzIHdpdGggZ2V0dGVyOiAke2NvbmZpZ1NlbGVjdG9yfWBcbiAgICAgICk7XG4gICAgfVxuICB9O1xuIl19