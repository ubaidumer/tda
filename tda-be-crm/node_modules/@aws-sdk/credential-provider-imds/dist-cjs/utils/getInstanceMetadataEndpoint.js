"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInstanceMetadataEndpoint = void 0;
const node_config_provider_1 = require("@aws-sdk/node-config-provider");
const url_parser_1 = require("@aws-sdk/url-parser");
const Endpoint_1 = require("../config/Endpoint");
const EndpointConfigOptions_1 = require("../config/EndpointConfigOptions");
const EndpointMode_1 = require("../config/EndpointMode");
const EndpointModeConfigOptions_1 = require("../config/EndpointModeConfigOptions");
const getInstanceMetadataEndpoint = async () => url_parser_1.parseUrl((await getFromEndpointConfig()) || (await getFromEndpointModeConfig()));
exports.getInstanceMetadataEndpoint = getInstanceMetadataEndpoint;
const getFromEndpointConfig = async () => node_config_provider_1.loadConfig(EndpointConfigOptions_1.ENDPOINT_CONFIG_OPTIONS)();
const getFromEndpointModeConfig = async () => {
    const endpointMode = await node_config_provider_1.loadConfig(EndpointModeConfigOptions_1.ENDPOINT_MODE_CONFIG_OPTIONS)();
    switch (endpointMode) {
        case EndpointMode_1.EndpointMode.IPv4:
            return Endpoint_1.Endpoint.IPv4;
        case EndpointMode_1.EndpointMode.IPv6:
            return Endpoint_1.Endpoint.IPv6;
        default:
            throw new Error(`Unsupported endpoint mode: ${endpointMode}.` + ` Select from ${Object.values(EndpointMode_1.EndpointMode)}`);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0SW5zdGFuY2VNZXRhZGF0YUVuZHBvaW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL2dldEluc3RhbmNlTWV0YWRhdGFFbmRwb2ludC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx3RUFBMkQ7QUFFM0Qsb0RBQStDO0FBRS9DLGlEQUEwRTtBQUMxRSwyRUFBbUg7QUFDbkgseURBQXNEO0FBQ3RELG1GQUk2QztBQW1CdEMsTUFBTSwyQkFBMkIsR0FBRyxLQUFLLElBQXVCLEVBQUUsQ0FDdkUscUJBQVEsQ0FBQyxDQUFDLE1BQU0scUJBQXFCLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSx5QkFBeUIsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUR0RSxRQUFBLDJCQUEyQiwrQkFDMkM7QUFFbkYsTUFBTSxxQkFBcUIsR0FBRyxLQUFLLElBQWlDLEVBQUUsQ0FBQyxpQ0FBVSxDQUFDLCtDQUF1QixDQUFDLEVBQUUsQ0FBQztBQUU3RyxNQUFNLHlCQUF5QixHQUFHLEtBQUssSUFBcUIsRUFBRTtJQUM1RCxNQUFNLFlBQVksR0FBRyxNQUFNLGlDQUFVLENBQUMsd0RBQTRCLENBQUMsRUFBRSxDQUFDO0lBQ3RFLFFBQVEsWUFBWSxFQUFFO1FBQ3BCLEtBQUssMkJBQVksQ0FBQyxJQUFJO1lBQ3BCLE9BQU8sbUJBQXdCLENBQUMsSUFBSSxDQUFDO1FBQ3ZDLEtBQUssMkJBQVksQ0FBQyxJQUFJO1lBQ3BCLE9BQU8sbUJBQXdCLENBQUMsSUFBSSxDQUFDO1FBQ3ZDO1lBQ0UsTUFBTSxJQUFJLEtBQUssQ0FBQyw4QkFBOEIsWUFBWSxHQUFHLEdBQUcsZ0JBQWdCLE1BQU0sQ0FBQyxNQUFNLENBQUMsMkJBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNsSDtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxvYWRDb25maWcgfSBmcm9tIFwiQGF3cy1zZGsvbm9kZS1jb25maWctcHJvdmlkZXJcIjtcbmltcG9ydCB7IEVuZHBvaW50IH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5pbXBvcnQgeyBwYXJzZVVybCB9IGZyb20gXCJAYXdzLXNkay91cmwtcGFyc2VyXCI7XG5cbmltcG9ydCB7IEVuZHBvaW50IGFzIEluc3RhbmNlTWV0YWRhdGFFbmRwb2ludCB9IGZyb20gXCIuLi9jb25maWcvRW5kcG9pbnRcIjtcbmltcG9ydCB7IENPTkZJR19FTkRQT0lOVF9OQU1FLCBFTkRQT0lOVF9DT05GSUdfT1BUSU9OUywgRU5WX0VORFBPSU5UX05BTUUgfSBmcm9tIFwiLi4vY29uZmlnL0VuZHBvaW50Q29uZmlnT3B0aW9uc1wiO1xuaW1wb3J0IHsgRW5kcG9pbnRNb2RlIH0gZnJvbSBcIi4uL2NvbmZpZy9FbmRwb2ludE1vZGVcIjtcbmltcG9ydCB7XG4gIENPTkZJR19FTkRQT0lOVF9NT0RFX05BTUUsXG4gIEVORFBPSU5UX01PREVfQ09ORklHX09QVElPTlMsXG4gIEVOVl9FTkRQT0lOVF9NT0RFX05BTUUsXG59IGZyb20gXCIuLi9jb25maWcvRW5kcG9pbnRNb2RlQ29uZmlnT3B0aW9uc1wiO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGhvc3QgdG8gdXNlIGZvciBpbnN0YW5jZSBtZXRhZGF0YSBzZXJ2aWNlIGNhbGwuXG4gKlxuICogVGhlIGhvc3QgaXMgcmVhZCBmcm9tIGVuZHBvaW50IHdoaWNoIGNhbiBiZSBzZXQgZWl0aGVyIGluXG4gKiB7QGxpbmsgRU5WX0VORFBPSU5UX05BTUV9IGVudmlyb25tZW50IHZhcmlhYmxlIG9yIHtAbGluayBDT05GSUdfRU5EUE9JTlRfTkFNRX1cbiAqIGNvbmZpZ3VyYXRpb24gcHJvcGVydHkuXG4gKlxuICogSWYgZW5kcG9pbnQgaXMgbm90IHNldCwgdGhlbiBlbmRwb2ludCBtb2RlIGlzIHJlYWQgZWl0aGVyIGZyb21cbiAqIHtAbGluayBFTlZfRU5EUE9JTlRfTU9ERV9OQU1FfSBlbnZpcm9ubWVudCB2YXJpYWJsZSBvciB7QGxpbmsgQ09ORklHX0VORFBPSU5UX01PREVfTkFNRX1cbiAqIGNvbmZpZ3VyYXRpb24gcHJvcGVydHkuIElmIGVuZHBvaW50IG1vZGUgaXMgbm90IHNldCwgdGhlbiBkZWZhdWx0IGVuZHBvaW50IG1vZGVcbiAqIHtAbGluayBFbmRwb2ludE1vZGUuSVB2NH0gaXMgdXNlZC5cbiAqXG4gKiBJZiBlbmRwb2ludCBtb2RlIGlzIHNldCB0byB7QGxpbmsgRW5kcG9pbnRNb2RlLklQdjR9LCB0aGVuIHRoZSBob3N0IGlzIHtAbGluayBFbmRwb2ludC5JUHY0fS5cbiAqIElmIGVuZHBvaW50IG1vZGUgaXMgc2V0IHRvIHtAbGluayBFbmRwb2ludE1vZGUuSVB2Nn0sIHRoZW4gdGhlIGhvc3QgaXMge0BsaW5rIEVuZHBvaW50LklQdjZ9LlxuICpcbiAqIEByZXR1cm5zIEhvc3QgdG8gdXNlIGZvciBpbnN0YW5jZSBtZXRhZGF0YSBzZXJ2aWNlIGNhbGwuXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRJbnN0YW5jZU1ldGFkYXRhRW5kcG9pbnQgPSBhc3luYyAoKTogUHJvbWlzZTxFbmRwb2ludD4gPT5cbiAgcGFyc2VVcmwoKGF3YWl0IGdldEZyb21FbmRwb2ludENvbmZpZygpKSB8fCAoYXdhaXQgZ2V0RnJvbUVuZHBvaW50TW9kZUNvbmZpZygpKSk7XG5cbmNvbnN0IGdldEZyb21FbmRwb2ludENvbmZpZyA9IGFzeW5jICgpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4gPT4gbG9hZENvbmZpZyhFTkRQT0lOVF9DT05GSUdfT1BUSU9OUykoKTtcblxuY29uc3QgZ2V0RnJvbUVuZHBvaW50TW9kZUNvbmZpZyA9IGFzeW5jICgpOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICBjb25zdCBlbmRwb2ludE1vZGUgPSBhd2FpdCBsb2FkQ29uZmlnKEVORFBPSU5UX01PREVfQ09ORklHX09QVElPTlMpKCk7XG4gIHN3aXRjaCAoZW5kcG9pbnRNb2RlKSB7XG4gICAgY2FzZSBFbmRwb2ludE1vZGUuSVB2NDpcbiAgICAgIHJldHVybiBJbnN0YW5jZU1ldGFkYXRhRW5kcG9pbnQuSVB2NDtcbiAgICBjYXNlIEVuZHBvaW50TW9kZS5JUHY2OlxuICAgICAgcmV0dXJuIEluc3RhbmNlTWV0YWRhdGFFbmRwb2ludC5JUHY2O1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGVuZHBvaW50IG1vZGU6ICR7ZW5kcG9pbnRNb2RlfS5gICsgYCBTZWxlY3QgZnJvbSAke09iamVjdC52YWx1ZXMoRW5kcG9pbnRNb2RlKX1gKTtcbiAgfVxufTtcbiJdfQ==