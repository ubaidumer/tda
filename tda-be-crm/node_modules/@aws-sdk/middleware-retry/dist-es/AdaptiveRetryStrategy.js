import { __awaiter, __extends, __generator, __rest } from "tslib";
import { RETRY_MODES } from "./config";
import { DefaultRateLimiter } from "./DefaultRateLimiter";
import { StandardRetryStrategy } from "./StandardRetryStrategy";
var AdaptiveRetryStrategy = (function (_super) {
    __extends(AdaptiveRetryStrategy, _super);
    function AdaptiveRetryStrategy(maxAttemptsProvider, options) {
        var _this = this;
        var _a = options !== null && options !== void 0 ? options : {}, rateLimiter = _a.rateLimiter, superOptions = __rest(_a, ["rateLimiter"]);
        _this = _super.call(this, maxAttemptsProvider, superOptions) || this;
        _this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter();
        _this.mode = RETRY_MODES.ADAPTIVE;
        return _this;
    }
    AdaptiveRetryStrategy.prototype.retry = function (next, args) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2, _super.prototype.retry.call(this, next, args, {
                        beforeRequest: function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                return [2, this.rateLimiter.getSendToken()];
                            });
                        }); },
                        afterRequest: function (response) {
                            _this.rateLimiter.updateClientSendingRate(response);
                        },
                    })];
            });
        });
    };
    return AdaptiveRetryStrategy;
}(StandardRetryStrategy));
export { AdaptiveRetryStrategy };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWRhcHRpdmVSZXRyeVN0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0FkYXB0aXZlUmV0cnlTdHJhdGVneS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN2QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUscUJBQXFCLEVBQWdDLE1BQU0seUJBQXlCLENBQUM7QUFVOUY7SUFBMkMseUNBQXFCO0lBRzlELCtCQUFZLG1CQUFxQyxFQUFFLE9BQXNDO1FBQXpGLGlCQUtDO1FBSkMsSUFBTSxLQUFtQyxPQUFPLGFBQVAsT0FBTyxjQUFQLE9BQU8sR0FBSSxFQUFFLEVBQTlDLFdBQVcsaUJBQUEsRUFBSyxZQUFZLGNBQTlCLGVBQWdDLENBQWdCLENBQUM7UUFDdkQsUUFBQSxrQkFBTSxtQkFBbUIsRUFBRSxZQUFZLENBQUMsU0FBQztRQUN6QyxLQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsYUFBWCxXQUFXLGNBQVgsV0FBVyxHQUFJLElBQUksa0JBQWtCLEVBQUUsQ0FBQztRQUMzRCxLQUFJLENBQUMsSUFBSSxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUM7O0lBQ25DLENBQUM7SUFFSyxxQ0FBSyxHQUFYLFVBQ0UsSUFBbUMsRUFDbkMsSUFBcUM7Ozs7Z0JBRXJDLFdBQU8saUJBQU0sS0FBSyxZQUFDLElBQUksRUFBRSxJQUFJLEVBQUU7d0JBQzdCLGFBQWEsRUFBRTs7Z0NBQ2IsV0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxFQUFDOzs2QkFDeEM7d0JBQ0QsWUFBWSxFQUFFLFVBQUMsUUFBYTs0QkFDMUIsS0FBSSxDQUFDLFdBQVcsQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsQ0FBQzt3QkFDckQsQ0FBQztxQkFDRixDQUFDLEVBQUM7OztLQUNKO0lBQ0gsNEJBQUM7QUFBRCxDQUFDLEFBdkJELENBQTJDLHFCQUFxQixHQXVCL0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaW5hbGl6ZUhhbmRsZXIsIEZpbmFsaXplSGFuZGxlckFyZ3VtZW50cywgTWV0YWRhdGFCZWFyZXIsIFByb3ZpZGVyIH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5cbmltcG9ydCB7IFJFVFJZX01PREVTIH0gZnJvbSBcIi4vY29uZmlnXCI7XG5pbXBvcnQgeyBEZWZhdWx0UmF0ZUxpbWl0ZXIgfSBmcm9tIFwiLi9EZWZhdWx0UmF0ZUxpbWl0ZXJcIjtcbmltcG9ydCB7IFN0YW5kYXJkUmV0cnlTdHJhdGVneSwgU3RhbmRhcmRSZXRyeVN0cmF0ZWd5T3B0aW9ucyB9IGZyb20gXCIuL1N0YW5kYXJkUmV0cnlTdHJhdGVneVwiO1xuaW1wb3J0IHsgUmF0ZUxpbWl0ZXIgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG4vKipcbiAqIFN0cmF0ZWd5IG9wdGlvbnMgdG8gYmUgcGFzc2VkIHRvIEFkYXB0aXZlUmV0cnlTdHJhdGVneVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFkYXB0aXZlUmV0cnlTdHJhdGVneU9wdGlvbnMgZXh0ZW5kcyBTdGFuZGFyZFJldHJ5U3RyYXRlZ3lPcHRpb25zIHtcbiAgcmF0ZUxpbWl0ZXI/OiBSYXRlTGltaXRlcjtcbn1cblxuZXhwb3J0IGNsYXNzIEFkYXB0aXZlUmV0cnlTdHJhdGVneSBleHRlbmRzIFN0YW5kYXJkUmV0cnlTdHJhdGVneSB7XG4gIHByaXZhdGUgcmF0ZUxpbWl0ZXI6IFJhdGVMaW1pdGVyO1xuXG4gIGNvbnN0cnVjdG9yKG1heEF0dGVtcHRzUHJvdmlkZXI6IFByb3ZpZGVyPG51bWJlcj4sIG9wdGlvbnM/OiBBZGFwdGl2ZVJldHJ5U3RyYXRlZ3lPcHRpb25zKSB7XG4gICAgY29uc3QgeyByYXRlTGltaXRlciwgLi4uc3VwZXJPcHRpb25zIH0gPSBvcHRpb25zID8/IHt9O1xuICAgIHN1cGVyKG1heEF0dGVtcHRzUHJvdmlkZXIsIHN1cGVyT3B0aW9ucyk7XG4gICAgdGhpcy5yYXRlTGltaXRlciA9IHJhdGVMaW1pdGVyID8/IG5ldyBEZWZhdWx0UmF0ZUxpbWl0ZXIoKTtcbiAgICB0aGlzLm1vZGUgPSBSRVRSWV9NT0RFUy5BREFQVElWRTtcbiAgfVxuXG4gIGFzeW5jIHJldHJ5PElucHV0IGV4dGVuZHMgb2JqZWN0LCBPdXB1dCBleHRlbmRzIE1ldGFkYXRhQmVhcmVyPihcbiAgICBuZXh0OiBGaW5hbGl6ZUhhbmRsZXI8SW5wdXQsIE91cHV0PixcbiAgICBhcmdzOiBGaW5hbGl6ZUhhbmRsZXJBcmd1bWVudHM8SW5wdXQ+XG4gICkge1xuICAgIHJldHVybiBzdXBlci5yZXRyeShuZXh0LCBhcmdzLCB7XG4gICAgICBiZWZvcmVSZXF1ZXN0OiBhc3luYyAoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhdGVMaW1pdGVyLmdldFNlbmRUb2tlbigpO1xuICAgICAgfSxcbiAgICAgIGFmdGVyUmVxdWVzdDogKHJlc3BvbnNlOiBhbnkpID0+IHtcbiAgICAgICAgdGhpcy5yYXRlTGltaXRlci51cGRhdGVDbGllbnRTZW5kaW5nUmF0ZShyZXNwb25zZSk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG59XG4iXX0=