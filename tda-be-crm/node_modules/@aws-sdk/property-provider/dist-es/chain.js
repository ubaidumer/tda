import { __values } from "tslib";
import { ProviderError } from "./ProviderError";
export function chain() {
    var providers = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        providers[_i] = arguments[_i];
    }
    return function () {
        var e_1, _a;
        var promise = Promise.reject(new ProviderError("No providers in chain"));
        var _loop_1 = function (provider) {
            promise = promise.catch(function (err) {
                if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
                    return provider();
                }
                throw err;
            });
        };
        try {
            for (var providers_1 = __values(providers), providers_1_1 = providers_1.next(); !providers_1_1.done; providers_1_1 = providers_1.next()) {
                var provider = providers_1_1.value;
                _loop_1(provider);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (providers_1_1 && !providers_1_1.done && (_a = providers_1.return)) _a.call(providers_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return promise;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY2hhaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQVdoRCxNQUFNLFVBQVUsS0FBSztJQUFJLG1CQUFnQztTQUFoQyxVQUFnQyxFQUFoQyxxQkFBZ0MsRUFBaEMsSUFBZ0M7UUFBaEMsOEJBQWdDOztJQUN2RCxPQUFPOztRQUNMLElBQUksT0FBTyxHQUFlLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxhQUFhLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO2dDQUMxRSxRQUFRO1lBQ2pCLE9BQU8sR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQUMsR0FBUTtnQkFDL0IsSUFBSSxHQUFHLGFBQUgsR0FBRyx1QkFBSCxHQUFHLENBQUUsV0FBVyxFQUFFO29CQUNwQixPQUFPLFFBQVEsRUFBRSxDQUFDO2lCQUNuQjtnQkFFRCxNQUFNLEdBQUcsQ0FBQztZQUNaLENBQUMsQ0FBQyxDQUFDOzs7WUFQTCxLQUF1QixJQUFBLGNBQUEsU0FBQSxTQUFTLENBQUEsb0NBQUE7Z0JBQTNCLElBQU0sUUFBUSxzQkFBQTt3QkFBUixRQUFRO2FBUWxCOzs7Ozs7Ozs7UUFFRCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuaW1wb3J0IHsgUHJvdmlkZXJFcnJvciB9IGZyb20gXCIuL1Byb3ZpZGVyRXJyb3JcIjtcblxuLyoqXG4gKiBDb21wb3NlIGEgc2luZ2xlIGNyZWRlbnRpYWwgcHJvdmlkZXIgZnVuY3Rpb24gZnJvbSBtdWx0aXBsZSBjcmVkZW50aWFsXG4gKiBwcm92aWRlcnMuIFRoZSBmaXJzdCBwcm92aWRlciBpbiB0aGUgYXJndW1lbnQgbGlzdCB3aWxsIGFsd2F5cyBiZSBpbnZva2VkO1xuICogc3Vic2VxdWVudCBwcm92aWRlcnMgaW4gdGhlIGxpc3Qgd2lsbCBiZSBpbnZva2VkIGluIHRoZSBvcmRlciBpbiB3aGljaCB0aGVcbiAqIHdlcmUgcmVjZWl2ZWQgaWYgdGhlIHByZWNlZGluZyBwcm92aWRlciBkaWQgbm90IHN1Y2Nlc3NmdWxseSByZXNvbHZlLlxuICpcbiAqIElmIG5vIHByb3ZpZGVycyB3ZXJlIHJlY2VpdmVkIG9yIG5vIHByb3ZpZGVyIHJlc29sdmVzIHN1Y2Nlc3NmdWxseSwgdGhlXG4gKiByZXR1cm5lZCBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFpbjxUPiguLi5wcm92aWRlcnM6IEFycmF5PFByb3ZpZGVyPFQ+Pik6IFByb3ZpZGVyPFQ+IHtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBsZXQgcHJvbWlzZTogUHJvbWlzZTxUPiA9IFByb21pc2UucmVqZWN0KG5ldyBQcm92aWRlckVycm9yKFwiTm8gcHJvdmlkZXJzIGluIGNoYWluXCIpKTtcbiAgICBmb3IgKGNvbnN0IHByb3ZpZGVyIG9mIHByb3ZpZGVycykge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UuY2F0Y2goKGVycjogYW55KSA9PiB7XG4gICAgICAgIGlmIChlcnI/LnRyeU5leHRMaW5rKSB7XG4gICAgICAgICAgcmV0dXJuIHByb3ZpZGVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfTtcbn1cbiJdfQ==