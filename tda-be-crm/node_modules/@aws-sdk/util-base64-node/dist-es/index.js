import { fromArrayBuffer, fromString } from "@aws-sdk/util-buffer-from";
var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
export function fromBase64(input) {
    if ((input.length * 3) % 4 !== 0) {
        throw new TypeError("Incorrect padding on base64 string.");
    }
    if (!BASE64_REGEX.exec(input)) {
        throw new TypeError("Invalid base64 string.");
    }
    var buffer = fromString(input, "base64");
    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
}
export function toBase64(input) {
    return fromArrayBuffer(input.buffer, input.byteOffset, input.byteLength).toString("base64");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUV4RSxJQUFNLFlBQVksR0FBRyx3QkFBd0IsQ0FBQztBQVE5QyxNQUFNLFVBQVUsVUFBVSxDQUFDLEtBQWE7SUFLdEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUNoQyxNQUFNLElBQUksU0FBUyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7S0FDNUQ7SUFJRCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUM3QixNQUFNLElBQUksU0FBUyxDQUFDLHdCQUF3QixDQUFDLENBQUM7S0FDL0M7SUFFRCxJQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRTNDLE9BQU8sSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUM3RSxDQUFDO0FBUUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxLQUFpQjtJQUN4QyxPQUFPLGVBQWUsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM5RixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnJvbUFycmF5QnVmZmVyLCBmcm9tU3RyaW5nIH0gZnJvbSBcIkBhd3Mtc2RrL3V0aWwtYnVmZmVyLWZyb21cIjtcblxuY29uc3QgQkFTRTY0X1JFR0VYID0gL15bQS1aYS16MC05Ky9dKj17MCwyfSQvO1xuXG4vKipcbiAqIENvbnZlcnRzIGEgYmFzZS02NCBlbmNvZGVkIHN0cmluZyB0byBhIFVpbnQ4QXJyYXkgb2YgYnl0ZXMgdXNpbmcgTm9kZS5KUydzXG4gKiBgYnVmZmVyYCBtb2R1bGUuXG4gKlxuICogQHBhcmFtIGlucHV0IFRoZSBiYXNlLTY0IGVuY29kZWQgc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tQmFzZTY0KGlucHV0OiBzdHJpbmcpOiBVaW50OEFycmF5IHtcbiAgLy8gTm9kZSdzIGJ1ZmZlciBtb2R1bGUgYWxsb3dzIHBhZGRpbmcgdG8gYmUgb21pdHRlZCwgYnV0IHdlIHdhbnQgdG8gZW5mb3JjZVxuICAvLyBpdC4gU28gaGVyZSB3ZSBlbnN1cmUgdGhhdCB0aGUgaW5wdXQgcmVwcmVzZW50cyBhIG51bWJlciBvZiBiaXRzIGRpdmlzaWJsZVxuICAvLyBieSA4LiBFYWNoIGNoYXJhY3RlciByZXByZXNlbnRzIDYgYml0cywgc28gYWZ0ZXIgcmVkdWNpbmcgdGhlIGZyYWN0aW9uIHdlXG4gIC8vIGVuZCB1cCBtdWxpdHBseWluZyBieSAzLzQgYW5kIGNoZWNraW5nIGZvciBhIHJlbWFpbmRlci5cbiAgaWYgKChpbnB1dC5sZW5ndGggKiAzKSAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbmNvcnJlY3QgcGFkZGluZyBvbiBiYXNlNjQgc3RyaW5nLmApO1xuICB9XG5cbiAgLy8gTm9kZSB3aWxsIGp1c3QgaW5nb3JlIGludmFsaWQgY2hhcmFjdGVycywgc28gd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhleSdyZVxuICAvLyBwcm9wZXJseSByZWplY3RlZC5cbiAgaWYgKCFCQVNFNjRfUkVHRVguZXhlYyhpbnB1dCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGJhc2U2NCBzdHJpbmcuYCk7XG4gIH1cblxuICBjb25zdCBidWZmZXIgPSBmcm9tU3RyaW5nKGlucHV0LCBcImJhc2U2NFwiKTtcblxuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLmJ1ZmZlciwgYnVmZmVyLmJ5dGVPZmZzZXQsIGJ1ZmZlci5ieXRlTGVuZ3RoKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIFVpbnQ4QXJyYXkgb2YgYmluYXJ5IGRhdGEgdG8gYSBiYXNlLTY0IGVuY29kZWQgc3RyaW5nIHVzaW5nXG4gKiBOb2RlLkpTJ3MgYGJ1ZmZlcmAgbW9kdWxlLlxuICpcbiAqIEBwYXJhbSBpbnB1dCBUaGUgYmluYXJ5IGRhdGEgdG8gZW5jb2RlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0Jhc2U2NChpbnB1dDogVWludDhBcnJheSk6IHN0cmluZyB7XG4gIHJldHVybiBmcm9tQXJyYXlCdWZmZXIoaW5wdXQuYnVmZmVyLCBpbnB1dC5ieXRlT2Zmc2V0LCBpbnB1dC5ieXRlTGVuZ3RoKS50b1N0cmluZyhcImJhc2U2NFwiKTtcbn1cbiJdfQ==