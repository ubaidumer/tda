"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toBase64 = exports.fromBase64 = void 0;
const util_buffer_from_1 = require("@aws-sdk/util-buffer-from");
const BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
function fromBase64(input) {
    if ((input.length * 3) % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
    }
    if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
    }
    const buffer = util_buffer_from_1.fromString(input, "base64");
    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
}
exports.fromBase64 = fromBase64;
function toBase64(input) {
    return util_buffer_from_1.fromArrayBuffer(input.buffer, input.byteOffset, input.byteLength).toString("base64");
}
exports.toBase64 = toBase64;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsZ0VBQXdFO0FBRXhFLE1BQU0sWUFBWSxHQUFHLHdCQUF3QixDQUFDO0FBUTlDLFNBQWdCLFVBQVUsQ0FBQyxLQUFhO0lBS3RDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDaEMsTUFBTSxJQUFJLFNBQVMsQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO0tBQzVEO0lBSUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDN0IsTUFBTSxJQUFJLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0tBQy9DO0lBRUQsTUFBTSxNQUFNLEdBQUcsNkJBQVUsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFM0MsT0FBTyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzdFLENBQUM7QUFsQkQsZ0NBa0JDO0FBUUQsU0FBZ0IsUUFBUSxDQUFDLEtBQWlCO0lBQ3hDLE9BQU8sa0NBQWUsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM5RixDQUFDO0FBRkQsNEJBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmcm9tQXJyYXlCdWZmZXIsIGZyb21TdHJpbmcgfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC1idWZmZXItZnJvbVwiO1xuXG5jb25zdCBCQVNFNjRfUkVHRVggPSAvXltBLVphLXowLTkrL10qPXswLDJ9JC87XG5cbi8qKlxuICogQ29udmVydHMgYSBiYXNlLTY0IGVuY29kZWQgc3RyaW5nIHRvIGEgVWludDhBcnJheSBvZiBieXRlcyB1c2luZyBOb2RlLkpTJ3NcbiAqIGBidWZmZXJgIG1vZHVsZS5cbiAqXG4gKiBAcGFyYW0gaW5wdXQgVGhlIGJhc2UtNjQgZW5jb2RlZCBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21CYXNlNjQoaW5wdXQ6IHN0cmluZyk6IFVpbnQ4QXJyYXkge1xuICAvLyBOb2RlJ3MgYnVmZmVyIG1vZHVsZSBhbGxvd3MgcGFkZGluZyB0byBiZSBvbWl0dGVkLCBidXQgd2Ugd2FudCB0byBlbmZvcmNlXG4gIC8vIGl0LiBTbyBoZXJlIHdlIGVuc3VyZSB0aGF0IHRoZSBpbnB1dCByZXByZXNlbnRzIGEgbnVtYmVyIG9mIGJpdHMgZGl2aXNpYmxlXG4gIC8vIGJ5IDguIEVhY2ggY2hhcmFjdGVyIHJlcHJlc2VudHMgNiBiaXRzLCBzbyBhZnRlciByZWR1Y2luZyB0aGUgZnJhY3Rpb24gd2VcbiAgLy8gZW5kIHVwIG11bGl0cGx5aW5nIGJ5IDMvNCBhbmQgY2hlY2tpbmcgZm9yIGEgcmVtYWluZGVyLlxuICBpZiAoKGlucHV0Lmxlbmd0aCAqIDMpICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEluY29ycmVjdCBwYWRkaW5nIG9uIGJhc2U2NCBzdHJpbmcuYCk7XG4gIH1cblxuICAvLyBOb2RlIHdpbGwganVzdCBpbmdvcmUgaW52YWxpZCBjaGFyYWN0ZXJzLCBzbyB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGV5J3JlXG4gIC8vIHByb3Blcmx5IHJlamVjdGVkLlxuICBpZiAoIUJBU0U2NF9SRUdFWC5leGVjKGlucHV0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgYmFzZTY0IHN0cmluZy5gKTtcbiAgfVxuXG4gIGNvbnN0IGJ1ZmZlciA9IGZyb21TdHJpbmcoaW5wdXQsIFwiYmFzZTY0XCIpO1xuXG4gIHJldHVybiBuZXcgVWludDhBcnJheShidWZmZXIuYnVmZmVyLCBidWZmZXIuYnl0ZU9mZnNldCwgYnVmZmVyLmJ5dGVMZW5ndGgpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgVWludDhBcnJheSBvZiBiaW5hcnkgZGF0YSB0byBhIGJhc2UtNjQgZW5jb2RlZCBzdHJpbmcgdXNpbmdcbiAqIE5vZGUuSlMncyBgYnVmZmVyYCBtb2R1bGUuXG4gKlxuICogQHBhcmFtIGlucHV0IFRoZSBiaW5hcnkgZGF0YSB0byBlbmNvZGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvQmFzZTY0KGlucHV0OiBVaW50OEFycmF5KTogc3RyaW5nIHtcbiAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcihpbnB1dC5idWZmZXIsIGlucHV0LmJ5dGVPZmZzZXQsIGlucHV0LmJ5dGVMZW5ndGgpLnRvU3RyaW5nKFwiYmFzZTY0XCIpO1xufVxuIl19