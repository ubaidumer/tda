import { __awaiter, __generator, __values } from "tslib";
import { toHex } from "@aws-sdk/util-hex-encoding";
import { KEY_TYPE_IDENTIFIER, MAX_CACHE_SIZE } from "./constants";
var signingKeyCache = {};
var cacheQueue = [];
export var createScope = function (shortDate, region, service) {
    return shortDate + "/" + region + "/" + service + "/" + KEY_TYPE_IDENTIFIER;
};
export var getSigningKey = function (sha256Constructor, credentials, shortDate, region, service) { return __awaiter(void 0, void 0, void 0, function () {
    var credsHash, cacheKey, key, _a, _b, signable, e_1_1;
    var e_1, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0: return [4, hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId)];
            case 1:
                credsHash = _d.sent();
                cacheKey = shortDate + ":" + region + ":" + service + ":" + toHex(credsHash) + ":" + credentials.sessionToken;
                if (cacheKey in signingKeyCache) {
                    return [2, signingKeyCache[cacheKey]];
                }
                cacheQueue.push(cacheKey);
                while (cacheQueue.length > MAX_CACHE_SIZE) {
                    delete signingKeyCache[cacheQueue.shift()];
                }
                key = "AWS4" + credentials.secretAccessKey;
                _d.label = 2;
            case 2:
                _d.trys.push([2, 7, 8, 9]);
                _a = __values([shortDate, region, service, KEY_TYPE_IDENTIFIER]), _b = _a.next();
                _d.label = 3;
            case 3:
                if (!!_b.done) return [3, 6];
                signable = _b.value;
                return [4, hmac(sha256Constructor, key, signable)];
            case 4:
                key = _d.sent();
                _d.label = 5;
            case 5:
                _b = _a.next();
                return [3, 3];
            case 6: return [3, 9];
            case 7:
                e_1_1 = _d.sent();
                e_1 = { error: e_1_1 };
                return [3, 9];
            case 8:
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
                return [7];
            case 9: return [2, (signingKeyCache[cacheKey] = key)];
        }
    });
}); };
export var clearCredentialCache = function () {
    cacheQueue.length = 0;
    Object.keys(signingKeyCache).forEach(function (cacheKey) {
        delete signingKeyCache[cacheKey];
    });
};
var hmac = function (ctor, secret, data) {
    var hash = new ctor(secret);
    hash.update(data);
    return hash.digest();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGVudGlhbERlcml2YXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY3JlZGVudGlhbERlcml2YXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVuRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsY0FBYyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRWxFLElBQU0sZUFBZSxHQUFrQyxFQUFFLENBQUM7QUFDMUQsSUFBTSxVQUFVLEdBQWtCLEVBQUUsQ0FBQztBQVNyQyxNQUFNLENBQUMsSUFBTSxXQUFXLEdBQUcsVUFBQyxTQUFpQixFQUFFLE1BQWMsRUFBRSxPQUFlO0lBQzVFLE9BQUcsU0FBUyxTQUFJLE1BQU0sU0FBSSxPQUFPLFNBQUksbUJBQXFCO0FBQTFELENBQTBELENBQUM7QUFjN0QsTUFBTSxDQUFDLElBQU0sYUFBYSxHQUFHLFVBQzNCLGlCQUFrQyxFQUNsQyxXQUF3QixFQUN4QixTQUFpQixFQUNqQixNQUFjLEVBQ2QsT0FBZTs7Ozs7b0JBRUcsV0FBTSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsV0FBVyxDQUFDLGVBQWUsRUFBRSxXQUFXLENBQUMsV0FBVyxDQUFDLEVBQUE7O2dCQUEvRixTQUFTLEdBQUcsU0FBbUY7Z0JBQy9GLFFBQVEsR0FBTSxTQUFTLFNBQUksTUFBTSxTQUFJLE9BQU8sU0FBSSxLQUFLLENBQUMsU0FBUyxDQUFDLFNBQUksV0FBVyxDQUFDLFlBQWMsQ0FBQztnQkFDckcsSUFBSSxRQUFRLElBQUksZUFBZSxFQUFFO29CQUMvQixXQUFPLGVBQWUsQ0FBQyxRQUFRLENBQUMsRUFBQztpQkFDbEM7Z0JBRUQsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDMUIsT0FBTyxVQUFVLENBQUMsTUFBTSxHQUFHLGNBQWMsRUFBRTtvQkFDekMsT0FBTyxlQUFlLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBWSxDQUFDLENBQUM7aUJBQ3REO2dCQUVHLEdBQUcsR0FBZSxTQUFPLFdBQVcsQ0FBQyxlQUFpQixDQUFDOzs7O2dCQUNwQyxLQUFBLFNBQUEsQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxtQkFBbUIsQ0FBQyxDQUFBOzs7O2dCQUE3RCxRQUFRO2dCQUNYLFdBQU0sSUFBSSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRSxRQUFRLENBQUMsRUFBQTs7Z0JBQWxELEdBQUcsR0FBRyxTQUE0QyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7O29CQUVyRCxXQUFPLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQWlCLENBQUMsRUFBQzs7O0tBQ3hELENBQUM7QUFLRixNQUFNLENBQUMsSUFBTSxvQkFBb0IsR0FBRztJQUNsQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUN0QixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLFFBQVE7UUFDNUMsT0FBTyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFFRixJQUFNLElBQUksR0FBRyxVQUFDLElBQXFCLEVBQUUsTUFBa0IsRUFBRSxJQUFnQjtJQUN2RSxJQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xCLE9BQU8sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ3ZCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENyZWRlbnRpYWxzLCBIYXNoQ29uc3RydWN0b3IsIFNvdXJjZURhdGEgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcbmltcG9ydCB7IHRvSGV4IH0gZnJvbSBcIkBhd3Mtc2RrL3V0aWwtaGV4LWVuY29kaW5nXCI7XG5cbmltcG9ydCB7IEtFWV9UWVBFX0lERU5USUZJRVIsIE1BWF9DQUNIRV9TSVpFIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5cbmNvbnN0IHNpZ25pbmdLZXlDYWNoZTogeyBba2V5OiBzdHJpbmddOiBVaW50OEFycmF5IH0gPSB7fTtcbmNvbnN0IGNhY2hlUXVldWU6IEFycmF5PHN0cmluZz4gPSBbXTtcblxuLyoqXG4gKiBDcmVhdGUgYSBzdHJpbmcgZGVzY3JpYmluZyB0aGUgc2NvcGUgb2YgY3JlZGVudGlhbHMgdXNlZCB0byBzaWduIGEgcmVxdWVzdC5cbiAqXG4gKiBAcGFyYW0gc2hvcnREYXRlIFRoZSBjdXJyZW50IGNhbGVuZGFyIGRhdGUgaW4gdGhlIGZvcm0gWVlZWU1NREQuXG4gKiBAcGFyYW0gcmVnaW9uICAgIFRoZSBBV1MgcmVnaW9uIGluIHdoaWNoIHRoZSBzZXJ2aWNlIHJlc2lkZXMuXG4gKiBAcGFyYW0gc2VydmljZSAgIFRoZSBzZXJ2aWNlIHRvIHdoaWNoIHRoZSBzaWduZWQgcmVxdWVzdCBpcyBiZWluZyBzZW50LlxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlU2NvcGUgPSAoc2hvcnREYXRlOiBzdHJpbmcsIHJlZ2lvbjogc3RyaW5nLCBzZXJ2aWNlOiBzdHJpbmcpOiBzdHJpbmcgPT5cbiAgYCR7c2hvcnREYXRlfS8ke3JlZ2lvbn0vJHtzZXJ2aWNlfS8ke0tFWV9UWVBFX0lERU5USUZJRVJ9YDtcblxuLyoqXG4gKiBEZXJpdmUgYSBzaWduaW5nIGtleSBmcm9tIGl0cyBjb21wb3NpdGUgcGFydHNcbiAqXG4gKiBAcGFyYW0gc2hhMjU2Q29uc3RydWN0b3IgQSBjb25zdHJ1Y3RvciBmdW5jdGlvbiB0aGF0IGNhbiBpbnN0YW50aWF0ZSBTSEEtMjU2XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzaCBvYmplY3RzLlxuICogQHBhcmFtIGNyZWRlbnRpYWxzICAgICAgIFRoZSBjcmVkZW50aWFscyB3aXRoIHdoaWNoIHRoZSByZXF1ZXN0IHdpbGwgYmVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduZWQuXG4gKiBAcGFyYW0gc2hvcnREYXRlICAgICAgICAgVGhlIGN1cnJlbnQgY2FsZW5kYXIgZGF0ZSBpbiB0aGUgZm9ybSBZWVlZTU1ERC5cbiAqIEBwYXJhbSByZWdpb24gICAgICAgICAgICBUaGUgQVdTIHJlZ2lvbiBpbiB3aGljaCB0aGUgc2VydmljZSByZXNpZGVzLlxuICogQHBhcmFtIHNlcnZpY2UgICAgICAgICAgIFRoZSBzZXJ2aWNlIHRvIHdoaWNoIHRoZSBzaWduZWQgcmVxdWVzdCBpcyBiZWluZ1xuICogICAgICAgICAgICAgICAgICAgICAgICAgIHNlbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRTaWduaW5nS2V5ID0gYXN5bmMgKFxuICBzaGEyNTZDb25zdHJ1Y3RvcjogSGFzaENvbnN0cnVjdG9yLFxuICBjcmVkZW50aWFsczogQ3JlZGVudGlhbHMsXG4gIHNob3J0RGF0ZTogc3RyaW5nLFxuICByZWdpb246IHN0cmluZyxcbiAgc2VydmljZTogc3RyaW5nXG4pOiBQcm9taXNlPFVpbnQ4QXJyYXk+ID0+IHtcbiAgY29uc3QgY3JlZHNIYXNoID0gYXdhaXQgaG1hYyhzaGEyNTZDb25zdHJ1Y3RvciwgY3JlZGVudGlhbHMuc2VjcmV0QWNjZXNzS2V5LCBjcmVkZW50aWFscy5hY2Nlc3NLZXlJZCk7XG4gIGNvbnN0IGNhY2hlS2V5ID0gYCR7c2hvcnREYXRlfToke3JlZ2lvbn06JHtzZXJ2aWNlfToke3RvSGV4KGNyZWRzSGFzaCl9OiR7Y3JlZGVudGlhbHMuc2Vzc2lvblRva2VufWA7XG4gIGlmIChjYWNoZUtleSBpbiBzaWduaW5nS2V5Q2FjaGUpIHtcbiAgICByZXR1cm4gc2lnbmluZ0tleUNhY2hlW2NhY2hlS2V5XTtcbiAgfVxuXG4gIGNhY2hlUXVldWUucHVzaChjYWNoZUtleSk7XG4gIHdoaWxlIChjYWNoZVF1ZXVlLmxlbmd0aCA+IE1BWF9DQUNIRV9TSVpFKSB7XG4gICAgZGVsZXRlIHNpZ25pbmdLZXlDYWNoZVtjYWNoZVF1ZXVlLnNoaWZ0KCkgYXMgc3RyaW5nXTtcbiAgfVxuXG4gIGxldCBrZXk6IFNvdXJjZURhdGEgPSBgQVdTNCR7Y3JlZGVudGlhbHMuc2VjcmV0QWNjZXNzS2V5fWA7XG4gIGZvciAoY29uc3Qgc2lnbmFibGUgb2YgW3Nob3J0RGF0ZSwgcmVnaW9uLCBzZXJ2aWNlLCBLRVlfVFlQRV9JREVOVElGSUVSXSkge1xuICAgIGtleSA9IGF3YWl0IGhtYWMoc2hhMjU2Q29uc3RydWN0b3IsIGtleSwgc2lnbmFibGUpO1xuICB9XG4gIHJldHVybiAoc2lnbmluZ0tleUNhY2hlW2NhY2hlS2V5XSA9IGtleSBhcyBVaW50OEFycmF5KTtcbn07XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBjbGVhckNyZWRlbnRpYWxDYWNoZSA9ICgpOiB2b2lkID0+IHtcbiAgY2FjaGVRdWV1ZS5sZW5ndGggPSAwO1xuICBPYmplY3Qua2V5cyhzaWduaW5nS2V5Q2FjaGUpLmZvckVhY2goKGNhY2hlS2V5KSA9PiB7XG4gICAgZGVsZXRlIHNpZ25pbmdLZXlDYWNoZVtjYWNoZUtleV07XG4gIH0pO1xufTtcblxuY29uc3QgaG1hYyA9IChjdG9yOiBIYXNoQ29uc3RydWN0b3IsIHNlY3JldDogU291cmNlRGF0YSwgZGF0YTogU291cmNlRGF0YSk6IFByb21pc2U8VWludDhBcnJheT4gPT4ge1xuICBjb25zdCBoYXNoID0gbmV3IGN0b3Ioc2VjcmV0KTtcbiAgaGFzaC51cGRhdGUoZGF0YSk7XG4gIHJldHVybiBoYXNoLmRpZ2VzdCgpO1xufTtcbiJdfQ==