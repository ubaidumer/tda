"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCopySnapshotPresignedUrlPlugin = exports.copySnapshotPresignedUrlMiddlewareOptions = exports.copySnapshotPresignedUrlMiddleware = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const signature_v4_1 = require("@aws-sdk/signature-v4");
const util_format_url_1 = require("@aws-sdk/util-format-url");
const util_uri_escape_1 = require("@aws-sdk/util-uri-escape");
const version = "2016-11-15";
function copySnapshotPresignedUrlMiddleware(options) {
    return (next) => async (args) => {
        const { input } = args;
        if (!input.PresignedUrl) {
            const region = await options.region();
            const resolvedEndpoint = await options.endpoint();
            resolvedEndpoint.hostname = `ec2.${input.SourceRegion}.amazonaws.com`;
            const request = new protocol_http_1.HttpRequest({
                ...resolvedEndpoint,
                protocol: "https",
                headers: {
                    host: resolvedEndpoint.hostname,
                },
                query: {
                    Action: "CopySnapshot",
                    Version: version,
                    SourceRegion: input.SourceRegion,
                    SourceSnapshotId: input.SourceSnapshotId,
                    DestinationRegion: region,
                },
            });
            const signer = new signature_v4_1.SignatureV4({
                credentials: options.credentials,
                region: input.SourceRegion,
                service: "ec2",
                sha256: options.sha256,
                uriEscapePath: options.signingEscapePath,
            });
            const presignedRequest = await signer.presign(request, {
                expiresIn: 3600,
            });
            args = {
                ...args,
                input: {
                    ...args.input,
                    DestinationRegion: region,
                    PresignedUrl: util_uri_escape_1.escapeUri(util_format_url_1.formatUrl(presignedRequest)),
                },
            };
        }
        return next(args);
    };
}
exports.copySnapshotPresignedUrlMiddleware = copySnapshotPresignedUrlMiddleware;
exports.copySnapshotPresignedUrlMiddlewareOptions = {
    step: "initialize",
    tags: ["CROSS_REGION_PRESIGNED_URL"],
    name: "crossRegionPresignedUrlMiddleware",
    override: true,
};
const getCopySnapshotPresignedUrlPlugin = (config) => ({
    applyToStack: (clientStack) => {
        clientStack.add(copySnapshotPresignedUrlMiddleware(config), exports.copySnapshotPresignedUrlMiddlewareOptions);
    },
});
exports.getCopySnapshotPresignedUrlPlugin = getCopySnapshotPresignedUrlPlugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQXFEO0FBQ3JELHdEQUFvRDtBQWNwRCw4REFBcUQ7QUFDckQsOERBQXFEO0FBVXJELE1BQU0sT0FBTyxHQUFHLFlBQVksQ0FBQztBQUc3QixTQUFnQixrQ0FBa0MsQ0FBQyxPQUEyQjtJQUM1RSxPQUFPLENBQWdDLElBQW9DLEVBQWtDLEVBQUUsQ0FDN0csS0FBSyxFQUFFLElBQXFDLEVBQTRDLEVBQUU7UUFDeEYsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRTtZQUN2QixNQUFNLE1BQU0sR0FBRyxNQUFNLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUN0QyxNQUFNLGdCQUFnQixHQUFHLE1BQU0sT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2xELGdCQUFnQixDQUFDLFFBQVEsR0FBRyxPQUFPLEtBQUssQ0FBQyxZQUFZLGdCQUFnQixDQUFDO1lBQ3RFLE1BQU0sT0FBTyxHQUFHLElBQUksMkJBQVcsQ0FBQztnQkFDOUIsR0FBRyxnQkFBZ0I7Z0JBQ25CLFFBQVEsRUFBRSxPQUFPO2dCQUNqQixPQUFPLEVBQUU7b0JBQ1AsSUFBSSxFQUFFLGdCQUFnQixDQUFDLFFBQVE7aUJBQ2hDO2dCQUNELEtBQUssRUFBRTtvQkFDTCxNQUFNLEVBQUUsY0FBYztvQkFDdEIsT0FBTyxFQUFFLE9BQU87b0JBQ2hCLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtvQkFDaEMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLGdCQUFnQjtvQkFDeEMsaUJBQWlCLEVBQUUsTUFBTTtpQkFDMUI7YUFDRixDQUFDLENBQUM7WUFDSCxNQUFNLE1BQU0sR0FBRyxJQUFJLDBCQUFXLENBQUM7Z0JBQzdCLFdBQVcsRUFBRSxPQUFPLENBQUMsV0FBVztnQkFDaEMsTUFBTSxFQUFFLEtBQUssQ0FBQyxZQUFZO2dCQUMxQixPQUFPLEVBQUUsS0FBSztnQkFDZCxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU07Z0JBQ3RCLGFBQWEsRUFBRSxPQUFPLENBQUMsaUJBQWlCO2FBQ3pDLENBQUMsQ0FBQztZQUNILE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRTtnQkFDckQsU0FBUyxFQUFFLElBQUk7YUFDaEIsQ0FBQyxDQUFDO1lBRUgsSUFBSSxHQUFHO2dCQUNMLEdBQUcsSUFBSTtnQkFDUCxLQUFLLEVBQUU7b0JBQ0wsR0FBRyxJQUFJLENBQUMsS0FBSztvQkFDYixpQkFBaUIsRUFBRSxNQUFNO29CQUN6QixZQUFZLEVBQUUsMkJBQVMsQ0FBQywyQkFBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7aUJBQ3JEO2FBQ0YsQ0FBQztTQUNIO1FBRUQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEIsQ0FBQyxDQUFDO0FBQ04sQ0FBQztBQTdDRCxnRkE2Q0M7QUFFWSxRQUFBLHlDQUF5QyxHQUE2QjtJQUNqRixJQUFJLEVBQUUsWUFBWTtJQUNsQixJQUFJLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQztJQUNwQyxJQUFJLEVBQUUsbUNBQW1DO0lBQ3pDLFFBQVEsRUFBRSxJQUFJO0NBQ2YsQ0FBQztBQUVLLE1BQU0saUNBQWlDLEdBQUcsQ0FBQyxNQUEwQixFQUF1QixFQUFFLENBQUMsQ0FBQztJQUNyRyxZQUFZLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFBRTtRQUM1QixXQUFXLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLGlEQUF5QyxDQUFDLENBQUM7SUFDekcsQ0FBQztDQUNGLENBQUMsQ0FBQztBQUpVLFFBQUEsaUNBQWlDLHFDQUkzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBSZXF1ZXN0IH0gZnJvbSBcIkBhd3Mtc2RrL3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IFNpZ25hdHVyZVY0IH0gZnJvbSBcIkBhd3Mtc2RrL3NpZ25hdHVyZS12NFwiO1xuaW1wb3J0IHtcbiAgQ3JlZGVudGlhbHMsXG4gIEVuZHBvaW50LFxuICBIYXNoQ29uc3RydWN0b3IsXG4gIEluaXRpYWxpemVIYW5kbGVyLFxuICBJbml0aWFsaXplSGFuZGxlckFyZ3VtZW50cyxcbiAgSW5pdGlhbGl6ZUhhbmRsZXJPcHRpb25zLFxuICBJbml0aWFsaXplSGFuZGxlck91dHB1dCxcbiAgSW5pdGlhbGl6ZU1pZGRsZXdhcmUsXG4gIE1ldGFkYXRhQmVhcmVyLFxuICBQbHVnZ2FibGUsXG4gIFByb3ZpZGVyLFxufSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcbmltcG9ydCB7IGZvcm1hdFVybCB9IGZyb20gXCJAYXdzLXNkay91dGlsLWZvcm1hdC11cmxcIjtcbmltcG9ydCB7IGVzY2FwZVVyaSB9IGZyb20gXCJAYXdzLXNkay91dGlsLXVyaS1lc2NhcGVcIjtcblxuaW50ZXJmYWNlIFByZXZpb3VzbHlSZXNvbHZlZCB7XG4gIGNyZWRlbnRpYWxzOiBQcm92aWRlcjxDcmVkZW50aWFscz47XG4gIGVuZHBvaW50OiBQcm92aWRlcjxFbmRwb2ludD47XG4gIHJlZ2lvbjogUHJvdmlkZXI8c3RyaW5nPjtcbiAgc2hhMjU2OiBIYXNoQ29uc3RydWN0b3I7XG4gIHNpZ25pbmdFc2NhcGVQYXRoOiBib29sZWFuO1xufVxuXG5jb25zdCB2ZXJzaW9uID0gXCIyMDE2LTExLTE1XCI7XG5cbi8vYW4gaW5pdGlhbGl6ZSBtaWRkbGV3YXJlIHRvIGFkZCBQcmVzaWduVXJsIHRvIGlucHV0XG5leHBvcnQgZnVuY3Rpb24gY29weVNuYXBzaG90UHJlc2lnbmVkVXJsTWlkZGxld2FyZShvcHRpb25zOiBQcmV2aW91c2x5UmVzb2x2ZWQpOiBJbml0aWFsaXplTWlkZGxld2FyZTxhbnksIGFueT4ge1xuICByZXR1cm4gPE91dHB1dCBleHRlbmRzIE1ldGFkYXRhQmVhcmVyPihuZXh0OiBJbml0aWFsaXplSGFuZGxlcjxhbnksIE91dHB1dD4pOiBJbml0aWFsaXplSGFuZGxlcjxhbnksIE91dHB1dD4gPT5cbiAgICBhc3luYyAoYXJnczogSW5pdGlhbGl6ZUhhbmRsZXJBcmd1bWVudHM8YW55Pik6IFByb21pc2U8SW5pdGlhbGl6ZUhhbmRsZXJPdXRwdXQ8T3V0cHV0Pj4gPT4ge1xuICAgICAgY29uc3QgeyBpbnB1dCB9ID0gYXJncztcbiAgICAgIGlmICghaW5wdXQuUHJlc2lnbmVkVXJsKSB7XG4gICAgICAgIGNvbnN0IHJlZ2lvbiA9IGF3YWl0IG9wdGlvbnMucmVnaW9uKCk7XG4gICAgICAgIGNvbnN0IHJlc29sdmVkRW5kcG9pbnQgPSBhd2FpdCBvcHRpb25zLmVuZHBvaW50KCk7XG4gICAgICAgIHJlc29sdmVkRW5kcG9pbnQuaG9zdG5hbWUgPSBgZWMyLiR7aW5wdXQuU291cmNlUmVnaW9ufS5hbWF6b25hd3MuY29tYDtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBIdHRwUmVxdWVzdCh7XG4gICAgICAgICAgLi4ucmVzb2x2ZWRFbmRwb2ludCxcbiAgICAgICAgICBwcm90b2NvbDogXCJodHRwc1wiLFxuICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIGhvc3Q6IHJlc29sdmVkRW5kcG9pbnQuaG9zdG5hbWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgQWN0aW9uOiBcIkNvcHlTbmFwc2hvdFwiLFxuICAgICAgICAgICAgVmVyc2lvbjogdmVyc2lvbixcbiAgICAgICAgICAgIFNvdXJjZVJlZ2lvbjogaW5wdXQuU291cmNlUmVnaW9uLFxuICAgICAgICAgICAgU291cmNlU25hcHNob3RJZDogaW5wdXQuU291cmNlU25hcHNob3RJZCxcbiAgICAgICAgICAgIERlc3RpbmF0aW9uUmVnaW9uOiByZWdpb24sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHNpZ25lciA9IG5ldyBTaWduYXR1cmVWNCh7XG4gICAgICAgICAgY3JlZGVudGlhbHM6IG9wdGlvbnMuY3JlZGVudGlhbHMsXG4gICAgICAgICAgcmVnaW9uOiBpbnB1dC5Tb3VyY2VSZWdpb24sXG4gICAgICAgICAgc2VydmljZTogXCJlYzJcIixcbiAgICAgICAgICBzaGEyNTY6IG9wdGlvbnMuc2hhMjU2LFxuICAgICAgICAgIHVyaUVzY2FwZVBhdGg6IG9wdGlvbnMuc2lnbmluZ0VzY2FwZVBhdGgsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBwcmVzaWduZWRSZXF1ZXN0ID0gYXdhaXQgc2lnbmVyLnByZXNpZ24ocmVxdWVzdCwge1xuICAgICAgICAgIGV4cGlyZXNJbjogMzYwMCxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXJncyA9IHtcbiAgICAgICAgICAuLi5hcmdzLFxuICAgICAgICAgIGlucHV0OiB7XG4gICAgICAgICAgICAuLi5hcmdzLmlucHV0LFxuICAgICAgICAgICAgRGVzdGluYXRpb25SZWdpb246IHJlZ2lvbixcbiAgICAgICAgICAgIFByZXNpZ25lZFVybDogZXNjYXBlVXJpKGZvcm1hdFVybChwcmVzaWduZWRSZXF1ZXN0KSksXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5leHQoYXJncyk7XG4gICAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGNvcHlTbmFwc2hvdFByZXNpZ25lZFVybE1pZGRsZXdhcmVPcHRpb25zOiBJbml0aWFsaXplSGFuZGxlck9wdGlvbnMgPSB7XG4gIHN0ZXA6IFwiaW5pdGlhbGl6ZVwiLFxuICB0YWdzOiBbXCJDUk9TU19SRUdJT05fUFJFU0lHTkVEX1VSTFwiXSxcbiAgbmFtZTogXCJjcm9zc1JlZ2lvblByZXNpZ25lZFVybE1pZGRsZXdhcmVcIixcbiAgb3ZlcnJpZGU6IHRydWUsXG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Q29weVNuYXBzaG90UHJlc2lnbmVkVXJsUGx1Z2luID0gKGNvbmZpZzogUHJldmlvdXNseVJlc29sdmVkKTogUGx1Z2dhYmxlPGFueSwgYW55PiA9PiAoe1xuICBhcHBseVRvU3RhY2s6IChjbGllbnRTdGFjaykgPT4ge1xuICAgIGNsaWVudFN0YWNrLmFkZChjb3B5U25hcHNob3RQcmVzaWduZWRVcmxNaWRkbGV3YXJlKGNvbmZpZyksIGNvcHlTbmFwc2hvdFByZXNpZ25lZFVybE1pZGRsZXdhcmVPcHRpb25zKTtcbiAgfSxcbn0pO1xuIl19