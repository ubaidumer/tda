{"version":3,"file":"modules.js","sourceRoot":"","sources":["../../../lib/manager/terragrunt/modules.ts"],"names":[],"mappings":"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","sourcesContent":["import { GitTagsDatasource } from '../../datasource/git-tags';\nimport * as datasourceGithubTags from '../../datasource/github-tags';\nimport { TerraformModuleDatasource } from '../../datasource/terraform-module';\nimport { logger } from '../../logger';\nimport { SkipReason } from '../../types';\nimport { regEx } from '../../util/regex';\nimport type { PackageDependency } from '../types';\nimport { TerragruntDependencyTypes } from './common';\nimport { extractTerragruntProvider } from './providers';\nimport type { ExtractionResult } from './types';\n\nexport const githubRefMatchRegex = regEx(\n  /github\\.com([/:])(?<project>[^/]+\\/[a-z0-9-_.]+).*\\?ref=(?<tag>.*)$/i\n);\nexport const gitTagsRefMatchRegex = regEx(\n  /(?:git::)?(?<url>(?:http|https|ssh):\\/\\/(?:.*@)?(?<path>.*.*\\/(?<project>.*\\/.*)))\\?ref=(?<tag>.*)$/\n);\nconst hostnameMatchRegex = regEx(/^(?<hostname>([\\w|\\d]+\\.)+[\\w|\\d]+)/);\n\nexport function extractTerragruntModule(\n  startingLine: number,\n  lines: string[]\n): ExtractionResult {\n  const moduleName = 'terragrunt';\n  const result = extractTerragruntProvider(startingLine, lines, moduleName);\n  result.dependencies.forEach((dep) => {\n    dep.managerData.terragruntDependencyType =\n      TerragruntDependencyTypes.terragrunt;\n  });\n  return result;\n}\n\nexport function analyseTerragruntModule(dep: PackageDependency): void {\n  const githubRefMatch = githubRefMatchRegex.exec(dep.managerData.source);\n  const gitTagsRefMatch = gitTagsRefMatchRegex.exec(dep.managerData.source);\n\n  if (githubRefMatch) {\n    dep.depType = 'github';\n    dep.lookupName = githubRefMatch.groups.project.replace(regEx(/\\.git$/), '');\n    dep.depName = 'github.com/' + dep.lookupName;\n    dep.currentValue = githubRefMatch.groups.tag;\n    dep.datasource = datasourceGithubTags.id;\n  } else if (gitTagsRefMatch) {\n    dep.depType = 'gitTags';\n    if (gitTagsRefMatch.groups.path.includes('//')) {\n      logger.debug('Terragrunt module contains subdirectory');\n      dep.depName = gitTagsRefMatch.groups.path.split('//')[0];\n      const tempLookupName = gitTagsRefMatch.groups.url.split('//');\n      dep.lookupName = tempLookupName[0] + '//' + tempLookupName[1];\n    } else {\n      dep.depName = gitTagsRefMatch.groups.path.replace('.git', '');\n      dep.lookupName = gitTagsRefMatch.groups.url;\n    }\n    dep.currentValue = gitTagsRefMatch.groups.tag;\n    dep.datasource = GitTagsDatasource.id;\n  } else if (dep.managerData.source) {\n    const moduleParts = dep.managerData.source.split('//')[0].split('/');\n    if (moduleParts[0] === '..') {\n      dep.skipReason = SkipReason.Local;\n    } else if (moduleParts.length >= 3) {\n      const hostnameMatch = hostnameMatchRegex.exec(dep.managerData.source);\n      if (hostnameMatch) {\n        dep.registryUrls = [`https://${hostnameMatch.groups.hostname}`];\n      }\n      dep.depType = 'terragrunt';\n      dep.depName = moduleParts.join('/');\n      dep.datasource = TerraformModuleDatasource.id;\n    }\n  } else {\n    logger.debug({ dep }, 'terragrunt dep has no source');\n    dep.skipReason = SkipReason.NoSource;\n  }\n}\n"]}