{"version":3,"file":"providers.js","sourceRoot":"","sources":["../../../lib/manager/terragrunt/providers.ts"],"names":[],"mappings":";;;AAAA,4CAAyC;AAEzC,qCAAqD;AAErD,iCAAiD;AAEpC,QAAA,qBAAqB,GAAG,IAAA,aAAK,EACxC,+FAA+F,CAChG,CAAC;AAEF,SAAS,oBAAoB,CAAC,OAAO;IACnC,MAAM,KAAK,GAAG,EAAE,CAAC;IACjB,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,KAAK,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;QAClC,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YACtB,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;SACxB;aAAM,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YAC7B,KAAK,CAAC,GAAG,EAAE,CAAC;YACZ,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;gBACtB,MAAM;aACP;SACF;KACF;IACD,OAAO,CAAC,CAAC;AACX,CAAC;AAED,SAAgB,yBAAyB,CACvC,YAAoB,EACpB,KAAe,EACf,UAAkB;IAElB,MAAM,UAAU,GAAG,YAAY,CAAC;IAChC,IAAI,IAAY,CAAC;IACjB,MAAM,IAAI,GAAwB,EAAE,CAAC;IACrC,MAAM,GAAG,GAAsB;QAC7B,WAAW,EAAE;YACX,UAAU;YACV,wBAAwB,EAAE,kCAAyB,CAAC,UAAU;SAC/D;KACF,CAAC;IACF,MAAM,eAAe,GAAG,KAAK;SAC1B,KAAK,CAAC,UAAU,CAAC;SACjB,IAAI,CAAC,IAAI,CAAC;SACV,SAAS,CAAC,CAAC,EAAE,oBAAoB,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SACtE,KAAK,CAAC,IAAI,CAAC,CAAC;IAEf,KAAK,IAAI,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,eAAe,CAAC,MAAM,EAAE,MAAM,IAAI,CAAC,EAAE;QACjE,IAAI,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;QAC/B,MAAM,OAAO,GAAG,8BAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnD,IAAI,OAAO,EAAE;YACX,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;YAC9C,GAAG,CAAC,WAAW,CAAC,UAAU,GAAG,UAAU,GAAG,MAAM,CAAC;SAClD;KACF;IACD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACf,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC;AAC5C,CAAC;AA9BD,8DA8BC","sourcesContent":["import { regEx } from '../../util/regex';\nimport type { PackageDependency } from '../types';\nimport { TerragruntDependencyTypes } from './common';\nimport type { ExtractionResult } from './types';\nimport { keyValueExtractionRegex } from './util';\n\nexport const sourceExtractionRegex = regEx(\n  /^(?:(?<hostname>(?:[a-zA-Z0-9]+\\.+)+[a-zA-Z0-9]+)\\/)?(?:(?<namespace>[^/]+)\\/)?(?<type>[^/]+)/\n);\n\nfunction extractBracesContent(content): number {\n  const stack = [];\n  let i = 0;\n  for (i; i < content.length; i += 1) {\n    if (content[i] === '{') {\n      stack.push(content[i]);\n    } else if (content[i] === '}') {\n      stack.pop();\n      if (stack.length === 0) {\n        break;\n      }\n    }\n  }\n  return i;\n}\n\nexport function extractTerragruntProvider(\n  startingLine: number,\n  lines: string[],\n  moduleName: string\n): ExtractionResult {\n  const lineNumber = startingLine;\n  let line: string;\n  const deps: PackageDependency[] = [];\n  const dep: PackageDependency = {\n    managerData: {\n      moduleName,\n      terragruntDependencyType: TerragruntDependencyTypes.terragrunt,\n    },\n  };\n  const teraformContent = lines\n    .slice(lineNumber)\n    .join('\\n')\n    .substring(0, extractBracesContent(lines.slice(lineNumber).join('\\n')))\n    .split('\\n');\n\n  for (let lineNo = 0; lineNo < teraformContent.length; lineNo += 1) {\n    line = teraformContent[lineNo];\n    const kvMatch = keyValueExtractionRegex.exec(line);\n    if (kvMatch) {\n      dep.managerData.source = kvMatch.groups.value;\n      dep.managerData.sourceLine = lineNumber + lineNo;\n    }\n  }\n  deps.push(dep);\n  return { lineNumber, dependencies: deps };\n}\n"]}