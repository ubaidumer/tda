{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../lib/manager/helmv3/artifacts.ts"],"names":[],"mappings":";;;AAAA,iCAA8B;AAC9B,mEAAiE;AACjE,yCAAsC;AACtC,0CAAoD;AACpD,sCAKuB;AAGvB,KAAK,UAAU,YAAY,CACzB,YAAoB,EACpB,OAAgC;IAEhC,MAAM,WAAW,GAAgB;QAC/B,MAAM,EAAE;YACN,KAAK,EAAE,MAAM;SACd;QACD,QAAQ,EAAE;YACR,qBAAqB,EAAE,GAAG;SAC3B;KACF,CAAC;IACF,MAAM,GAAG,GAAG,EAAE,CAAC;IAEf,IAAI,OAAO,EAAE;QACX,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE,EAAE,CAC/C,GAAG,CAAC,IAAI,CAAC,iBAAiB,IAAA,aAAK,EAAC,KAAK,CAAC,IAAI,IAAA,aAAK,EAAC,GAAG,CAAC,EAAE,CAAC,CACxD,CAAC;KACH;IACD,GAAG,CAAC,IAAI,CAAC,0BAA0B,IAAA,aAAK,EAAC,IAAA,oBAAe,EAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC;IAE3E,MAAM,IAAA,WAAI,EAAC,GAAG,EAAE,WAAW,CAAC,CAAC;AAC/B,CAAC;AAEM,KAAK,UAAU,eAAe,CAAC,EACpC,eAAe,EACf,WAAW,EACX,qBAAqB,EACrB,MAAM,GACS;IACf,eAAM,CAAC,KAAK,CAAC,0BAA0B,eAAe,GAAG,CAAC,CAAC;IAE3D,MAAM,qBAAqB,GAAG,MAAM,CAAC,UAAU,KAAK,qBAAqB,CAAC;IAE1E,IACE,CAAC,qBAAqB;QACtB,CAAC,WAAW,KAAK,SAAS,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,EACrD;QACA,eAAM,CAAC,KAAK,CAAC,yCAAyC,CAAC,CAAC;QACxD,OAAO,IAAI,CAAC;KACb;IAED,MAAM,YAAY,GAAG,IAAA,uBAAkB,EAAC,eAAe,EAAE,YAAY,CAAC,CAAC;IACvE,MAAM,uBAAuB,GAAG,MAAM,IAAA,kBAAa,EAAC,YAAY,CAAC,CAAC;IAClE,IAAI,CAAC,uBAAuB,EAAE;QAC5B,eAAM,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;QACpC,OAAO,IAAI,CAAC;KACb;IACD,IAAI;QACF,MAAM,IAAA,mBAAc,EAAC,eAAe,EAAE,qBAAqB,CAAC,CAAC;QAC7D,eAAM,CAAC,KAAK,CAAC,WAAW,GAAG,YAAY,CAAC,CAAC;QACzC,MAAM,YAAY,CAAC,eAAe,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;QACpD,eAAM,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;QAC7C,MAAM,kBAAkB,GAAG,MAAM,IAAA,kBAAa,EAAC,YAAY,CAAC,CAAC;QAC7D,IAAI,uBAAuB,KAAK,kBAAkB,EAAE;YAClD,eAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;YACxC,OAAO,IAAI,CAAC;SACb;QACD,OAAO;YACL;gBACE,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,QAAQ,EAAE,kBAAkB;iBAC7B;aACF;SACF,CAAC;KACH;IAAC,OAAO,GAAG,EAAE;QACZ,qBAAqB;QACrB,IAAI,GAAG,CAAC,OAAO,KAAK,gCAAe,EAAE;YACnC,MAAM,GAAG,CAAC;SACX;QACD,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,iCAAiC,CAAC,CAAC;QACzD,OAAO;YACL;gBACE,aAAa,EAAE;oBACb,QAAQ,EAAE,YAAY;oBACtB,MAAM,EAAE,GAAG,CAAC,OAAO;iBACpB;aACF;SACF,CAAC;KACH;AACH,CAAC;AAzDD,0CAyDC","sourcesContent":["import { quote } from 'shlex';\nimport { TEMPORARY_ERROR } from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { ExecOptions, exec } from '../../util/exec';\nimport {\n  getSiblingFileName,\n  getSubDirectory,\n  readLocalFile,\n  writeLocalFile,\n} from '../../util/fs';\nimport type { UpdateArtifact, UpdateArtifactsResult } from '../types';\n\nasync function helmCommands(\n  manifestPath: string,\n  aliases?: Record<string, string>\n): Promise<void> {\n  const execOptions: ExecOptions = {\n    docker: {\n      image: 'helm',\n    },\n    extraEnv: {\n      HELM_EXPERIMENTAL_OCI: '1',\n    },\n  };\n  const cmd = [];\n\n  if (aliases) {\n    Object.entries(aliases).forEach(([alias, url]) =>\n      cmd.push(`helm repo add ${quote(alias)} ${quote(url)}`)\n    );\n  }\n  cmd.push(`helm dependency update ${quote(getSubDirectory(manifestPath))}`);\n\n  await exec(cmd, execOptions);\n}\n\nexport async function updateArtifacts({\n  packageFileName,\n  updatedDeps,\n  newPackageFileContent,\n  config,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  logger.debug(`helmv3.updateArtifacts(${packageFileName})`);\n\n  const isLockFileMaintenance = config.updateType === 'lockFileMaintenance';\n\n  if (\n    !isLockFileMaintenance &&\n    (updatedDeps === undefined || updatedDeps.length < 1)\n  ) {\n    logger.debug('No updated helmv3 deps - returning null');\n    return null;\n  }\n\n  const lockFileName = getSiblingFileName(packageFileName, 'Chart.lock');\n  const existingLockFileContent = await readLocalFile(lockFileName);\n  if (!existingLockFileContent) {\n    logger.debug('No Chart.lock found');\n    return null;\n  }\n  try {\n    await writeLocalFile(packageFileName, newPackageFileContent);\n    logger.debug('Updating ' + lockFileName);\n    await helmCommands(packageFileName, config.aliases);\n    logger.debug('Returning updated Chart.lock');\n    const newHelmLockContent = await readLocalFile(lockFileName);\n    if (existingLockFileContent === newHelmLockContent) {\n      logger.debug('Chart.lock is unchanged');\n      return null;\n    }\n    return [\n      {\n        file: {\n          name: lockFileName,\n          contents: newHelmLockContent,\n        },\n      },\n    ];\n  } catch (err) {\n    // istanbul ignore if\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n    logger.debug({ err }, 'Failed to update Helm lock file');\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n}\n"]}