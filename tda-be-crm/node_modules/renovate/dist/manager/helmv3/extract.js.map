{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/helmv3/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { load } from 'js-yaml';\nimport * as datasourceDocker from '../../datasource/docker';\nimport { HelmDatasource } from '../../datasource/helm';\nimport { logger } from '../../logger';\nimport { SkipReason } from '../../types';\nimport { getSiblingFileName, localPathExists } from '../../util/fs';\nimport type { ExtractConfig, PackageDependency, PackageFile } from '../types';\n\nexport async function extractPackageFile(\n  content: string,\n  fileName: string,\n  config: ExtractConfig\n): Promise<PackageFile | null> {\n  let chart: {\n    apiVersion: string;\n    name: string;\n    version: string;\n    dependencies: Array<{ name: string; version: string; repository: string }>;\n  };\n  try {\n    // TODO: fix me (#9610)\n    chart = load(content, { json: true }) as any;\n    if (!(chart?.apiVersion && chart.name && chart.version)) {\n      logger.debug(\n        { fileName },\n        'Failed to find required fields in Chart.yaml'\n      );\n      return null;\n    }\n    if (chart.apiVersion !== 'v2') {\n      logger.debug(\n        { fileName },\n        'Unsupported Chart apiVersion. Only v2 is supported.'\n      );\n      return null;\n    }\n  } catch (err) {\n    logger.debug({ fileName }, 'Failed to parse helm Chart.yaml');\n    return null;\n  }\n  const packageFileVersion = chart.version;\n  let deps: PackageDependency[] = [];\n  if (!is.nonEmptyArray(chart?.dependencies)) {\n    logger.debug({ fileName }, 'Chart has no dependencies');\n    return null;\n  }\n  const validDependencies = chart.dependencies.filter(\n    (dep) => is.nonEmptyString(dep.name) && is.nonEmptyString(dep.version)\n  );\n  if (!is.nonEmptyArray(validDependencies)) {\n    logger.debug('Name and/or version missing for all dependencies');\n    return null;\n  }\n  deps = validDependencies.map((dep) => {\n    const res: PackageDependency = {\n      depName: dep.name,\n      currentValue: dep.version,\n    };\n    if (dep.repository) {\n      res.registryUrls = [dep.repository];\n      if (\n        dep.repository.startsWith('@') ||\n        dep.repository.startsWith('alias:')\n      ) {\n        const repoWithPrefixRemoved = dep.repository.slice(\n          dep.repository[0] === '@' ? 1 : 6\n        );\n        const alias = config.aliases[repoWithPrefixRemoved];\n        if (alias) {\n          res.registryUrls = [alias];\n          return res;\n        }\n\n        res.skipReason = SkipReason.PlaceholderUrl;\n      } else {\n        try {\n          const url = new URL(dep.repository);\n          switch (url.protocol) {\n            case 'oci:':\n              res.datasource = datasourceDocker.id;\n              res.lookupName = dep.repository.replace('oci://', '');\n              res.registryUrls = [];\n              break;\n            case 'file:':\n              res.skipReason = SkipReason.LocalDependency;\n              break;\n            default:\n          }\n        } catch (err) {\n          logger.debug({ err }, 'Error parsing url');\n          res.skipReason = SkipReason.InvalidUrl;\n        }\n      }\n    } else {\n      res.skipReason = SkipReason.NoRepository;\n    }\n    return res;\n  });\n  const res: PackageFile = {\n    deps,\n    datasource: HelmDatasource.id,\n    packageFileVersion,\n  };\n  const lockFileName = getSiblingFileName(fileName, 'Chart.lock');\n  // istanbul ignore if\n  if (await localPathExists(lockFileName)) {\n    res.lockFiles = [lockFileName];\n  }\n  return res;\n}\n"]}