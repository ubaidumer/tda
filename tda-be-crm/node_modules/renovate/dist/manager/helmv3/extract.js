"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractPackageFile = void 0;
const tslib_1 = require("tslib");
const is_1 = (0, tslib_1.__importDefault)(require("@sindresorhus/is"));
const js_yaml_1 = require("js-yaml");
const datasourceDocker = (0, tslib_1.__importStar)(require("../../datasource/docker"));
const helm_1 = require("../../datasource/helm");
const logger_1 = require("../../logger");
const types_1 = require("../../types");
const fs_1 = require("../../util/fs");
async function extractPackageFile(content, fileName, config) {
    let chart;
    try {
        // TODO: fix me (#9610)
        chart = (0, js_yaml_1.load)(content, { json: true });
        if (!((chart === null || chart === void 0 ? void 0 : chart.apiVersion) && chart.name && chart.version)) {
            logger_1.logger.debug({ fileName }, 'Failed to find required fields in Chart.yaml');
            return null;
        }
        if (chart.apiVersion !== 'v2') {
            logger_1.logger.debug({ fileName }, 'Unsupported Chart apiVersion. Only v2 is supported.');
            return null;
        }
    }
    catch (err) {
        logger_1.logger.debug({ fileName }, 'Failed to parse helm Chart.yaml');
        return null;
    }
    const packageFileVersion = chart.version;
    let deps = [];
    if (!is_1.default.nonEmptyArray(chart === null || chart === void 0 ? void 0 : chart.dependencies)) {
        logger_1.logger.debug({ fileName }, 'Chart has no dependencies');
        return null;
    }
    const validDependencies = chart.dependencies.filter((dep) => is_1.default.nonEmptyString(dep.name) && is_1.default.nonEmptyString(dep.version));
    if (!is_1.default.nonEmptyArray(validDependencies)) {
        logger_1.logger.debug('Name and/or version missing for all dependencies');
        return null;
    }
    deps = validDependencies.map((dep) => {
        const res = {
            depName: dep.name,
            currentValue: dep.version,
        };
        if (dep.repository) {
            res.registryUrls = [dep.repository];
            if (dep.repository.startsWith('@') ||
                dep.repository.startsWith('alias:')) {
                const repoWithPrefixRemoved = dep.repository.slice(dep.repository[0] === '@' ? 1 : 6);
                const alias = config.aliases[repoWithPrefixRemoved];
                if (alias) {
                    res.registryUrls = [alias];
                    return res;
                }
                res.skipReason = types_1.SkipReason.PlaceholderUrl;
            }
            else {
                try {
                    const url = new URL(dep.repository);
                    switch (url.protocol) {
                        case 'oci:':
                            res.datasource = datasourceDocker.id;
                            res.lookupName = dep.repository.replace('oci://', '');
                            res.registryUrls = [];
                            break;
                        case 'file:':
                            res.skipReason = types_1.SkipReason.LocalDependency;
                            break;
                        default:
                    }
                }
                catch (err) {
                    logger_1.logger.debug({ err }, 'Error parsing url');
                    res.skipReason = types_1.SkipReason.InvalidUrl;
                }
            }
        }
        else {
            res.skipReason = types_1.SkipReason.NoRepository;
        }
        return res;
    });
    const res = {
        deps,
        datasource: helm_1.HelmDatasource.id,
        packageFileVersion,
    };
    const lockFileName = (0, fs_1.getSiblingFileName)(fileName, 'Chart.lock');
    // istanbul ignore if
    if (await (0, fs_1.localPathExists)(lockFileName)) {
        res.lockFiles = [lockFileName];
    }
    return res;
}
exports.extractPackageFile = extractPackageFile;
//# sourceMappingURL=extract.js.map