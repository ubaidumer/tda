{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../lib/manager/npm/update/locked-dependency/index.ts"],"names":[],"mappings":";;;;AAAA,+EAAyC;AAEzC,+CAA4C;AAC5C,oDAA2D;AAE3D,8CAAiD;AACjD,uDAAuD;AACvD,6CAAqD;AACrD,qDAA0D;AAG1D,SAAgB,cAAc,CAAC,MAA0B;IACvD,MAAM,EAAE,cAAc,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC;IACxD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,mBAAmB,CAAC,EAAE;QAC3C,eAAM,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,EAAE,uBAAuB,CAAC,CAAC;QACpD,OAAO,KAAK,CAAC;KACd;IACD,IAAI,CAAC,CAAC,SAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,SAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,EAAE;QACvE,eAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,+BAA+B,CAAC,CAAC;QACzD,OAAO,KAAK,CAAC;KACd;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAXD,wCAWC;AAEM,KAAK,UAAU,sBAAsB,CAC1C,MAA0B,EAC1B,cAAc,GAAG,KAAK;IAEtB,MAAM,EACJ,OAAO,EACP,cAAc,EACd,UAAU,EACV,WAAW,EACX,kBAAkB,EAClB,QAAQ,EACR,eAAe,GAChB,GAAG,MAAM,CAAC;IACX,eAAM,CAAC,KAAK,CACV,+BAA+B,OAAO,IAAI,cAAc,OAAO,UAAU,KAAK,QAAQ,GAAG,CAC1F,CAAC;IACF,IAAI;QACF,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE;YAC3B,OAAO,IAAI,CAAC;SACb;QACD,IAAI,WAAwB,CAAC;QAC7B,IAAI,eAAmC,CAAC;QACxC,MAAM,cAAc,GAAG,IAAA,uBAAY,EAAC,eAAe,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC;QACpE,IAAI,qBAA6B,CAAC;QAClC,IAAI;YACF,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;YAC7C,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;SAC/C;QAAC,OAAO,GAAG,EAAE;YACZ,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,uBAAuB,CAAC,CAAC;YAC9C,OAAO,IAAI,CAAC;SACb;QACD,IAAI,eAAe,CAAC,eAAe,KAAK,CAAC,EAAE;YACzC,eAAM,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;YACpD,OAAO,IAAI,CAAC;SACb;QACD,MAAM,UAAU,GAAG,IAAA,kCAAqB,EACtC,eAAe,EACf,OAAO,EACP,cAAc,CACf,CAAC;QACF,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;YACtB,eAAM,CAAC,KAAK,CACV,GAAG,OAAO,IAAI,cAAc,iBAAiB,QAAQ,kBAAkB,CACxE,CAAC;YACF,gFAAgF;YAChF,4CAA4C;YAC5C,IAAI,cAAc,EAAE;gBAClB,MAAM,GAAG,GAAG,EAAE,CAAC;gBACf,GAAG,CAAC,WAAW,CAAC,GAAG,kBAAkB,CAAC;gBACtC,GAAG,CAAC,QAAQ,CAAC,GAAG,eAAe,CAAC;gBAChC,OAAO,GAAG,CAAC;aACZ;YACD,OAAO,IAAI,CAAC;SACb;QACD,eAAM,CAAC,KAAK,CACV,2CAA2C,UAAU,CAAC,MAAM,EAAE,CAC/D,CAAC;QACF,MAAM,WAAW,GAAG,IAAA,oCAAkB,EACpC,WAAW,EACX,eAAe,EACf,OAAO,EACP,cAAc,EACd,UAAU,CACX,CAAC;QACF,eAAM,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,EAAE,kBAAkB,CAAC,CAAC;QACpE,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;YACvB,eAAM,CAAC,IAAI,CACT,EAAE,OAAO,EAAE,cAAc,EAAE,UAAU,EAAE,EACvC,yEAAyE,CAC1E,CAAC;YACF,OAAO,IAAI,CAAC;SACb;QACD,MAAM,aAAa,GAAyB,EAAE,CAAC;QAC/C,KAAK,MAAM,EACT,aAAa,EACb,aAAa,EACb,UAAU,EACV,OAAO,GACR,IAAI,WAAW,EAAE;YAChB,IAAI,SAAM,CAAC,OAAO,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE;gBAC1C,+DAA+D;gBAC/D,eAAM,CAAC,KAAK,CACV,GAAG,OAAO,sBAAsB,UAAU,uCAAuC,UAAU,QACzF,aAAa,CAAC,CAAC,CAAC,GAAG,aAAa,IAAI,aAAa,EAAE,CAAC,CAAC,CAAC,WACxD,EAAE,CACH,CAAC;aACH;iBAAM,IAAI,aAAa,IAAI,aAAa,EAAE;gBACzC,uCAAuC;gBACvC,MAAM,gBAAgB,GAAG,MAAM,IAAA,uCAAsB,EACnD,aAAa,EACb,aAAa,EACb,OAAO,EACP,UAAU,CACX,CAAC;gBACF,IAAI,gBAAgB,EAAE;oBACpB,IAAI,gBAAgB,KAAK,aAAa,EAAE;wBACtC,eAAM,CAAC,KAAK,CACV,aAAa,OAAO,OAAO,UAAU,+BAA+B,aAAa,IAAI,gBAAgB,EAAE,CACxG,CAAC;qBACH;yBAAM;wBACL,qEAAqE;wBACrE,eAAM,CAAC,KAAK,CACV,aAAa,OAAO,OAAO,UAAU,kCAAkC,aAAa,EAAE,CACvF,CAAC;wBACF,MAAM,YAAY,GAAuB;4BACvC,OAAO,EAAE,aAAa;4BACtB,cAAc,EAAE,aAAa;4BAC7B,UAAU,EAAE,gBAAgB;yBAC7B,CAAC;wBACF,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;qBAClC;iBACF;qBAAM;oBACL,8GAA8G;oBAC9G,eAAM,CAAC,KAAK,CACV,aAAa,OAAO,OAAO,UAAU,qCAAqC,aAAa,EAAE,CAC1F,CAAC;oBACF,OAAO,IAAI,CAAC;iBACb;aACF;iBAAM,IAAI,OAAO,EAAE;gBAClB,0EAA0E;gBAC1E,MAAM,QAAQ,GAAG,SAAM,CAAC,WAAW,CAAC;oBAClC,YAAY,EAAE,UAAU;oBACxB,aAAa,EAAE,SAAS;oBACxB,cAAc;oBACd,UAAU;iBACX,CAAC,CAAC;gBACH,qBAAqB,GAAG,IAAA,6BAAgB,EAAC;oBACvC,WAAW,EAAE,kBAAkB;oBAC/B,OAAO,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE;iBACxC,CAAC,CAAC;aACJ;SACF;QACD,KAAK,MAAM,UAAU,IAAI,UAAU,EAAE;YACnC,0DAA0D;YAC1D,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC;YAChC,OAAO,UAAU,CAAC,QAAQ,CAAC;YAC3B,OAAO,UAAU,CAAC,SAAS,CAAC;SAC7B;QACD,IAAI,kBAAkB,GAAG,IAAI,CAAC,SAAS,CACrC,eAAe,EACf,IAAI,EACJ,cAAc,CACf,CAAC;QACF,2CAA2C;QAC3C,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE;YACxC,MAAM,kBAAkB,GAAG;gBACzB,GAAG,MAAM;gBACT,eAAe,EAAE,kBAAkB;gBACnC,kBAAkB,EAAE,qBAAqB,IAAI,kBAAkB;gBAC/D,GAAG,YAAY;aAChB,CAAC;YACF,MAAM,kBAAkB,GAAG,MAAM,sBAAsB,CACrD,kBAAkB,EAClB,IAAI,CACL,CAAC;YACF,oDAAoD;YACpD,IAAI,CAAC,kBAAkB,EAAE;gBACvB,eAAM,CAAC,KAAK,CACV,aAAa,OAAO,OAAO,UAAU,8CAA8C,YAAY,CAAC,OAAO,OAAO,YAAY,CAAC,UAAU,EAAE,CACxI,CAAC;gBACF,OAAO,IAAI,CAAC;aACb;YACD,qBAAqB;gBACnB,kBAAkB,CAAC,WAAW,CAAC,IAAI,qBAAqB,CAAC;YAC3D,kBAAkB,GAAG,kBAAkB,CAAC,QAAQ,CAAC,IAAI,kBAAkB,CAAC;SACzE;QACD,MAAM,KAAK,GAAG,EAAE,CAAC;QACjB,IAAI,kBAAkB,EAAE;YACtB,KAAK,CAAC,QAAQ,CAAC,GAAG,kBAAkB,CAAC;SACtC;QACD,IAAI,qBAAqB,EAAE;YACzB,KAAK,CAAC,WAAW,CAAC,GAAG,qBAAqB,CAAC;SAC5C;QACD,OAAO,KAAK,CAAC;KACd;IAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC;QACvC,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,gCAAgC,CAAC,CAAC;QACxD,OAAO,IAAI,CAAC;KACb;AACH,CAAC;AAlLD,wDAkLC","sourcesContent":["import detectIndent from 'detect-indent';\nimport type { PackageJson } from 'type-fest';\nimport { logger } from '../../../../logger';\nimport { api as semver } from '../../../../versioning/npm';\nimport type { UpdateLockedConfig } from '../../../types';\nimport { updateDependency } from '../dependency';\nimport { findDepConstraints } from './dep-constraints';\nimport { getLockedDependencies } from './get-locked';\nimport { findFirstParentVersion } from './parent-version';\nimport type { PackageLockOrEntry } from './types';\n\nexport function validateInputs(config: UpdateLockedConfig): boolean {\n  const { currentVersion, newVersion, lockFile } = config;\n  if (!lockFile.endsWith('package-lock.json')) {\n    logger.debug({ lockFile }, 'Unsupported lock file');\n    return false;\n  }\n  if (!(semver.isVersion(currentVersion) && semver.isVersion(newVersion))) {\n    logger.warn({ config }, 'Update versions are not valid');\n    return false;\n  }\n  return true;\n}\n\nexport async function updateLockedDependency(\n  config: UpdateLockedConfig,\n  isParentUpdate = false\n): Promise<Record<string, string>> {\n  const {\n    depName,\n    currentVersion,\n    newVersion,\n    packageFile,\n    packageFileContent,\n    lockFile,\n    lockFileContent,\n  } = config;\n  logger.debug(\n    `npm.updateLockedDependency: ${depName}@${currentVersion} -> ${newVersion} [${lockFile}]`\n  );\n  try {\n    if (!validateInputs(config)) {\n      return null;\n    }\n    let packageJson: PackageJson;\n    let packageLockJson: PackageLockOrEntry;\n    const detectedIndent = detectIndent(lockFileContent).indent || '  ';\n    let newPackageJsonContent: string;\n    try {\n      packageJson = JSON.parse(packageFileContent);\n      packageLockJson = JSON.parse(lockFileContent);\n    } catch (err) {\n      logger.warn({ err }, 'Failed to parse files');\n      return null;\n    }\n    if (packageLockJson.lockfileVersion === 2) {\n      logger.debug('Only lockfileVersion 1 is supported');\n      return null;\n    }\n    const lockedDeps = getLockedDependencies(\n      packageLockJson,\n      depName,\n      currentVersion\n    );\n    if (!lockedDeps.length) {\n      logger.debug(\n        `${depName}@${currentVersion} not found in ${lockFile} - no work to do`\n      );\n      // Don't return null if we're a parent update or else the whole update will fail\n      // istanbul ignore if: too hard to replicate\n      if (isParentUpdate) {\n        const res = {};\n        res[packageFile] = packageFileContent;\n        res[lockFile] = lockFileContent;\n        return res;\n      }\n      return null;\n    }\n    logger.debug(\n      `Found matching dependencies with length ${lockedDeps.length}`\n    );\n    const constraints = findDepConstraints(\n      packageJson,\n      packageLockJson,\n      depName,\n      currentVersion,\n      newVersion\n    );\n    logger.trace({ deps: lockedDeps, constraints }, 'Matching details');\n    if (!constraints.length) {\n      logger.info(\n        { depName, currentVersion, newVersion },\n        'Could not find constraints for the locked dependency - cannot remediate'\n      );\n      return null;\n    }\n    const parentUpdates: UpdateLockedConfig[] = [];\n    for (const {\n      parentDepName,\n      parentVersion,\n      constraint,\n      depType,\n    } of constraints) {\n      if (semver.matches(newVersion, constraint)) {\n        // Parent dependency is compatible with the new version we want\n        logger.debug(\n          `${depName} can be updated to ${newVersion} in-range with matching constraint \"${constraint}\" in ${\n            parentDepName ? `${parentDepName}@${parentVersion}` : packageFile\n          }`\n        );\n      } else if (parentDepName && parentVersion) {\n        // Parent dependency needs updating too\n        const parentNewVersion = await findFirstParentVersion(\n          parentDepName,\n          parentVersion,\n          depName,\n          newVersion\n        );\n        if (parentNewVersion) {\n          if (parentNewVersion === parentVersion) {\n            logger.debug(\n              `Update of ${depName} to ${newVersion} already achieved in parent ${parentDepName}@${parentNewVersion}`\n            );\n          } else {\n            // Update the parent dependency so that we can update this dependency\n            logger.debug(\n              `Update of ${depName} to ${newVersion} can be achieved due to parent ${parentDepName}`\n            );\n            const parentUpdate: UpdateLockedConfig = {\n              depName: parentDepName,\n              currentVersion: parentVersion,\n              newVersion: parentNewVersion,\n            };\n            parentUpdates.push(parentUpdate);\n          }\n        } else {\n          // For some reason it's not possible to update the parent to a version compatible with our desired dep version\n          logger.debug(\n            `Update of ${depName} to ${newVersion} cannot be achieved due to parent ${parentDepName}`\n          );\n          return null;\n        }\n      } else if (depType) {\n        // The constaint comes from the package.json file, so we need to update it\n        const newValue = semver.getNewValue({\n          currentValue: constraint,\n          rangeStrategy: 'replace',\n          currentVersion,\n          newVersion,\n        });\n        newPackageJsonContent = updateDependency({\n          fileContent: packageFileContent,\n          upgrade: { depName, depType, newValue },\n        });\n      }\n    }\n    for (const dependency of lockedDeps) {\n      // Remove resolved and integrity fields for npm to fill in\n      dependency.version = newVersion;\n      delete dependency.resolved;\n      delete dependency.integrity;\n    }\n    let newLockFileContent = JSON.stringify(\n      packageLockJson,\n      null,\n      detectedIndent\n    );\n    // iterate through the parent updates first\n    for (const parentUpdate of parentUpdates) {\n      const parentUpdateConfig = {\n        ...config,\n        lockFileContent: newLockFileContent,\n        packageFileContent: newPackageJsonContent || packageFileContent,\n        ...parentUpdate,\n      };\n      const parentUpdateResult = await updateLockedDependency(\n        parentUpdateConfig,\n        true\n      );\n      // istanbul ignore if: hard to test due to recursion\n      if (!parentUpdateResult) {\n        logger.debug(\n          `Update of ${depName} to ${newVersion} impossible due to failed update of parent ${parentUpdate.depName} to ${parentUpdate.newVersion}`\n        );\n        return null;\n      }\n      newPackageJsonContent =\n        parentUpdateResult[packageFile] || newPackageJsonContent;\n      newLockFileContent = parentUpdateResult[lockFile] || newLockFileContent;\n    }\n    const files = {};\n    if (newLockFileContent) {\n      files[lockFile] = newLockFileContent;\n    }\n    if (newPackageJsonContent) {\n      files[packageFile] = newPackageJsonContent;\n    }\n    return files;\n  } catch (err) /* istanbul ignore next */ {\n    logger.error({ err }, 'updateLockedDependency() error');\n    return null;\n  }\n}\n"]}