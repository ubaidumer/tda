{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../lib/manager/npm/update/dependency/index.ts"],"names":[],"mappings":";;;AAAA,mCAAgC;AAEhC,+CAA4C;AAC5C,oDAA6D;AAG7D,SAAS,eAAe,CACtB,cAA2B,EAC3B,WAAmB,EACnB,OAAe,EACf,OAAe,EACf,QAAgB,EAChB,QAAgB;IAEhB,IAAI,OAAO,KAAK,gBAAgB,EAAE;QAChC,cAAc,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC;KACpC;SAAM,IAAI,OAAO,KAAK,QAAQ,EAAE;QAC/B,qDAAqD;QACrD,OAAO,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;YAC5C,CAAC,QAAQ,CAAC,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC;SAC9C,CAAC,CAAC,QAAQ,CAAC,CAAC;KACd;SAAM;QACL,iDAAiD;QACjD,cAAc,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC;KAC7C;IACD,kCAAkC;IAClC,MAAM,YAAY,GAAG,IAAI,QAAQ,GAAG,CAAC;IACrC,MAAM,SAAS,GAAG,IAAI,QAAQ,GAAG,CAAC;IAClC,gCAAgC;IAChC,IAAI,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,OAAO,GAAG,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC;IACvE,eAAM,CAAC,KAAK,CAAC,4BAA4B,WAAW,EAAE,CAAC,CAAC;IACxD,uCAAuC;IACvC,OAAO,WAAW,GAAG,WAAW,CAAC,MAAM,EAAE,WAAW,IAAI,CAAC,EAAE;QACzD,mDAAmD;QACnD,IAAI,IAAA,gBAAO,EAAC,WAAW,EAAE,WAAW,EAAE,YAAY,CAAC,EAAE;YACnD,eAAM,CAAC,KAAK,CAAC,wBAAwB,WAAW,EAAE,CAAC,CAAC;YACpD,iCAAiC;YACjC,MAAM,WAAW,GAAG,IAAA,kBAAS,EAC3B,WAAW,EACX,WAAW,EACX,YAAY,EACZ,SAAS,CACV,CAAC;YACF,mDAAmD;YACnD,IAAI,IAAA,eAAM,EAAC,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,EAAE;gBACnD,OAAO,WAAW,CAAC;aACpB;SACF;KACF;IACD,uBAAuB;IACvB,MAAM,IAAI,KAAK,EAAE,CAAC;AACpB,CAAC;AAED,SAAgB,gBAAgB,CAAC,EAC/B,WAAW,EACX,OAAO,GACgB;IACvB,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,OAAO,CAAC;IACzC,MAAM,OAAO,GAAW,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,KAAI,OAAO,CAAC,OAAO,CAAC;IAC5D,IAAI,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;IAC3B,IAAI,OAAO,CAAC,eAAe,EAAE;QAC3B,IAAI,OAAO,CAAC,aAAa,EAAE;YACzB,eAAM,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC;YACjD,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC,OAAO,CACxC,OAAO,CAAC,aAAa,EACrB,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,CAC7D,CAAC;SACH;aAAM;YACL,eAAM,CAAC,KAAK,CAAC,uCAAuC,CAAC,CAAC;YACtD,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC,OAAO,CACxC,OAAO,CAAC,YAAY,EACpB,OAAO,CAAC,QAAQ,CACjB,CAAC;SACH;KACF;IACD,IAAI,OAAO,CAAC,eAAe,EAAE;QAC3B,QAAQ,GAAG,OAAO,OAAO,CAAC,UAAU,IAAI,QAAQ,EAAE,CAAC;KACpD;IACD,eAAM,CAAC,KAAK,CAAC,2BAA2B,OAAO,IAAI,OAAO,MAAM,QAAQ,EAAE,CAAC,CAAC;IAC5E,IAAI;QACF,MAAM,cAAc,GAAgB,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAC5D,uBAAuB;QACvB,IAAI,UAAkB,CAAC;QACvB,IAAI,OAAO,KAAK,gBAAgB,EAAE;YAChC,UAAU,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC;YACrC,QAAQ,GAAG,GAAG,OAAO,IAAI,QAAQ,EAAE,CAAC;SACrC;aAAM;YACL,UAAU,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC;SAC/C;QACD,IAAI,UAAU,KAAK,QAAQ,EAAE;YAC3B,eAAM,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;YAC3C,OAAO,WAAW,CAAC;SACpB;QACD,IAAI,cAAc,GAAG,eAAe,CAClC,cAAc,EACd,WAAW,EACX,OAAO,EACP,OAAO,EACP,UAAU,EACV,QAAQ,CACT,CAAC;QACF,IAAI,OAAO,CAAC,OAAO,EAAE;YACnB,cAAc,GAAG,eAAe,CAC9B,cAAc,EACd,cAAc,EACd,OAAO,EACP,OAAO,EACP,OAAO,EACP,OAAO,CAAC,OAAO,CAChB,CAAC;SACH;QACD,qBAAqB;QACrB,IAAI,CAAC,cAAc,EAAE;YACnB,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,cAAc,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,EAC3D,iCAAiC,CAClC,CAAC;YACF,OAAO,WAAW,CAAC;SACpB;QACD,IAAI,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,WAAW,EAAE;YAC/B,IAAI,MAAc,CAAC;YACnB,IAAI,cAAc,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE;gBACvC,MAAM,GAAG,OAAO,CAAC;aAClB;iBAAM,IAAI,cAAc,CAAC,WAAW,CAAC,MAAM,OAAO,EAAE,CAAC,EAAE;gBACtD,MAAM,GAAG,MAAM,OAAO,EAAE,CAAC;aAC1B;YACD,IAAI,MAAM,EAAE;gBACV,qBAAqB;gBACrB,IAAI,cAAc,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,UAAU,EAAE;oBACrD,eAAM,CAAC,KAAK,CACV;wBACE,OAAO;wBACP,MAAM;wBACN,UAAU;wBACV,kBAAkB,EAAE,cAAc,CAAC,WAAW,CAAC,MAAM,CAAC;qBACvD,EACD,yEAAyE,CAC1E,CAAC;iBACH;gBACD,cAAc,GAAG,eAAe,CAC9B,cAAc,EACd,cAAc,EACd,aAAa,EACb,MAAM,EACN,cAAc,CAAC,WAAW,CAAC,MAAM,CAAC,EAClC,QAAQ,CACT,CAAC;gBACF,IAAI,OAAO,CAAC,OAAO,EAAE;oBACnB,IAAI,MAAM,KAAK,MAAM,OAAO,EAAE,EAAE;wBAC9B,0DAA0D;wBAC1D,OAAO,CAAC,OAAO,GAAG,MAAM,OAAO,CAAC,OAAO,EAAE,CAAC;qBAC3C;oBACD,cAAc,GAAG,eAAe,CAC9B,cAAc,EACd,cAAc,EACd,aAAa,EACb,MAAM,EACN,MAAM,EACN,OAAO,CAAC,OAAO,CAChB,CAAC;iBACH;aACF;SACF;QACD,OAAO,cAAc,CAAC;KACvB;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,wBAAwB,CAAC,CAAC;QAChD,OAAO,IAAI,CAAC;KACb;AACH,CAAC;AAnHD,4CAmHC","sourcesContent":["import { dequal } from 'dequal';\nimport type { PackageJson } from 'type-fest';\nimport { logger } from '../../../../logger';\nimport { matchAt, replaceAt } from '../../../../util/string';\nimport type { UpdateDependencyConfig } from '../../../types';\n\nfunction replaceAsString(\n  parsedContents: PackageJson,\n  fileContent: string,\n  depType: string,\n  depName: string,\n  oldValue: string,\n  newValue: string\n): string | null {\n  if (depType === 'packageManager') {\n    parsedContents[depType] = newValue;\n  } else if (depName === oldValue) {\n    // The old value is the name of the dependency itself\n    delete Object.assign(parsedContents[depType], {\n      [newValue]: parsedContents[depType][oldValue],\n    })[oldValue];\n  } else {\n    // The old value is the version of the dependency\n    parsedContents[depType][depName] = newValue;\n  }\n  // Look for the old version number\n  const searchString = `\"${oldValue}\"`;\n  const newString = `\"${newValue}\"`;\n  // Skip ahead to depType section\n  let searchIndex = fileContent.indexOf(`\"${depType}\"`) + depType.length;\n  logger.trace(`Starting search at index ${searchIndex}`);\n  // Iterate through the rest of the file\n  for (; searchIndex < fileContent.length; searchIndex += 1) {\n    // First check if we have a hit for the old version\n    if (matchAt(fileContent, searchIndex, searchString)) {\n      logger.trace(`Found match at index ${searchIndex}`);\n      // Now test if the result matches\n      const testContent = replaceAt(\n        fileContent,\n        searchIndex,\n        searchString,\n        newString\n      );\n      // Compare the parsed JSON structure of old and new\n      if (dequal(parsedContents, JSON.parse(testContent))) {\n        return testContent;\n      }\n    }\n  }\n  // istanbul ignore next\n  throw new Error();\n}\n\nexport function updateDependency({\n  fileContent,\n  upgrade,\n}: UpdateDependencyConfig): string | null {\n  const { depType, managerData } = upgrade;\n  const depName: string = managerData?.key || upgrade.depName;\n  let { newValue } = upgrade;\n  if (upgrade.currentRawValue) {\n    if (upgrade.currentDigest) {\n      logger.debug('Updating package.json git digest');\n      newValue = upgrade.currentRawValue.replace(\n        upgrade.currentDigest,\n        upgrade.newDigest.substring(0, upgrade.currentDigest.length)\n      );\n    } else {\n      logger.debug('Updating package.json git version tag');\n      newValue = upgrade.currentRawValue.replace(\n        upgrade.currentValue,\n        upgrade.newValue\n      );\n    }\n  }\n  if (upgrade.npmPackageAlias) {\n    newValue = `npm:${upgrade.lookupName}@${newValue}`;\n  }\n  logger.debug(`npm.updateDependency(): ${depType}.${depName} = ${newValue}`);\n  try {\n    const parsedContents: PackageJson = JSON.parse(fileContent);\n    // Save the old version\n    let oldVersion: string;\n    if (depType === 'packageManager') {\n      oldVersion = parsedContents[depType];\n      newValue = `${depName}@${newValue}`;\n    } else {\n      oldVersion = parsedContents[depType][depName];\n    }\n    if (oldVersion === newValue) {\n      logger.trace('Version is already updated');\n      return fileContent;\n    }\n    let newFileContent = replaceAsString(\n      parsedContents,\n      fileContent,\n      depType,\n      depName,\n      oldVersion,\n      newValue\n    );\n    if (upgrade.newName) {\n      newFileContent = replaceAsString(\n        parsedContents,\n        newFileContent,\n        depType,\n        depName,\n        depName,\n        upgrade.newName\n      );\n    }\n    // istanbul ignore if\n    if (!newFileContent) {\n      logger.debug(\n        { fileContent, parsedContents, depType, depName, newValue },\n        'Warning: updateDependency error'\n      );\n      return fileContent;\n    }\n    if (parsedContents?.resolutions) {\n      let depKey: string;\n      if (parsedContents.resolutions[depName]) {\n        depKey = depName;\n      } else if (parsedContents.resolutions[`**/${depName}`]) {\n        depKey = `**/${depName}`;\n      }\n      if (depKey) {\n        // istanbul ignore if\n        if (parsedContents.resolutions[depKey] !== oldVersion) {\n          logger.debug(\n            {\n              depName,\n              depKey,\n              oldVersion,\n              resolutionsVersion: parsedContents.resolutions[depKey],\n            },\n            'Upgraded dependency exists in yarn resolutions but is different version'\n          );\n        }\n        newFileContent = replaceAsString(\n          parsedContents,\n          newFileContent,\n          'resolutions',\n          depKey,\n          parsedContents.resolutions[depKey],\n          newValue\n        );\n        if (upgrade.newName) {\n          if (depKey === `**/${depName}`) {\n            // handles the case where a replacement is in a resolution\n            upgrade.newName = `**/${upgrade.newName}`;\n          }\n          newFileContent = replaceAsString(\n            parsedContents,\n            newFileContent,\n            'resolutions',\n            depKey,\n            depKey,\n            upgrade.newName\n          );\n        }\n      }\n    }\n    return newFileContent;\n  } catch (err) {\n    logger.debug({ err }, 'updateDependency error');\n    return null;\n  }\n}\n"]}