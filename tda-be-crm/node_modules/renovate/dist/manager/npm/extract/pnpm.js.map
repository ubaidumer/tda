{"version":3,"file":"pnpm.js","sourceRoot":"","sources":["../../../../lib/manager/npm/extract/pnpm.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { load } from 'js-yaml';\nimport { logger } from '../../../logger';\nimport {\n  findLocalSiblingOrParent,\n  getSiblingFileName,\n  localPathExists,\n  readLocalFile,\n} from '../../../util/fs';\nimport type { PackageFile } from '../../types';\nimport type { PnpmWorkspaceFile } from './types';\nimport { matchesAnyPattern } from './utils';\n\nexport async function extractPnpmFilters(\n  fileName: string\n): Promise<string[] | null> {\n  try {\n    const contents = load(await readLocalFile(fileName, 'utf8'), {\n      json: true,\n    }) as PnpmWorkspaceFile;\n    if (\n      !Array.isArray(contents.packages) ||\n      !contents.packages.every((item) => is.string(item))\n    ) {\n      logger.trace(\n        { fileName },\n        'Failed to find required \"packages\" array in pnpm-workspace.yaml'\n      );\n      return null;\n    }\n    return contents.packages;\n  } catch (err) {\n    logger.trace({ fileName, err }, 'Failed to parse pnpm-workspace.yaml');\n    return null;\n  }\n}\n\nexport async function findPnpmWorkspace(\n  packageFile: string\n): Promise<{ lockFilePath: string; workspaceYamlPath: string } | null> {\n  // search for pnpm-workspace.yaml\n  const workspaceYamlPath = await findLocalSiblingOrParent(\n    packageFile,\n    'pnpm-workspace.yaml'\n  );\n  if (!workspaceYamlPath) {\n    logger.trace(\n      { packageFile },\n      'Failed to locate pnpm-workspace.yaml in a parent directory.'\n    );\n    return null;\n  }\n\n  // search for pnpm-lock.yaml next to pnpm-workspace.yaml\n  const pnpmLockfilePath = getSiblingFileName(\n    workspaceYamlPath,\n    'pnpm-lock.yaml'\n  );\n  if (!(await localPathExists(pnpmLockfilePath))) {\n    logger.trace(\n      { workspaceYamlPath, packageFile },\n      'Failed to find a pnpm-lock.yaml sibling for the workspace.'\n    );\n    return null;\n  }\n\n  return {\n    lockFilePath: pnpmLockfilePath,\n    workspaceYamlPath,\n  };\n}\n\nexport async function detectPnpmWorkspaces(\n  packageFiles: Partial<PackageFile>[]\n): Promise<void> {\n  logger.debug(`Detecting pnpm Workspaces`);\n  const packageFilterCache = new Map<string, string[] | null>();\n\n  for (const p of packageFiles) {\n    const { packageFile, pnpmShrinkwrap } = p;\n\n    // check if pnpmShrinkwrap-file has already been provided\n    if (pnpmShrinkwrap) {\n      logger.trace(\n        { packageFile, pnpmShrinkwrap },\n        'Found an existing pnpm shrinkwrap file; skipping pnpm monorepo check.'\n      );\n      continue;\n    }\n\n    // search for corresponding pnpm workspace\n    const pnpmWorkspace = await findPnpmWorkspace(packageFile);\n    if (pnpmWorkspace === null) {\n      continue;\n    }\n    const { workspaceYamlPath, lockFilePath } = pnpmWorkspace;\n\n    // check if package matches workspace filter\n    if (!packageFilterCache.has(workspaceYamlPath)) {\n      const filters = await extractPnpmFilters(workspaceYamlPath);\n      packageFilterCache.set(workspaceYamlPath, filters);\n    }\n    const packageFilters = packageFilterCache.get(workspaceYamlPath);\n    const isPackageInWorkspace =\n      packageFilters !== null &&\n      matchesAnyPattern(\n        packageFile,\n        packageFilters.map((filter) => filter.replace(/\\/?$/, '/package.json')) // TODO #12070\n      );\n    if (isPackageInWorkspace) {\n      p.pnpmShrinkwrap = lockFilePath;\n    } else {\n      logger.trace(\n        { packageFile, workspaceYamlPath },\n        `Didn't find the package in the pnpm workspace`\n      );\n    }\n  }\n}\n"]}