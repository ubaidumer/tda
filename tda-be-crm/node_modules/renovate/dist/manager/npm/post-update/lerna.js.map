{"version":3,"file":"lerna.js","sourceRoot":"","sources":["../../../../lib/manager/npm/post-update/lerna.ts"],"names":[],"mappings":"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","sourcesContent":["import semver, { validRange } from 'semver';\nimport { quote } from 'shlex';\nimport { GlobalConfig } from '../../../config/global';\nimport { TEMPORARY_ERROR } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport { ExecOptions, exec } from '../../../util/exec';\nimport type { PackageFile, PostUpdateConfig } from '../../types';\nimport { getNodeConstraint } from './node-version';\nimport type { GenerateLockFileResult } from './types';\nimport { getOptimizeCommand } from './yarn';\n\n// Exported for testability\nexport function getLernaVersion(\n  lernaPackageFile: Partial<PackageFile>\n): string {\n  const lernaDep = lernaPackageFile.deps?.find((d) => d.depName === 'lerna');\n  if (!lernaDep || !semver.validRange(lernaDep.currentValue)) {\n    logger.warn(\n      `Could not detect lerna version in ${lernaPackageFile.packageFile}, using 'latest'`\n    );\n    return 'latest';\n  }\n  return lernaDep.currentValue;\n}\n\nexport async function generateLockFiles(\n  lernaPackageFile: Partial<PackageFile>,\n  cwd: string,\n  config: PostUpdateConfig,\n  env: NodeJS.ProcessEnv,\n  skipInstalls?: boolean\n): Promise<GenerateLockFileResult> {\n  const lernaClient = lernaPackageFile.lernaClient;\n  if (!lernaClient) {\n    logger.warn('No lernaClient specified - returning');\n    return { error: false };\n  }\n  logger.debug(`Spawning lerna with ${lernaClient} to create lock files`);\n  const preCommands = [];\n  const cmd = [];\n  let cmdOptions = '';\n  try {\n    if (lernaClient === 'yarn') {\n      let installYarn = 'npm i -g yarn';\n      const yarnCompatibility = config.constraints?.yarn;\n      if (validRange(yarnCompatibility)) {\n        installYarn += `@${quote(yarnCompatibility)}`;\n      }\n      preCommands.push(installYarn);\n      if (skipInstalls !== false) {\n        preCommands.push(getOptimizeCommand());\n      }\n      cmdOptions = '--ignore-scripts --ignore-engines --ignore-platform';\n    } else if (lernaClient === 'npm') {\n      let installNpm = 'npm i -g npm';\n      const npmCompatibility = config.constraints?.npm;\n      if (validRange(npmCompatibility)) {\n        installNpm += `@${quote(npmCompatibility)} || true`;\n      }\n      preCommands.push(installNpm, 'hash -d npm');\n      cmdOptions = '--ignore-scripts  --no-audit';\n      if (skipInstalls !== false) {\n        cmdOptions += ' --package-lock-only';\n      }\n    } else {\n      logger.warn({ lernaClient }, 'Unknown lernaClient');\n      return { error: false };\n    }\n    let lernaCommand = `lerna bootstrap --no-ci --ignore-scripts -- `;\n    if (GlobalConfig.get('allowScripts') && config.ignoreScripts !== false) {\n      cmdOptions = cmdOptions.replace('--ignore-scripts ', '');\n      lernaCommand = lernaCommand.replace('--ignore-scripts ', '');\n    }\n    lernaCommand += cmdOptions;\n    const tagConstraint = await getNodeConstraint(config);\n    const execOptions: ExecOptions = {\n      cwd,\n      extraEnv: {\n        NPM_CONFIG_CACHE: env.NPM_CONFIG_CACHE,\n        npm_config_store: env.npm_config_store,\n      },\n      docker: {\n        image: 'node',\n        tagScheme: 'node',\n        tagConstraint,\n        preCommands,\n      },\n    };\n    // istanbul ignore if\n    if (GlobalConfig.get('exposeAllEnv')) {\n      execOptions.extraEnv.NPM_AUTH = env.NPM_AUTH;\n      execOptions.extraEnv.NPM_EMAIL = env.NPM_EMAIL;\n    }\n    const lernaVersion = getLernaVersion(lernaPackageFile);\n    logger.debug('Using lerna version ' + lernaVersion);\n    preCommands.push(`npm i -g lerna@${quote(lernaVersion)}`);\n    cmd.push('lerna info || echo \"Ignoring lerna info failure\"');\n    cmd.push(`${lernaClient} install ${cmdOptions}`);\n    cmd.push(lernaCommand);\n    await exec(cmd, execOptions);\n  } catch (err) /* istanbul ignore next */ {\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n    logger.debug(\n      {\n        cmd,\n        err,\n        type: 'lerna',\n        lernaClient,\n      },\n      'lock file error'\n    );\n    return { error: true, stderr: err.stderr };\n  }\n  return { error: false };\n}\n"]}