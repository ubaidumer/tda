{"version":3,"file":"pnpm.js","sourceRoot":"","sources":["../../../../lib/manager/npm/post-update/pnpm.ts"],"names":[],"mappings":"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","sourcesContent":["import { validRange } from 'semver';\nimport { quote } from 'shlex';\nimport { join } from 'upath';\nimport { GlobalConfig } from '../../../config/global';\nimport { TEMPORARY_ERROR } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport { ExecOptions, exec } from '../../../util/exec';\nimport { readFile, remove } from '../../../util/fs';\nimport type { PostUpdateConfig, Upgrade } from '../../types';\nimport { getNodeConstraint } from './node-version';\nimport type { GenerateLockFileResult } from './types';\n\nexport async function generateLockFile(\n  cwd: string,\n  env: NodeJS.ProcessEnv,\n  config: PostUpdateConfig,\n  upgrades: Upgrade[] = []\n): Promise<GenerateLockFileResult> {\n  const lockFileName = join(cwd, 'pnpm-lock.yaml');\n  logger.debug(`Spawning pnpm install to create ${lockFileName}`);\n  let lockFile = null;\n  let stdout: string;\n  let stderr: string;\n  let cmd = 'pnpm';\n  try {\n    let installPnpm = 'npm i -g pnpm';\n    const pnpmUpdate = upgrades.find(\n      (upgrade) =>\n        upgrade.depType === 'packageManager' && upgrade.depName === 'pnpm'\n    );\n    const pnpmCompatibility = pnpmUpdate\n      ? pnpmUpdate.newValue\n      : config.constraints?.pnpm;\n    if (validRange(pnpmCompatibility)) {\n      installPnpm += `@${quote(pnpmCompatibility)}`;\n    }\n    const preCommands = [installPnpm];\n    const tagConstraint = await getNodeConstraint(config);\n    const execOptions: ExecOptions = {\n      cwd,\n      extraEnv: {\n        NPM_CONFIG_CACHE: env.NPM_CONFIG_CACHE,\n        npm_config_store: env.npm_config_store,\n      },\n      docker: {\n        image: 'node',\n        tagScheme: 'node',\n        tagConstraint,\n        preCommands,\n      },\n    };\n    // istanbul ignore if\n    if (GlobalConfig.get('exposeAllEnv')) {\n      execOptions.extraEnv.NPM_AUTH = env.NPM_AUTH;\n      execOptions.extraEnv.NPM_EMAIL = env.NPM_EMAIL;\n    }\n    cmd = 'pnpm';\n    let args = 'install --recursive --lockfile-only';\n    if (!GlobalConfig.get('allowScripts') || config.ignoreScripts) {\n      args += ' --ignore-scripts';\n      args += ' --ignore-pnpmfile';\n    }\n    logger.debug({ cmd, args }, 'pnpm command');\n\n    if (upgrades.find((upgrade) => upgrade.isLockFileMaintenance)) {\n      logger.debug(\n        `Removing ${lockFileName} first due to lock file maintenance upgrade`\n      );\n      try {\n        await remove(lockFileName);\n      } catch (err) /* istanbul ignore next */ {\n        logger.debug(\n          { err, lockFileName },\n          'Error removing yarn.lock for lock file maintenance'\n        );\n      }\n    }\n\n    await exec(`${cmd} ${args}`, execOptions);\n    lockFile = await readFile(lockFileName, 'utf8');\n  } catch (err) /* istanbul ignore next */ {\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n    logger.debug(\n      {\n        cmd,\n        err,\n        stdout,\n        stderr,\n        type: 'pnpm',\n      },\n      'lock file error'\n    );\n    return { error: true, stderr: err.stderr, stdout: err.stdout };\n  }\n  return { lockFile };\n}\n"]}