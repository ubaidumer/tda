{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../lib/manager/pipenv/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import { quote } from 'shlex';\nimport { TEMPORARY_ERROR } from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { ExecOptions, exec } from '../../util/exec';\nimport {\n  deleteLocalFile,\n  ensureCacheDir,\n  readLocalFile,\n  writeLocalFile,\n} from '../../util/fs';\nimport { getRepoStatus } from '../../util/git';\nimport type {\n  UpdateArtifact,\n  UpdateArtifactsConfig,\n  UpdateArtifactsResult,\n} from '../types';\n\nfunction getPythonConstraint(\n  existingLockFileContent: string,\n  config: UpdateArtifactsConfig\n): string | undefined | null {\n  const { constraints = {} } = config;\n  const { python } = constraints;\n\n  if (python) {\n    logger.debug('Using python constraint from config');\n    return python;\n  }\n  try {\n    const pipfileLock = JSON.parse(existingLockFileContent);\n    if (pipfileLock?._meta?.requires?.python_version) {\n      const pythonVersion: string = pipfileLock._meta.requires.python_version;\n      return `== ${pythonVersion}.*`;\n    }\n    if (pipfileLock?._meta?.requires?.python_full_version) {\n      const pythonFullVersion: string =\n        pipfileLock._meta.requires.python_full_version;\n      return `== ${pythonFullVersion}`;\n    }\n  } catch (err) {\n    // Do nothing\n  }\n  return undefined;\n}\n\nfunction getPipenvConstraint(\n  existingLockFileContent: string,\n  config: UpdateArtifactsConfig\n): string | null {\n  const { constraints = {} } = config;\n  const { pipenv } = constraints;\n\n  if (pipenv) {\n    logger.debug('Using pipenv constraint from config');\n    return pipenv;\n  }\n  try {\n    const pipfileLock = JSON.parse(existingLockFileContent);\n    if (pipfileLock?.default?.pipenv?.version) {\n      const pipenvVersion: string = pipfileLock.default.pipenv.version;\n      return pipenvVersion;\n    }\n    if (pipfileLock?.develop?.pipenv?.version) {\n      const pipenvVersion: string = pipfileLock.develop.pipenv.version;\n      return pipenvVersion;\n    }\n  } catch (err) {\n    // Do nothing\n  }\n  return '';\n}\n\nexport async function updateArtifacts({\n  packageFileName: pipfileName,\n  newPackageFileContent: newPipfileContent,\n  config,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  logger.debug(`pipenv.updateArtifacts(${pipfileName})`);\n\n  const lockFileName = pipfileName + '.lock';\n  const existingLockFileContent = await readLocalFile(lockFileName, 'utf8');\n  if (!existingLockFileContent) {\n    logger.debug('No Pipfile.lock found');\n    return null;\n  }\n  try {\n    await writeLocalFile(pipfileName, newPipfileContent);\n    if (config.isLockFileMaintenance) {\n      await deleteLocalFile(lockFileName);\n    }\n    const cmd = 'pipenv lock';\n    const tagConstraint = getPythonConstraint(existingLockFileContent, config);\n    const pipenvConstraint = getPipenvConstraint(\n      existingLockFileContent,\n      config\n    );\n    const execOptions: ExecOptions = {\n      cwdFile: pipfileName,\n      extraEnv: {\n        PIPENV_CACHE_DIR: await ensureCacheDir('pipenv'),\n      },\n      docker: {\n        image: 'python',\n        tagConstraint,\n        tagScheme: 'pep440',\n        preCommands: [\n          `pip install --user ${quote(`pipenv${pipenvConstraint}`)}`,\n        ],\n      },\n    };\n    logger.debug({ cmd }, 'pipenv lock command');\n    await exec(cmd, execOptions);\n    const status = await getRepoStatus();\n    if (!status?.modified.includes(lockFileName)) {\n      return null;\n    }\n    logger.debug('Returning updated Pipfile.lock');\n    return [\n      {\n        file: {\n          name: lockFileName,\n          contents: await readLocalFile(lockFileName, 'utf8'),\n        },\n      },\n    ];\n  } catch (err) {\n    // istanbul ignore if\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n    logger.debug({ err }, 'Failed to update Pipfile.lock');\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n}\n"]}