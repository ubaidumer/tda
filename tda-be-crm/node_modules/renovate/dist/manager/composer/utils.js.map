{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../lib/manager/composer/utils.ts"],"names":[],"mappings":";;;AAAA,iCAA8B;AAC9B,gDAAmD;AACnD,yCAAsC;AACtC,wDAA4E;AAInE,qGAJW,aAAoB,OAIX;AAE7B,MAAM,iBAAiB,GAAG,IAAI,GAAG,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;AAEpD,SAAgB,oBAAoB,CAAC,MAA6B;IAChE,IAAI,IAAI,GAAG,EAAE,CAAC;IAEd,IAAI,MAAM,CAAC,0BAA0B,EAAE;QACrC,IAAI,MAAM,CAAC,0BAA0B,CAAC,MAAM,KAAK,CAAC,EAAE;YAClD,IAAI,IAAI,yBAAyB,CAAC;SACnC;aAAM;YACL,MAAM,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;gBAChD,IAAI,IAAI,yBAAyB,GAAG,IAAA,aAAK,EAAC,GAAG,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;SACJ;KACF;IAED,IAAI,IAAI,6BAA6B,CAAC;IACtC,IAAI,CAAC,qBAAY,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,MAAM,CAAC,aAAa,EAAE;QAC7D,IAAI,IAAI,+BAA+B,CAAC;KACzC;IAED,IAAI,CAAC,qBAAY,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,MAAM,CAAC,aAAa,EAAE;QAC7D,IAAI,IAAI,eAAe,CAAC;KACzB;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAvBD,oDAuBC;AAED,SAAgB,gBAAgB,CAAC,WAAmC;IAClE,MAAM,EAAE,GAAG,EAAE,GAAG,WAAW,CAAC;IAE5B,IAAI,GAAG,EAAE;QACP,eAAM,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC;QACjD,OAAO,GAAG,CAAC;KACZ;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AATD,4CASC;AAED,SAAgB,qCAAqC,CACnD,IAAkB;;IAElB,OAAO,CACL,CAAA,MAAA,IAAI,CAAC,QAAQ,0CAAE,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAK,IAAI;QAClE,CAAA,MAAA,IAAI,CAAC,cAAc,CAAC,0CAAE,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAK,IAAI,CAC1E,CAAC;AACJ,CAAC;AAPD,sFAOC;AAED,SAAgB,iBAAiB,CAC/B,YAA4B,EAC5B,UAAwB;;IAExB,MAAM,GAAG,GAA2B,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC;IAExD,cAAc;IACd,IAAI,MAAA,YAAY,CAAC,OAAO,0CAAE,GAAG,EAAE;QAC7B,GAAG,CAAC,GAAG,GAAG,MAAA,YAAY,CAAC,OAAO,0CAAE,GAAG,CAAC;KACrC;IAED,qCAAqC;IACrC,IAAI,MAAA,YAAY,CAAC,OAAO,0CAAG,mBAAmB,CAAC,EAAE;QAC/C,GAAG,CAAC,QAAQ,GAAG,MAAA,YAAY,CAAC,OAAO,0CAAG,mBAAmB,CAAC,CAAC;KAC5D;SAAM,IAAI,MAAA,YAAY,CAAC,aAAa,CAAC,0CAAG,mBAAmB,CAAC,EAAE;QAC7D,GAAG,CAAC,QAAQ,GAAG,MAAA,YAAY,CAAC,aAAa,CAAC,0CAAG,mBAAmB,CAAC,CAAC;KACnE;IACD,mCAAmC;SAC9B,IAAI,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAG,oBAAoB,CAAC,EAAE;QAC3C,MAAM,KAAK,GAAG,cAAG,CAAC,QAAQ,CAAC,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAG,oBAAoB,CAAC,CAAC,CAAC;QAC/D,GAAG,CAAC,QAAQ,GAAG,GAAG,KAAK,IAAI,CAAC;KAC7B;IACD,gCAAgC;SAC3B,IAAI,MAAA,YAAY,CAAC,OAAO,0CAAG,sBAAsB,CAAC,EAAE;QACvD,MAAM,KAAK,GAAG,cAAG,CAAC,QAAQ,CAAC,MAAA,YAAY,CAAC,OAAO,0CAAG,sBAAsB,CAAC,CAAC,CAAC;QAC3E,GAAG,CAAC,QAAQ,GAAG,GAAG,KAAK,IAAI,CAAC;KAC7B;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AA5BD,8CA4BC","sourcesContent":["import { quote } from 'shlex';\nimport { GlobalConfig } from '../../config/global';\nimport { logger } from '../../logger';\nimport { api, id as composerVersioningId } from '../../versioning/composer';\nimport type { UpdateArtifactsConfig } from '../types';\nimport type { ComposerConfig, ComposerLock } from './types';\n\nexport { composerVersioningId };\n\nconst depRequireInstall = new Set(['symfony/flex']);\n\nexport function getComposerArguments(config: UpdateArtifactsConfig): string {\n  let args = '';\n\n  if (config.composerIgnorePlatformReqs) {\n    if (config.composerIgnorePlatformReqs.length === 0) {\n      args += ' --ignore-platform-reqs';\n    } else {\n      config.composerIgnorePlatformReqs.forEach((req) => {\n        args += ' --ignore-platform-req ' + quote(req);\n      });\n    }\n  }\n\n  args += ' --no-ansi --no-interaction';\n  if (!GlobalConfig.get('allowScripts') || config.ignoreScripts) {\n    args += ' --no-scripts --no-autoloader';\n  }\n\n  if (!GlobalConfig.get('allowPlugins') || config.ignorePlugins) {\n    args += ' --no-plugins';\n  }\n\n  return args;\n}\n\nexport function getPhpConstraint(constraints: Record<string, string>): string {\n  const { php } = constraints;\n\n  if (php) {\n    logger.debug('Using php constraint from config');\n    return php;\n  }\n\n  return null;\n}\n\nexport function requireComposerDependencyInstallation(\n  lock: ComposerLock\n): boolean {\n  return (\n    lock.packages?.some((p) => depRequireInstall.has(p.name)) === true ||\n    lock['packages-dev']?.some((p) => depRequireInstall.has(p.name)) === true\n  );\n}\n\nexport function extractContraints(\n  composerJson: ComposerConfig,\n  lockParsed: ComposerLock\n): Record<string, string> {\n  const res: Record<string, string> = { composer: '1.*' };\n\n  // extract php\n  if (composerJson.require?.php) {\n    res.php = composerJson.require?.php;\n  }\n\n  // extract direct composer dependency\n  if (composerJson.require?.['composer/composer']) {\n    res.composer = composerJson.require?.['composer/composer'];\n  } else if (composerJson['require-dev']?.['composer/composer']) {\n    res.composer = composerJson['require-dev']?.['composer/composer'];\n  }\n  // check last used composer version\n  else if (lockParsed?.['plugin-api-version']) {\n    const major = api.getMajor(lockParsed?.['plugin-api-version']);\n    res.composer = `${major}.*`;\n  }\n  // check composer api dependency\n  else if (composerJson.require?.['composer-runtime-api']) {\n    const major = api.getMajor(composerJson.require?.['composer-runtime-api']);\n    res.composer = `${major}.*`;\n  }\n  return res;\n}\n"]}