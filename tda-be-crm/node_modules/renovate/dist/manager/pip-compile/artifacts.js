"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateArtifacts = void 0;
const tslib_1 = require("tslib");
const is_1 = (0, tslib_1.__importDefault)(require("@sindresorhus/is"));
const shlex_1 = require("shlex");
const upath_1 = require("upath");
const error_messages_1 = require("../../constants/error-messages");
const logger_1 = require("../../logger");
const exec_1 = require("../../util/exec");
const fs_1 = require("../../util/fs");
const git_1 = require("../../util/git");
const regex_1 = require("../../util/regex");
function getPythonConstraint(config) {
    const { constraints = {} } = config;
    const { python } = constraints;
    if (python) {
        logger_1.logger.debug('Using python constraint from config');
        return python;
    }
    return undefined;
}
function getPipToolsConstraint(config) {
    const { constraints = {} } = config;
    const { pipTools } = constraints;
    if (is_1.default.string(pipTools)) {
        logger_1.logger.debug('Using pipTools constraint from config');
        return pipTools;
    }
    return '';
}
async function updateArtifacts({ packageFileName: inputFileName, newPackageFileContent: newInputContent, config, }) {
    const outputFileName = inputFileName.replace((0, regex_1.regEx)(/(\.in)?$/), '.txt');
    logger_1.logger.debug(`pipCompile.updateArtifacts(${inputFileName}->${outputFileName})`);
    const existingOutput = await (0, fs_1.readLocalFile)(outputFileName, 'utf8');
    if (!existingOutput) {
        logger_1.logger.debug('No pip-compile output file found');
        return null;
    }
    try {
        await (0, fs_1.writeLocalFile)(inputFileName, newInputContent);
        if (config.isLockFileMaintenance) {
            await (0, fs_1.deleteLocalFile)(outputFileName);
        }
        const cmd = `pip-compile ${(0, shlex_1.quote)((0, upath_1.parse)(inputFileName).base)}`;
        const tagConstraint = getPythonConstraint(config);
        const pipToolsConstraint = getPipToolsConstraint(config);
        const execOptions = {
            cwdFile: inputFileName,
            docker: {
                image: 'python',
                tagConstraint,
                tagScheme: 'pep440',
                preCommands: [
                    `pip install --user ${(0, shlex_1.quote)(`pip-tools${pipToolsConstraint}`)}`,
                ],
            },
        };
        logger_1.logger.debug({ cmd }, 'pip-compile command');
        await (0, exec_1.exec)(cmd, execOptions);
        const status = await (0, git_1.getRepoStatus)();
        if (!(status === null || status === void 0 ? void 0 : status.modified.includes(outputFileName))) {
            return null;
        }
        logger_1.logger.debug('Returning updated pip-compile result');
        return [
            {
                file: {
                    name: outputFileName,
                    contents: await (0, fs_1.readLocalFile)(outputFileName, 'utf8'),
                },
            },
        ];
    }
    catch (err) {
        // istanbul ignore if
        if (err.message === error_messages_1.TEMPORARY_ERROR) {
            throw err;
        }
        logger_1.logger.debug({ err }, 'Failed to pip-compile');
        return [
            {
                artifactError: {
                    lockFile: outputFileName,
                    stderr: err.message,
                },
            },
        ];
    }
}
exports.updateArtifacts = updateArtifacts;
//# sourceMappingURL=artifacts.js.map