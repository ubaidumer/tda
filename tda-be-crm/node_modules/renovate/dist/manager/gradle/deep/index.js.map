{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/manager/gradle/deep/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Stats } from 'fs';\nimport upath from 'upath';\nimport { GlobalConfig } from '../../../config/global';\nimport { TEMPORARY_ERROR } from '../../../constants/error-messages';\nimport * as datasourceMaven from '../../../datasource/maven';\nimport { logger } from '../../../logger';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport { ExecOptions, exec } from '../../../util/exec';\nimport { readLocalFile, stat } from '../../../util/fs';\nimport {\n  extraEnv,\n  getJavaVersioning,\n  gradleWrapperFileName,\n  prepareGradleCommand,\n} from '../../gradle-wrapper/utils';\nimport type {\n  ExtractConfig,\n  PackageFile,\n  UpdateDependencyConfig,\n  Upgrade,\n} from '../../types';\nimport {\n  collectVersionVariables,\n  init,\n  updateGradleVersion,\n} from './build-gradle';\nimport {\n  createRenovateGradlePlugin,\n  extractDependenciesFromUpdatesReport,\n} from './gradle-updates-report';\nimport type { GradleDependency } from './types';\nimport { getDockerConstraint, getDockerPreCommands } from './utils';\n\nexport const GRADLE_DEPENDENCY_REPORT_OPTIONS =\n  '--init-script renovate-plugin.gradle renovate';\nconst TIMEOUT_CODE = 143;\n\nasync function prepareGradleCommandFallback(\n  gradlewName: string,\n  cwd: string,\n  gradlew: Stats | null,\n  args: string\n): Promise<string> {\n  const cmd = await prepareGradleCommand(gradlewName, cwd, gradlew, args);\n  if (cmd === null) {\n    return `gradle ${args}`;\n  }\n  return cmd;\n}\n\nexport async function executeGradle(\n  config: ExtractConfig,\n  cwd: string,\n  gradlew: Stats | null,\n  gradleRoot = '.'\n): Promise<void> {\n  let stdout: string;\n  let stderr: string;\n  let timeout: number;\n  if (config.gradle?.timeout) {\n    timeout = config.gradle.timeout * 1000;\n  }\n  const cmd = await prepareGradleCommandFallback(\n    gradleWrapperFileName(),\n    cwd,\n    gradlew,\n    GRADLE_DEPENDENCY_REPORT_OPTIONS\n  );\n  const execOptions: ExecOptions = {\n    timeout,\n    cwd,\n    docker: {\n      image: 'java',\n      tagConstraint:\n        config.constraints?.java ?? (await getDockerConstraint(gradleRoot)),\n      tagScheme: getJavaVersioning(),\n      preCommands: await getDockerPreCommands(gradleRoot),\n    },\n    extraEnv,\n  };\n  try {\n    logger.debug({ cmd }, 'Start gradle command');\n    ({ stdout, stderr } = await exec(cmd, execOptions));\n  } catch (err) /* istanbul ignore next */ {\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n    if (err.code === TIMEOUT_CODE) {\n      throw new ExternalHostError(err, 'gradle');\n    }\n    logger.warn({ errMessage: err.message }, 'Gradle extraction failed');\n    return;\n  }\n  logger.debug(stdout + stderr);\n  logger.debug('Gradle report complete');\n}\n\nexport async function extractAllPackageFiles(\n  config: ExtractConfig,\n  packageFiles: string[]\n): Promise<PackageFile[] | null> {\n  let rootBuildGradle: string | undefined;\n  let gradlew: Stats | null;\n  const { localDir } = GlobalConfig.get();\n  for (const packageFile of packageFiles) {\n    const dirname = upath.dirname(packageFile);\n    const gradlewPath = upath.join(dirname, gradleWrapperFileName());\n    gradlew = await stat(upath.join(localDir, gradlewPath)).catch(() => null);\n\n    if (['build.gradle', 'build.gradle.kts'].includes(packageFile)) {\n      rootBuildGradle = packageFile;\n      break;\n    }\n\n    // If there is gradlew in the same directory, the directory should be a Gradle project root\n    if (gradlew?.isFile() === true) {\n      rootBuildGradle = packageFile;\n      break;\n    }\n  }\n  if (!rootBuildGradle) {\n    logger.warn('No root build.gradle nor build.gradle.kts found - skipping');\n    return null;\n  }\n  logger.debug('Extracting dependencies from all gradle files');\n\n  const gradleRoot = upath.dirname(rootBuildGradle);\n  const cwd = upath.join(localDir, gradleRoot);\n\n  await createRenovateGradlePlugin(gradleRoot);\n  await executeGradle(config, cwd, gradlew, gradleRoot);\n\n  init();\n\n  const dependencies = await extractDependenciesFromUpdatesReport(gradleRoot);\n  if (dependencies.length === 0) {\n    return [];\n  }\n\n  const gradleFiles: PackageFile[] = [];\n  for (const packageFile of packageFiles) {\n    const content = await readLocalFile(packageFile, 'utf8');\n    // istanbul ignore else\n    if (content) {\n      gradleFiles.push({\n        packageFile,\n        datasource: datasourceMaven.id,\n        deps: dependencies,\n      });\n\n      collectVersionVariables(dependencies, content);\n    } else {\n      logger.debug({ packageFile }, 'packageFile has no content');\n    }\n  }\n\n  return gradleFiles;\n}\n\nfunction buildGradleDependency(config: Upgrade): GradleDependency {\n  return {\n    group: config.depGroup,\n    name: config.name,\n    version: config.currentValue,\n  };\n}\n\nexport function updateDependency({\n  fileContent,\n  upgrade,\n}: UpdateDependencyConfig): string {\n  // prettier-ignore\n  logger.debug(`gradle.updateDependency(): packageFile:${upgrade.packageFile} depName:${upgrade.depName}, version:${upgrade.currentValue} ==> ${upgrade.newValue}`);\n\n  return updateGradleVersion(\n    fileContent,\n    buildGradleDependency(upgrade),\n    upgrade.newValue\n  );\n}\n"]}