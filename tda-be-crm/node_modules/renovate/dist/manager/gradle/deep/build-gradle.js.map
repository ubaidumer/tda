{"version":3,"file":"build-gradle.js","sourceRoot":"","sources":["../../../../lib/manager/gradle/deep/build-gradle.ts"],"names":[],"mappings":"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","sourcesContent":["import { regEx } from '../../../util/regex';\nimport type {\n  BuildDependency,\n  GradleDependency,\n  UpdateFunction,\n} from './types';\n\n/**\n * Functions adapted/ported from https://github.com/patrikerdes/gradle-use-latest-versions-plugin\n * gradle-use-latest-versions-plugin is licensed under MIT and Copyright (c) 2018 Patrik Erdes\n */\n\nlet variables: Record<string, string> = {};\n\nconst groovyQuotes = `(?:[\"'](?:\"\"|'')?)`;\nconst groovyVersionVariable = `(?:${groovyQuotes}\\\\$)?{?([^\\\\s\"'{}$)]+)}?${groovyQuotes}?`;\nconst kotlinVersionVariable = `(?:\"\\\\$)?{?([^\\\\s\"{}$]+?)}?\"?`;\n\n// https://github.com/patrikerdes/gradle-use-latest-versions-plugin/blob/8cf9c3917b8b04ba41038923cab270d2adda3aa6/src/main/groovy/se/patrikerdes/DependencyUpdate.groovy#L27-L29\nfunction moduleStringVersionFormatMatch(dependency: GradleDependency): RegExp {\n  return regEx(\n    `(${groovyQuotes}${dependency.group}:${dependency.name}:)[^$].*?(([:@].*?)?${groovyQuotes})`\n  );\n}\n\nfunction groovyPluginStringVersionFormatMatch(\n  dependency: GradleDependency\n): RegExp {\n  return regEx(\n    `(id\\\\s+${groovyQuotes}${dependency.group}${groovyQuotes}\\\\s+version\\\\s+${groovyQuotes})[^\"$].*?(${groovyQuotes})`\n  );\n}\n\nfunction kotlinPluginStringVersionFormatMatch(\n  dependency: GradleDependency\n): RegExp {\n  return regEx(`(id\\\\(\"${dependency.group}\"\\\\)\\\\s+version\\\\s+\")[^$].*?(\")`);\n}\n\nfunction dependencyStringVersionFormatMatch(\n  dependency: GradleDependency\n): RegExp {\n  return regEx(\n    `(dependency\\\\s+['\"]${dependency.group}:${dependency.name}:)[^'\"]+(['\"])`\n  );\n}\n\nfunction allMapFormatOrders(\n  group: string,\n  name: string,\n  version: string,\n  prefix: string,\n  postfix: string\n): RegExp[] {\n  const comma = '\\\\s*,\\\\s*';\n  return [\n    `${group}${comma}${name}${comma}${version}`,\n    `${group}${comma}${version}${comma}${name}`,\n    `${name}${comma}${group}${comma}${version}`,\n    `${version}${comma}${group}${comma}${name}`,\n    `${name}${comma}${version}${comma}${group}`,\n    `${version}${comma}${name}${comma}${group}`,\n  ].map((regex) => regEx(`${prefix}${regex}${postfix}`));\n}\n\nfunction moduleMapVersionFormatMatch(dependency: GradleDependency): RegExp[] {\n  // two captures groups: start and end. The version is in between them\n  const group = `group\\\\s*:\\\\s*${groovyQuotes}${dependency.group}${groovyQuotes}`;\n  const name = `name\\\\s*:\\\\s*${groovyQuotes}${dependency.name}${groovyQuotes}`;\n  const version = `version\\\\s*:\\\\s*${groovyQuotes})[^{}$\"']+?(${groovyQuotes}`;\n  return allMapFormatOrders(group, name, version, '(', ')');\n}\n\nfunction moduleKotlinNamedArgumentVersionFormatMatch(\n  dependency: GradleDependency\n): RegExp[] {\n  // two captures groups: start and end. The version is in between them\n  const group = `group\\\\s*=\\\\s*\"${dependency.group}\"`;\n  const name = `name\\\\s*=\\\\s*\"${dependency.name}\"`;\n  const version = `version\\\\s*=\\\\s*\")[^{}$]*?(\"`;\n  return allMapFormatOrders(group, name, version, '(', ')');\n}\n\nfunction moduleMapVariableVersionFormatMatch(\n  dependency: GradleDependency\n): RegExp[] {\n  // one capture group: the version variable\n  const group = `group\\\\s*:\\\\s*${groovyQuotes}${dependency.group}${groovyQuotes}`;\n  const name = `name\\\\s*:\\\\s*${groovyQuotes}${dependency.name}${groovyQuotes}`;\n  const version = `version\\\\s*:\\\\s*${groovyVersionVariable}`;\n  return allMapFormatOrders(group, name, version, '', '');\n}\n\nfunction moduleKotlinNamedArgumentVariableVersionFormatMatch(\n  dependency: GradleDependency\n): RegExp[] {\n  // one capture group: the version variable\n  const group = `group\\\\s*=\\\\s*\"${dependency.group}\"`;\n  const name = `name\\\\s*=\\\\s*\"${dependency.name}\"`;\n  const version = `version\\\\s*=\\\\s*${kotlinVersionVariable}`;\n  return allMapFormatOrders(group, name, version, '', '[\\\\s),]');\n}\n\nfunction moduleStringVariableInterpolationVersionFormatMatch(\n  dependency: GradleDependency\n): RegExp {\n  return regEx(\n    `${groovyQuotes}${dependency.group}:${dependency.name}:\\\\$([^{].*?)${groovyQuotes}`\n  );\n}\n\nfunction moduleStringVariableExpressionVersionFormatMatch(\n  dependency: GradleDependency\n): RegExp {\n  return regEx(\n    `${groovyQuotes}${dependency.group}:${dependency.name}:\\\\$` +\n      `{([^{].*?)}${groovyQuotes}`\n  );\n}\n\nfunction groovyPluginVariableVersionFormatMatch(\n  dependency: GradleDependency\n): RegExp {\n  return regEx(\n    `id\\\\s+${groovyQuotes}${dependency.group}${groovyQuotes}\\\\s+version\\\\s+${groovyVersionVariable}(?:\\\\s|;|})`\n  );\n}\n\nfunction kotlinPluginVariableVersionFormatMatch(\n  dependency: GradleDependency\n): RegExp {\n  return regEx(\n    `id\\\\(\"${dependency.group}\"\\\\)\\\\s+version\\\\s+${kotlinVersionVariable}(?:\\\\s|;|})`\n  );\n}\n\nfunction kotlinImplementationVariableVersionFormatMatch(\n  dependency: GradleDependency\n): RegExp {\n  // implementation(\"com.graphql-java\", \"graphql-java\", graphqlVersion)\n  return regEx(\n    `(?:implementation|testImplementation)\\\\s*\\\\(\\\\s*['\"]${dependency.group}['\"]\\\\s*,\\\\s*['\"]${dependency.name}['\"]\\\\s*,\\\\s*([a-zA-Z_][a-zA-Z_0-9]*)\\\\s*\\\\)\\\\s*(?:\\\\s|;|})`\n  );\n}\n\nfunction kotlinPluginVariableDotVersionFormatMatch(\n  dependency: GradleDependency\n): RegExp {\n  // id(\"org.jetbrains.kotlin.jvm\").version(kotlinVersion)\n  return regEx(\n    `id\\\\s*\\\\(\\\\s*\"${dependency.group}\"\\\\s*\\\\)\\\\s*\\\\.\\\\s*version\\\\s*\\\\(\\\\s*([a-zA-Z_][a-zA-Z_0-9]*)\\\\s*\\\\)\\\\s*(?:\\\\s|;|})`\n  );\n}\n\nfunction dependencyStringVariableExpressionFormatMatch(\n  dependency: GradleDependency\n): RegExp {\n  return regEx(\n    `\\\\s*dependency\\\\s+['\"]${dependency.group}:${dependency.name}:` +\n      '${([^}]*)}' + // eslint-disable-line no-template-curly-in-string\n      `['\"](?:\\\\s|;|})`\n  );\n}\n\nfunction dependencyStringLiteralExpressionFormatMatch(\n  dependency: GradleDependency\n): RegExp {\n  return regEx(\n    `\\\\s*dependency\\\\s+['\"]${dependency.group}:${dependency.name}:([^'\"{}$]+)['\"](?:\\\\s|;|})`\n  );\n}\n\nfunction variableDefinitionFormatMatch(variable: string): RegExp {\n  return regEx(`(${variable}\\\\s*=\\\\s*?[\"'])(.*)([\"'])`);\n}\n\nfunction variableMapDefinitionFormatMatch(\n  variable: string,\n  version: string\n): RegExp {\n  return regEx(`(${variable}\\\\s*:\\\\s*?[\"'])(${version})([\"'])`);\n}\n\nexport function collectVersionVariables(\n  dependencies: BuildDependency[],\n  buildGradleContent: string\n): void {\n  for (const dep of dependencies) {\n    const dependency: GradleDependency = {\n      ...dep,\n      group: dep.depGroup,\n    };\n    const regexes = [\n      moduleStringVariableExpressionVersionFormatMatch(dependency),\n      moduleStringVariableInterpolationVersionFormatMatch(dependency),\n      groovyPluginVariableVersionFormatMatch(dependency),\n      kotlinPluginVariableVersionFormatMatch(dependency),\n      dependencyStringVariableExpressionFormatMatch(dependency),\n      ...moduleMapVariableVersionFormatMatch(dependency),\n      ...moduleKotlinNamedArgumentVariableVersionFormatMatch(dependency),\n      kotlinImplementationVariableVersionFormatMatch(dependency),\n      kotlinPluginVariableDotVersionFormatMatch(dependency),\n    ];\n\n    const depName = `${dependency.group}:${dependency.name}`;\n    for (const regex of regexes) {\n      const match = regex.exec(buildGradleContent);\n      if (match) {\n        variables[depName] = match[1];\n      }\n    }\n\n    if (!dep.currentValue) {\n      const dependencyLiteralRegex =\n        dependencyStringLiteralExpressionFormatMatch(dependency);\n      const currentValue = dependencyLiteralRegex.exec(buildGradleContent)?.[1];\n      if (currentValue) {\n        dep.currentValue = currentValue;\n      }\n    }\n  }\n}\n\nexport function init(): void {\n  variables = {};\n}\n\nfunction updateVersionLiterals(\n  dependency: GradleDependency,\n  buildGradleContent: string,\n  newValue: string\n): string | null {\n  const regexes: RegExp[] = [\n    moduleStringVersionFormatMatch(dependency),\n    groovyPluginStringVersionFormatMatch(dependency),\n    kotlinPluginStringVersionFormatMatch(dependency),\n    dependencyStringVersionFormatMatch(dependency),\n    ...moduleMapVersionFormatMatch(dependency),\n    ...moduleKotlinNamedArgumentVersionFormatMatch(dependency),\n  ];\n  let result = buildGradleContent;\n  for (const regex of regexes) {\n    const match = regex.exec(result);\n    if (match) {\n      result = result.replace(match[0], `${match[1]}${newValue}${match[2]}`);\n    }\n  }\n  return result === buildGradleContent ? null : result;\n}\n\nfunction updateLocalVariables(\n  dependency: GradleDependency,\n  buildGradleContent: string,\n  newValue: string\n): string | null {\n  const regexes: RegExp[] = [\n    ...moduleMapVariableVersionFormatMatch(dependency),\n    moduleStringVariableInterpolationVersionFormatMatch(dependency),\n    moduleStringVariableExpressionVersionFormatMatch(dependency),\n    groovyPluginVariableVersionFormatMatch(dependency),\n    kotlinPluginVariableVersionFormatMatch(dependency),\n    kotlinImplementationVariableVersionFormatMatch(dependency),\n    ...moduleKotlinNamedArgumentVariableVersionFormatMatch(dependency),\n  ];\n  for (const regex of regexes) {\n    const match = regex.exec(buildGradleContent);\n    if (match) {\n      const variableDefinitionRegex = variableDefinitionFormatMatch(match[1]);\n      const variableDefinitionMatch =\n        variableDefinitionRegex.exec(buildGradleContent);\n      if (variableDefinitionMatch) {\n        return buildGradleContent.replace(\n          variableDefinitionMatch[0],\n          `${variableDefinitionMatch[1]}${newValue}${variableDefinitionMatch[3]}`\n        );\n      }\n    }\n  }\n  return null;\n}\n\nfunction updateGlobalVariables(\n  dependency: GradleDependency,\n  buildGradleContent: string,\n  newValue: string\n): string | null {\n  const variable = variables[`${dependency.group}:${dependency.name}`];\n  if (variable) {\n    const regex = variableDefinitionFormatMatch(variable);\n    const match = regex.exec(buildGradleContent);\n    if (match) {\n      return buildGradleContent.replace(\n        match[0],\n        `${match[1]}${newValue}${match[3]}`\n      );\n    }\n  }\n  return null;\n}\n\nfunction updateGlobalMapVariables(\n  dependency: GradleDependency,\n  buildGradleContent: string,\n  newValue: string\n): string | null {\n  let variable = variables[`${dependency.group}:${dependency.name}`];\n  if (variable) {\n    while (variable && variable.split('.').length > 0) {\n      const regex = variableMapDefinitionFormatMatch(\n        variable,\n        dependency.version\n      );\n      const match = regex.exec(buildGradleContent);\n      if (match) {\n        return buildGradleContent.replace(\n          match[0],\n          `${match[1]}${newValue}${match[3]}`\n        );\n      }\n\n      // Remove first path segment of variable and try again\n      variable = variable.split('.').splice(1).join('.');\n    }\n  }\n  return null;\n}\n\nfunction updateKotlinVariablesByExtra(\n  dependency: GradleDependency,\n  buildGradleContent: string,\n  newValue: string\n): string | null {\n  const variable = variables[`${dependency.group}:${dependency.name}`];\n  if (variable) {\n    const regex = regEx(\n      `(val ${variable} by extra(?: {|\\\\()\\\\s*\")(.*)(\"\\\\s*[})])`\n    );\n    const match = regex.exec(buildGradleContent);\n    if (match) {\n      return buildGradleContent.replace(\n        match[0],\n        `${match[1]}${newValue}${match[3]}`\n      );\n    }\n  }\n  return null;\n}\n\nfunction updatePropertyFileGlobalVariables(\n  dependency: GradleDependency,\n  buildGradleContent: string,\n  newValue: string\n): string | null {\n  const variable = variables[`${dependency.group}:${dependency.name}`];\n  if (variable) {\n    const regex = regEx(`(${variable}\\\\s*=\\\\s*)(.*)`);\n    const match = regex.exec(buildGradleContent);\n    if (match) {\n      return buildGradleContent.replace(match[0], `${match[1]}${newValue}`);\n    }\n  }\n  return null;\n}\n\nexport function updateGradleVersion(\n  buildGradleContent: string,\n  dependency: GradleDependency,\n  newValue: string\n): string {\n  if (dependency) {\n    const updateFunctions: UpdateFunction[] = [\n      updateVersionLiterals,\n      updateLocalVariables,\n      updateGlobalVariables,\n      updateGlobalMapVariables,\n      updatePropertyFileGlobalVariables,\n      updateKotlinVariablesByExtra,\n    ];\n\n    for (const updateFunction of updateFunctions) {\n      const gradleContentUpdated = updateFunction(\n        dependency,\n        buildGradleContent,\n        newValue\n      );\n      if (gradleContentUpdated) {\n        return gradleContentUpdated;\n      }\n    }\n  }\n  return buildGradleContent;\n}\n"]}