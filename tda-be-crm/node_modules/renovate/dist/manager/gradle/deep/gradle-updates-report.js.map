{"version":3,"file":"gradle-updates-report.js","sourceRoot":"","sources":["../../../../lib/manager/gradle/deep/gradle-updates-report.ts"],"names":[],"mappings":"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","sourcesContent":["import { join } from 'upath';\nimport * as datasourceSbtPackage from '../../../datasource/sbt-package';\nimport { logger } from '../../../logger';\nimport {\n  localPathExists,\n  readLocalFile,\n  writeLocalFile,\n} from '../../../util/fs';\nimport { regEx } from '../../../util/regex';\nimport type {\n  BuildDependency,\n  GradleDependencyWithRepos,\n  GradleProject,\n} from './types';\n\nexport const GRADLE_DEPENDENCY_REPORT_FILENAME = 'gradle-renovate-report.json';\n\nexport async function createRenovateGradlePlugin(\n  gradleRoot = '.'\n): Promise<void> {\n  const content = `\nimport groovy.json.JsonOutput\nimport org.gradle.api.internal.artifacts.dependencies.DefaultExternalModuleDependency\nimport java.util.concurrent.ConcurrentLinkedQueue\n\ndef output = new ConcurrentLinkedQueue<>();\n\nallprojects {\n  tasks.register(\"renovate\") {\n    doLast {\n      def project = ['project': project.name]\n      output << project\n\n      def repos = (repositories + buildscript.repositories + settings.pluginManagement.repositories)\n        .findAll { it instanceof MavenArtifactRepository && it.url.scheme ==~ /https?/ }\n        .collect { \"$it.url\" }\n        .unique()\n      project.repositories = repos\n\n      def deps = (buildscript.configurations + configurations + settings.buildscript.configurations)\n        .collect { it.dependencies + it.dependencyConstraints }\n        .flatten()\n        .findAll { it instanceof DefaultExternalModuleDependency || it instanceof DependencyConstraint }\n        .findAll { 'Pinned to the embedded Kotlin' != it.reason } // Embedded Kotlin dependencies\n        .collect { ['name':it.name, 'group':it.group, 'version':it.version] }\n      project.dependencies = deps\n    }\n  }\n}\ngradle.buildFinished {\n   def outputFile = new File('${GRADLE_DEPENDENCY_REPORT_FILENAME}')\n   def json = JsonOutput.toJson(output)\n   outputFile.write json\n}`;\n  const gradleInitFile = join(gradleRoot, 'renovate-plugin.gradle');\n  logger.debug(\n    'Creating renovate-plugin.gradle file with renovate gradle plugin'\n  );\n  await writeLocalFile(gradleInitFile, content);\n}\n\nasync function readGradleReport(localDir: string): Promise<GradleProject[]> {\n  const renovateReportFilename = join(\n    localDir,\n    GRADLE_DEPENDENCY_REPORT_FILENAME\n  );\n  if (!(await localPathExists(renovateReportFilename))) {\n    return [];\n  }\n\n  const contents = await readLocalFile(renovateReportFilename, 'utf8');\n  try {\n    return JSON.parse(contents);\n  } catch (err) {\n    logger.error({ err }, 'Invalid Gradle extract JSON');\n    return [];\n  }\n}\n\nfunction mergeDependenciesWithRepositories(\n  project: GradleProject\n): GradleDependencyWithRepos[] {\n  if (!project.dependencies) {\n    return [];\n  }\n  return project.dependencies.map((dep) => ({\n    ...dep,\n    repos: [...project.repositories],\n  }));\n}\n\nfunction flattenDependencies(\n  accumulator: GradleDependencyWithRepos[],\n  currentValue: GradleDependencyWithRepos[]\n): GradleDependencyWithRepos[] {\n  accumulator.push(...currentValue);\n  return accumulator;\n}\n\nfunction combineReposOnDuplicatedDependencies(\n  accumulator: GradleDependencyWithRepos[],\n  currentValue: GradleDependencyWithRepos\n): GradleDependencyWithRepos[] {\n  const existingDependency = accumulator.find(\n    (dep) => dep.name === currentValue.name && dep.group === currentValue.group\n  );\n  if (existingDependency) {\n    const nonExistingRepos = currentValue.repos.filter(\n      (repo) => !existingDependency.repos.includes(repo)\n    );\n    existingDependency.repos.push(...nonExistingRepos);\n  } else {\n    accumulator.push(currentValue);\n  }\n  return accumulator;\n}\n\nfunction buildDependency(\n  gradleModule: GradleDependencyWithRepos\n): BuildDependency {\n  return {\n    name: gradleModule.name,\n    depGroup: gradleModule.group,\n    depName: `${gradleModule.group}:${gradleModule.name}`,\n    currentValue: gradleModule.version,\n    registryUrls: gradleModule.repos,\n  };\n}\n\nexport async function extractDependenciesFromUpdatesReport(\n  localDir: string\n): Promise<BuildDependency[]> {\n  const gradleProjectConfigurations = await readGradleReport(localDir);\n\n  const dependencies = gradleProjectConfigurations\n    .map(mergeDependenciesWithRepositories, [])\n    .reduce(flattenDependencies, [])\n    .reduce(combineReposOnDuplicatedDependencies, []);\n\n  return dependencies\n    .map((gradleModule) => buildDependency(gradleModule))\n    .map((dep) => {\n      /* https://github.com/renovatebot/renovate/issues/4627 */\n      const { depName, currentValue } = dep;\n      if (depName.endsWith('_%%')) {\n        return {\n          ...dep,\n          depName: depName.replace(regEx(/_%%/), ''), // TODO #12071\n          datasource: datasourceSbtPackage.id,\n        };\n      }\n      if (regEx(/^%.*%$/).test(currentValue)) {\n        // TODO #12071\n        return { ...dep, skipReason: 'version-placeholder' };\n      }\n      return dep;\n    });\n}\n"]}