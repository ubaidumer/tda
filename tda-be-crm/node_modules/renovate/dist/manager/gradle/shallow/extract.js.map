{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/manager/gradle/shallow/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import * as upath from 'upath';\nimport {\n  id as datasource,\n  defaultRegistryUrls,\n} from '../../../datasource/maven';\nimport { logger } from '../../../logger';\nimport { readLocalFile } from '../../../util/fs';\nimport type {\n  ExtractConfig,\n  PackageDependency,\n  PackageFile,\n} from '../../types';\nimport type { GradleManagerData } from '../types';\nimport { parseCatalog } from './extract/catalog';\nimport { parseGradle, parseProps } from './parser';\nimport type { PackageVariables, VariableRegistry } from './types';\nimport {\n  getVars,\n  isGradleFile,\n  isPropsFile,\n  isTOMLFile,\n  reorderFiles,\n  toAbsolutePath,\n} from './utils';\n\n// Enables reverse sorting in generateBranchConfig()\n//\n// Required for grouped dependencies to be upgraded\n// correctly in single branch.\n//\n// https://github.com/renovatebot/renovate/issues/8224\nfunction elevateFileReplacePositionField(\n  deps: PackageDependency<GradleManagerData>[]\n): PackageDependency<GradleManagerData>[] {\n  return deps.map((dep) => ({\n    ...dep,\n    fileReplacePosition: dep?.managerData?.fileReplacePosition,\n  }));\n}\n\nexport async function extractAllPackageFiles(\n  config: ExtractConfig,\n  packageFiles: string[]\n): Promise<PackageFile[] | null> {\n  const extractedDeps: PackageDependency<GradleManagerData>[] = [];\n  const registry: VariableRegistry = {};\n  const packageFilesByName: Record<string, PackageFile> = {};\n  const registryUrls = [];\n  const reorderedFiles = reorderFiles(packageFiles);\n  for (const packageFile of reorderedFiles) {\n    packageFilesByName[packageFile] = {\n      packageFile,\n      datasource,\n      deps: [],\n    };\n\n    try {\n      const content = await readLocalFile(packageFile, 'utf8');\n      const dir = upath.dirname(toAbsolutePath(packageFile));\n\n      const updateVars = (newVars: PackageVariables): void => {\n        const oldVars = registry[dir] || {};\n        registry[dir] = { ...oldVars, ...newVars };\n      };\n\n      if (isPropsFile(packageFile)) {\n        const { vars, deps } = parseProps(content, packageFile);\n        updateVars(vars);\n        extractedDeps.push(...deps);\n      } else if (isTOMLFile(packageFile)) {\n        const updatesFromCatalog = parseCatalog(packageFile, content);\n        extractedDeps.push(...updatesFromCatalog);\n      } else if (isGradleFile(packageFile)) {\n        const vars = getVars(registry, dir);\n        const {\n          deps,\n          urls,\n          vars: gradleVars,\n        } = parseGradle(content, vars, packageFile);\n        urls.forEach((url) => {\n          if (!registryUrls.includes(url)) {\n            registryUrls.push(url);\n          }\n        });\n        registry[dir] = { ...registry[dir], ...gradleVars };\n        updateVars(gradleVars);\n        extractedDeps.push(...deps);\n      }\n    } catch (err) {\n      logger.warn(\n        { err, config, packageFile },\n        `Failed to process Gradle file: ${packageFile}`\n      );\n    }\n  }\n\n  if (!extractedDeps.length) {\n    return null;\n  }\n\n  elevateFileReplacePositionField(extractedDeps).forEach((dep) => {\n    const key = dep.managerData?.packageFile;\n    // istanbul ignore else\n    if (key) {\n      const pkgFile: PackageFile = packageFilesByName[key];\n      const { deps } = pkgFile;\n      deps.push({\n        ...dep,\n        registryUrls: [\n          ...new Set([\n            ...defaultRegistryUrls,\n            ...(dep.registryUrls || []),\n            ...registryUrls,\n          ]),\n        ],\n      });\n      packageFilesByName[key] = pkgFile;\n    } else {\n      logger.warn({ dep }, `Failed to process Gradle dependency`);\n    }\n  });\n\n  return Object.values(packageFilesByName);\n}\n"]}