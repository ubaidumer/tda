{"version":3,"file":"catalog.js","sourceRoot":"","sources":["../../../../../lib/manager/gradle/shallow/extract/catalog.ts"],"names":[],"mappings":"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","sourcesContent":["import { parse } from '@iarna/toml';\nimport deepmerge from 'deepmerge';\nimport { SkipReason } from '../../../../types';\nimport { hasKey } from '../../../../util/object';\nimport type { PackageDependency } from '../../../types';\nimport type { GradleManagerData } from '../../types';\nimport type {\n  GradleCatalog,\n  GradleCatalogArtifactDescriptor,\n  GradleCatalogModuleDescriptor,\n  VersionPointer,\n} from '../types';\n\nfunction findIndexAfter(\n  content: string,\n  sliceAfter: string,\n  find: string\n): number {\n  const slicePoint = content.indexOf(sliceAfter) + sliceAfter.length;\n  return slicePoint + content.slice(slicePoint).indexOf(find);\n}\n\nfunction isArtifactDescriptor(\n  obj: GradleCatalogArtifactDescriptor | GradleCatalogModuleDescriptor\n): obj is GradleCatalogArtifactDescriptor {\n  return hasKey('group', obj);\n}\n\ninterface VersionExtract {\n  currentValue?: string;\n  fileReplacePosition?: number;\n}\n\nfunction extractVersion({\n  version,\n  versions,\n  depStartIndex,\n  depSubContent,\n  depName,\n  versionStartIndex,\n  versionSubContent,\n}: {\n  version: string | VersionPointer;\n  versions: Record<string, string>;\n  depStartIndex: number;\n  depSubContent: string;\n  depName: string;\n  versionStartIndex: number;\n  versionSubContent: string;\n}): VersionExtract {\n  if (!version) {\n    return {};\n  }\n  const currentValue =\n    typeof version === 'string' ? version : versions[version.ref];\n\n  const fileReplacePosition =\n    typeof version === 'string'\n      ? depStartIndex + findIndexAfter(depSubContent, depName, currentValue)\n      : versionStartIndex +\n        findIndexAfter(versionSubContent, version.ref, currentValue);\n  return { currentValue, fileReplacePosition };\n}\n\nfunction extractDependency({\n  descriptor,\n  versions,\n  depStartIndex,\n  depSubContent,\n  depName,\n  versionStartIndex,\n  versionSubContent,\n}: {\n  descriptor:\n    | string\n    | GradleCatalogModuleDescriptor\n    | GradleCatalogArtifactDescriptor;\n  versions: Record<string, string>;\n  depStartIndex: number;\n  depSubContent: string;\n  depName: string;\n  versionStartIndex: number;\n  versionSubContent: string;\n}): PackageDependency<GradleManagerData> {\n  if (typeof descriptor === 'string') {\n    const [groupName, name, currentValue] = descriptor.split(':');\n    if (!currentValue) {\n      return {\n        depName,\n        skipReason: SkipReason.NoVersion,\n      };\n    }\n    return {\n      depName: `${groupName}:${name}`,\n      groupName,\n      currentValue,\n      managerData: {\n        fileReplacePosition:\n          depStartIndex + findIndexAfter(depSubContent, depName, currentValue),\n      },\n    };\n  }\n\n  const { currentValue, fileReplacePosition } = extractVersion({\n    version: descriptor.version,\n    versions,\n    depStartIndex,\n    depSubContent,\n    depName,\n    versionStartIndex,\n    versionSubContent,\n  });\n\n  if (!currentValue) {\n    return {\n      depName,\n      skipReason: SkipReason.NoVersion,\n    };\n  }\n\n  if (isArtifactDescriptor(descriptor)) {\n    const { group: groupName, name } = descriptor;\n    return {\n      depName: `${groupName}:${name}`,\n      groupName,\n      currentValue,\n      managerData: { fileReplacePosition },\n    };\n  }\n  const [groupName, name] = descriptor.module.split(':');\n  const dependency = {\n    depName: `${groupName}:${name}`,\n    groupName,\n    currentValue,\n    managerData: { fileReplacePosition },\n  };\n  return dependency;\n}\n\nexport function parseCatalog(\n  packageFile: string,\n  content: string\n): PackageDependency<GradleManagerData>[] {\n  const tomlContent = parse(content) as GradleCatalog;\n  const versions = tomlContent.versions || {};\n  const libs = tomlContent.libraries || {};\n  const libStartIndex = content.indexOf('libraries');\n  const libSubContent = content.slice(libStartIndex);\n  const versionStartIndex = content.indexOf('versions');\n  const versionSubContent = content.slice(versionStartIndex);\n  const extractedDeps: PackageDependency<GradleManagerData>[] = [];\n  for (const libraryName of Object.keys(libs)) {\n    const libDescriptor = libs[libraryName];\n    const dependency = extractDependency({\n      descriptor: libDescriptor,\n      versions,\n      depStartIndex: libStartIndex,\n      depSubContent: libSubContent,\n      depName: libraryName,\n      versionStartIndex,\n      versionSubContent,\n    });\n    extractedDeps.push(dependency);\n  }\n\n  const plugins = tomlContent.plugins || {};\n  const pluginsStartIndex = content.indexOf('[plugins]');\n  const pluginsSubContent = content.slice(pluginsStartIndex);\n  for (const pluginName of Object.keys(plugins)) {\n    const pluginDescriptor = plugins[pluginName];\n    const depName = pluginDescriptor.id;\n    const { currentValue, fileReplacePosition } = extractVersion({\n      version: pluginDescriptor.version,\n      versions,\n      depStartIndex: pluginsStartIndex,\n      depSubContent: pluginsSubContent,\n      depName,\n      versionStartIndex,\n      versionSubContent,\n    });\n\n    const dependency = {\n      depType: 'plugin',\n      depName,\n      lookupName: `${depName}:${depName}.gradle.plugin`,\n      registryUrls: ['https://plugins.gradle.org/m2/'],\n      currentValue,\n      commitMessageTopic: `plugin ${pluginName}`,\n      managerData: { fileReplacePosition },\n    };\n    extractedDeps.push(dependency);\n  }\n  return extractedDeps.map((dep) =>\n    deepmerge(dep, { managerData: { packageFile } })\n  );\n}\n"]}