"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractPackageFile = void 0;
const tslib_1 = require("tslib");
const is_1 = (0, tslib_1.__importDefault)(require("@sindresorhus/is"));
const js_yaml_1 = require("js-yaml");
const datasourceGitlabTags = (0, tslib_1.__importStar)(require("../../datasource/gitlab-tags"));
const logger_1 = require("../../logger");
const types_1 = require("../../types");
const regex_1 = require("../../util/regex");
const utils_1 = require("../gitlabci/utils");
function extractDepFromIncludeFile(includeObj) {
    const dep = {
        datasource: datasourceGitlabTags.id,
        depName: includeObj.project,
        depType: 'repository',
    };
    if (!includeObj.ref) {
        dep.skipReason = types_1.SkipReason.UnknownVersion;
        return dep;
    }
    dep.currentValue = includeObj.ref;
    return dep;
}
function extractPackageFile(content, _packageFile, config) {
    var _a;
    const deps = [];
    try {
        // TODO: fix me (#9610)
        const doc = (0, js_yaml_1.load)((0, utils_1.replaceReferenceTags)(content), {
            json: true,
        });
        let includes;
        if ((doc === null || doc === void 0 ? void 0 : doc.include) && is_1.default.array(doc.include)) {
            includes = doc.include;
        }
        else {
            includes = [doc.include];
        }
        for (const includeObj of includes) {
            if ((includeObj === null || includeObj === void 0 ? void 0 : includeObj.file) && includeObj.project) {
                const dep = extractDepFromIncludeFile(includeObj);
                if (config.endpoint) {
                    dep.registryUrls = [
                        config.endpoint.replace((0, regex_1.regEx)(/\/api\/v4\/?/), ''),
                    ]; // TODO #12071
                }
                deps.push(dep);
            }
        }
    }
    catch (err) /* istanbul ignore next */ {
        if ((_a = err.stack) === null || _a === void 0 ? void 0 : _a.startsWith('YAMLException:')) {
            logger_1.logger.debug({ err }, 'YAML exception extracting GitLab CI includes');
        }
        else {
            logger_1.logger.warn({ err }, 'Error extracting GitLab CI includes');
        }
    }
    if (!deps.length) {
        return null;
    }
    return { deps };
}
exports.extractPackageFile = extractPackageFile;
//# sourceMappingURL=extract.js.map