"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractPackageFile = exports.dependencyPattern = exports.packagePattern = void 0;
// based on https://www.python.org/dev/peps/pep-0508/#names
const specifier_1 = require("@renovate/pep440/lib/specifier");
const global_1 = require("../../config/global");
const pypi_1 = require("../../datasource/pypi");
const logger_1 = require("../../logger");
const types_1 = require("../../types");
const ignore_1 = require("../../util/ignore");
const regex_1 = require("../../util/regex");
exports.packagePattern = '[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9._-]*[a-zA-Z0-9]';
const extrasPattern = '(?:\\s*\\[[^\\]]+\\])?';
const rangePattern = specifier_1.RANGE_PATTERN;
const specifierPartPattern = `\\s*${rangePattern.replace((0, regex_1.regEx)(/\?<\w+>/g), '?:')}`;
const specifierPattern = `${specifierPartPattern}(?:\\s*,${specifierPartPattern})*`;
exports.dependencyPattern = `(${exports.packagePattern})(${extrasPattern})(${specifierPattern})`;
function extractPackageFile(content, _, config) {
    var _a;
    logger_1.logger.trace('pip_requirements.extractPackageFile()');
    let indexUrl;
    const extraUrls = [];
    content.split('\n').forEach((line) => {
        if (line.startsWith('--index-url ')) {
            indexUrl = line.substring('--index-url '.length).split(' ')[0];
        }
        if (line.startsWith('--extra-index-url ')) {
            const extraUrl = line
                .substring('--extra-index-url '.length)
                .split(' ')[0];
            extraUrls.push(extraUrl);
        }
    });
    let registryUrls = [];
    if (indexUrl) {
        // index url in file takes precedence
        registryUrls.push(indexUrl);
    }
    else if ((_a = config.registryUrls) === null || _a === void 0 ? void 0 : _a.length) {
        // configured registryURls takes next precedence
        registryUrls = registryUrls.concat(config.registryUrls);
    }
    else if (extraUrls.length) {
        // Use default registry first if extra URLs are present and index URL is not
        registryUrls.push(process.env.PIP_INDEX_URL || 'https://pypi.org/pypi/');
    }
    registryUrls = registryUrls.concat(extraUrls);
    const pkgRegex = (0, regex_1.regEx)(`^(${exports.packagePattern})$`);
    const pkgValRegex = (0, regex_1.regEx)(`^${exports.dependencyPattern}$`);
    const deps = content
        .split('\n')
        .map((rawline) => {
        let dep = {};
        const [line, comment] = rawline.split('#').map((part) => part.trim());
        if ((0, ignore_1.isSkipComment)(comment)) {
            dep.skipReason = types_1.SkipReason.Ignored;
        }
        const lineNoHashes = line.split(' \\')[0];
        const matches = pkgValRegex.exec(lineNoHashes) || pkgRegex.exec(lineNoHashes);
        if (!matches) {
            return null;
        }
        const [, depName, , currVal] = matches;
        const currentValue = currVal === null || currVal === void 0 ? void 0 : currVal.trim();
        dep = {
            ...dep,
            depName,
            currentValue,
            datasource: pypi_1.PypiDatasource.id,
        };
        if (currentValue === null || currentValue === void 0 ? void 0 : currentValue.startsWith('==')) {
            dep.currentVersion = currentValue.replace(/^==\s*/, '');
        }
        return dep;
    })
        .filter(Boolean);
    if (!deps.length) {
        return null;
    }
    const res = { deps };
    if (registryUrls.length > 0) {
        res.registryUrls = registryUrls.map((url) => {
            // handle the optional quotes in eg. `--extra-index-url "https://foo.bar"`
            const cleaned = url.replace((0, regex_1.regEx)(/^"/), '').replace((0, regex_1.regEx)(/"$/), ''); // TODO #12071
            if (!global_1.GlobalConfig.get('exposeAllEnv')) {
                return cleaned;
            }
            // interpolate any environment variables
            return cleaned.replace((0, regex_1.regEx)(/(\$[A-Za-z\d_]+)|(\${[A-Za-z\d_]+})/g), // TODO #12071
            (match) => {
                const envvar = match
                    .substring(1)
                    .replace((0, regex_1.regEx)(/^{/), '')
                    .replace((0, regex_1.regEx)(/}$/), ''); // TODO #12071
                const sub = process.env[envvar];
                return sub || match;
            });
        });
    }
    return res;
}
exports.extractPackageFile = extractPackageFile;
//# sourceMappingURL=extract.js.map