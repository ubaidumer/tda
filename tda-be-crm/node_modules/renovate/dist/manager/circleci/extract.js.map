{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/circleci/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { OrbDatasource } from '../../datasource/orb';\nimport { logger } from '../../logger';\nimport { regEx } from '../../util/regex';\nimport * as npmVersioning from '../../versioning/npm';\nimport { getDep } from '../dockerfile/extract';\nimport type { PackageDependency, PackageFile } from '../types';\n\nexport function extractPackageFile(content: string): PackageFile | null {\n  const deps: PackageDependency[] = [];\n  try {\n    const lines = content.split('\\n');\n    for (let lineNumber = 0; lineNumber < lines.length; lineNumber += 1) {\n      const line = lines[lineNumber];\n      const orbs = regEx(/^\\s*orbs:\\s*$/).exec(line); // TODO #12071\n      if (orbs) {\n        logger.trace(`Matched orbs on line ${lineNumber}`);\n        let foundOrbOrNoop: boolean;\n        do {\n          foundOrbOrNoop = false;\n          const orbLine = lines[lineNumber + 1];\n          logger.trace(`orbLine: \"${orbLine}\"`);\n          const yamlNoop = regEx(/^\\s*(#|$)/).exec(orbLine); // TODO #12071\n          if (yamlNoop) {\n            logger.debug('orbNoop');\n            foundOrbOrNoop = true;\n            lineNumber += 1;\n            continue;\n          }\n          const orbMatch = regEx(/^\\s+([^:]+):\\s(.+)$/).exec(orbLine); // TODO #12071\n          if (orbMatch) {\n            logger.trace('orbMatch');\n            foundOrbOrNoop = true;\n            lineNumber += 1;\n            const depName = orbMatch[1];\n            const [orbName, currentValue] = orbMatch[2].split('@');\n            const dep: PackageDependency = {\n              depType: 'orb',\n              depName,\n              currentValue,\n              datasource: OrbDatasource.id,\n              lookupName: orbName,\n              commitMessageTopic: '{{{depName}}} orb',\n              versioning: npmVersioning.id,\n              rangeStrategy: 'pin',\n            };\n            deps.push(dep);\n          }\n        } while (foundOrbOrNoop);\n      }\n      const match = regEx(/^\\s*-? image:\\s*'?\"?([^\\s'\"]+)'?\"?\\s*$/).exec(line); // TODO #12071\n      if (match) {\n        const currentFrom = match[1];\n        const dep = getDep(currentFrom);\n        logger.debug(\n          {\n            depName: dep.depName,\n            currentValue: dep.currentValue,\n            currentDigest: dep.currentDigest,\n          },\n          'CircleCI docker image'\n        );\n        dep.depType = 'docker';\n        dep.versioning = 'docker';\n        if (\n          !dep.depName?.startsWith('ubuntu-') &&\n          !dep.depName?.startsWith('windows-server-')\n        ) {\n          deps.push(dep);\n        }\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'Error extracting circleci images');\n  }\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n"]}