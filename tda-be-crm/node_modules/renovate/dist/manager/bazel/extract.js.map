{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/bazel/extract.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint no-plusplus: 0  */\nimport { parse as _parse } from 'url';\nimport parse from 'github-url-from-git';\nimport moo from 'moo';\nimport * as datasourceDocker from '../../datasource/docker';\nimport * as datasourceGithubReleases from '../../datasource/github-releases';\nimport * as datasourceGithubTags from '../../datasource/github-tags';\nimport * as datasourceGo from '../../datasource/go';\nimport { logger } from '../../logger';\nimport { SkipReason } from '../../types';\nimport { regEx } from '../../util/regex';\nimport * as dockerVersioning from '../../versioning/docker';\nimport type { PackageDependency, PackageFile } from '../types';\nimport type { UrlParsedResult } from './types';\n\nfunction parseUrl(urlString: string): UrlParsedResult | null {\n  // istanbul ignore if\n  if (!urlString) {\n    return null;\n  }\n  const url = _parse(urlString);\n  if (url.host !== 'github.com') {\n    return null;\n  }\n  const path = url.path.split('/').slice(1);\n  const repo = path[0] + '/' + path[1];\n  let datasource: string;\n  let currentValue: string = null;\n  if (path[2] === 'releases' && path[3] === 'download') {\n    datasource = datasourceGithubReleases.id;\n    currentValue = path[4];\n  }\n  if (path[2] === 'archive') {\n    datasource = datasourceGithubTags.id;\n    currentValue = path[3];\n    // Strip archive extension to get hash or tag.\n    // Tolerates formats produced by Git(Hub|Lab) and allowed by http_archive\n    // Note: Order matters in suffix list to strip, e.g. .tar.gz.\n    for (const extension of ['.gz', '.bz2', '.xz', '.tar', '.tgz', '.zip']) {\n      if (currentValue.endsWith(extension)) {\n        currentValue = currentValue.slice(0, -extension.length);\n      }\n    }\n  }\n  if (currentValue) {\n    return { datasource, repo, currentValue };\n  }\n  // istanbul ignore next\n  return null;\n}\n\nconst lexer = moo.states({\n  main: {\n    lineComment: { match: /#.*?$/ }, // TODO #12870\n    leftParen: { match: '(' },\n    rightParen: { match: ')' },\n    longDoubleQuoted: {\n      match: '\"\"\"',\n      push: 'longDoubleQuoted',\n    },\n    doubleQuoted: {\n      match: '\"',\n      push: 'doubleQuoted',\n    },\n    longSingleQuoted: {\n      match: \"'''\",\n      push: 'longSingleQuoted',\n    },\n    singleQuoted: {\n      match: \"'\",\n      push: 'singleQuoted',\n    },\n    def: {\n      match: new RegExp(\n        [\n          'container_pull',\n          'http_archive',\n          'http_file',\n          'go_repository',\n          'git_repository',\n        ].join('|')\n      ),\n    },\n    unknown: moo.fallback,\n  },\n  longDoubleQuoted: {\n    stringFinish: { match: '\"\"\"', pop: 1 },\n    char: moo.fallback,\n  },\n  doubleQuoted: {\n    stringFinish: { match: '\"', pop: 1 },\n    char: moo.fallback,\n  },\n  longSingleQuoted: {\n    stringFinish: { match: \"'''\", pop: 1 },\n    char: moo.fallback,\n  },\n  singleQuoted: {\n    stringFinish: { match: \"'\", pop: 1 },\n    char: moo.fallback,\n  },\n});\n\nfunction parseContent(content: string): string[] {\n  lexer.reset(content);\n\n  let balance = 0;\n\n  let def: null | string = null;\n  const result: string[] = [];\n\n  const finishDef = (): void => {\n    if (def !== null) {\n      result.push(def);\n    }\n    def = null;\n  };\n\n  const startDef = (): void => {\n    finishDef();\n    def = '';\n  };\n\n  const updateDef = (chunk: string): void => {\n    if (def !== null) {\n      def += chunk;\n    }\n  };\n\n  let token = lexer.next();\n  while (token) {\n    const { type, value } = token;\n\n    if (type === 'def') {\n      startDef();\n    }\n\n    updateDef(value);\n\n    if (type === 'leftParen') {\n      balance += 1;\n    }\n\n    if (type === 'rightParen') {\n      balance -= 1;\n      if (balance <= 0) {\n        finishDef();\n      }\n    }\n\n    token = lexer.next();\n  }\n\n  return result;\n}\n\nexport function extractPackageFile(\n  content: string,\n  fileName?: string\n): PackageFile | null {\n  const definitions = parseContent(content);\n  if (!definitions.length) {\n    logger.debug({ fileName }, 'No matching bazel WORKSPACE definitions found');\n    return null;\n  }\n  logger.debug({ definitions }, `Found ${definitions.length} definitions`);\n  const deps: PackageDependency[] = [];\n  definitions.forEach((def) => {\n    logger.debug({ def }, 'Checking bazel definition');\n    const [depType] = def.split('(', 1);\n    const dep: PackageDependency = { depType, managerData: { def } };\n    let depName: string;\n    let importpath: string;\n    let remote: string;\n    let currentValue: string;\n    let commit: string;\n    let url: string;\n    let sha256: string;\n    let digest: string;\n    let repository: string;\n    let registry: string;\n    let match = regEx(/name\\s*=\\s*\"([^\"]+)\"/).exec(def);\n    if (match) {\n      [, depName] = match;\n    }\n    match = regEx(/digest\\s*=\\s*\"([^\"]+)\"/).exec(def);\n    if (match) {\n      [, digest] = match;\n    }\n    match = regEx(/registry\\s*=\\s*\"([^\"]+)\"/).exec(def);\n    if (match) {\n      [, registry] = match;\n    }\n    match = regEx(/repository\\s*=\\s*\"([^\"]+)\"/).exec(def);\n    if (match) {\n      [, repository] = match;\n    }\n    match = regEx(/remote\\s*=\\s*\"([^\"]+)\"/).exec(def);\n    if (match) {\n      [, remote] = match;\n    }\n    match = regEx(/tag\\s*=\\s*\"([^\"]+)\"/).exec(def);\n    if (match) {\n      [, currentValue] = match;\n    }\n    match = regEx(/url\\s*=\\s*\"([^\"]+)\"/).exec(def);\n    if (match) {\n      [, url] = match;\n    }\n    match = regEx(/urls\\s*=\\s*\\[\\s*\"([^\\]]+)\",?\\s*\\]/).exec(def);\n    if (match) {\n      const urls = match[1].replace(regEx(/\\s/g), '').split('\",\"');\n      url = urls.find(parseUrl);\n    }\n    match = regEx(/commit\\s*=\\s*\"([^\"]+)\"/).exec(def);\n    if (match) {\n      [, commit] = match;\n    }\n    match = regEx(/sha256\\s*=\\s*\"([^\"]+)\"/).exec(def);\n    if (match) {\n      [, sha256] = match;\n    }\n    match = regEx(/importpath\\s*=\\s*\"([^\"]+)\"/).exec(def);\n    if (match) {\n      [, importpath] = match;\n    }\n    logger.debug({ dependency: depName, remote, currentValue });\n    if (\n      depType === 'git_repository' &&\n      depName &&\n      remote &&\n      (currentValue || commit)\n    ) {\n      dep.depName = depName;\n      if (currentValue) {\n        dep.currentValue = currentValue;\n      }\n      if (commit) {\n        dep.currentDigest = commit;\n      }\n      // TODO: Check if we really need to use parse here or if it should always be a plain https url (#9605)\n      const githubURL = parse(remote);\n      if (githubURL) {\n        const repo = githubURL.substring('https://github.com/'.length);\n        dep.datasource = datasourceGithubReleases.id;\n        dep.lookupName = repo;\n        deps.push(dep);\n      }\n    } else if (\n      depType === 'go_repository' &&\n      depName &&\n      importpath &&\n      (currentValue || commit)\n    ) {\n      dep.depName = depName;\n      dep.currentValue = currentValue || commit.substr(0, 7);\n      dep.datasource = datasourceGo.id;\n      dep.lookupName = importpath;\n      if (remote) {\n        const remoteMatch = regEx(\n          /https:\\/\\/github\\.com(?:.*\\/)(([a-zA-Z]+)([-])?([a-zA-Z]+))/\n        ).exec(remote);\n        if (remoteMatch && remoteMatch[0].length === remote.length) {\n          dep.lookupName = remote.replace('https://', '');\n        } else {\n          dep.skipReason = SkipReason.UnsupportedRemote;\n        }\n      }\n      if (commit) {\n        dep.currentValue = 'v0.0.0';\n        dep.currentDigest = commit;\n        dep.currentDigestShort = commit.substr(0, 7);\n        dep.digestOneAndOnly = true;\n      }\n      deps.push(dep);\n    } else if (\n      (depType === 'http_archive' || depType === 'http_file') &&\n      depName &&\n      parseUrl(url) &&\n      sha256\n    ) {\n      const parsedUrl = parseUrl(url);\n      dep.depName = depName;\n      dep.repo = parsedUrl.repo;\n      if (regEx(/^[a-f0-9]{40}$/i).test(parsedUrl.currentValue)) {\n        dep.currentDigest = parsedUrl.currentValue;\n      } else {\n        dep.currentValue = parsedUrl.currentValue;\n      }\n      dep.datasource = parsedUrl.datasource;\n      dep.lookupName = dep.repo;\n      deps.push(dep);\n    } else if (\n      depType === 'container_pull' &&\n      currentValue &&\n      digest &&\n      repository &&\n      registry\n    ) {\n      dep.currentDigest = digest;\n      dep.currentValue = currentValue;\n      dep.depName = depName;\n      dep.versioning = dockerVersioning.id;\n      dep.datasource = datasourceDocker.id;\n      dep.lookupName = repository;\n      dep.registryUrls = [registry];\n      deps.push(dep);\n    } else {\n      logger.debug(\n        { def },\n        'Failed to find dependency in bazel WORKSPACE definition'\n      );\n    }\n  });\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n"]}