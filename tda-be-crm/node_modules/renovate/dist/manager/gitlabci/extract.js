"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractAllPackageFiles = exports.extractPackageFile = void 0;
const tslib_1 = require("tslib");
const is_1 = (0, tslib_1.__importDefault)(require("@sindresorhus/is"));
const js_yaml_1 = require("js-yaml");
const logger_1 = require("../../logger");
const fs_1 = require("../../util/fs");
const regex_1 = require("../../util/regex");
const extract_1 = require("../dockerfile/extract");
const utils_1 = require("./utils");
const commentsRe = (0, regex_1.regEx)(/^\s*#/);
const whitespaceRe = (0, regex_1.regEx)(`^(?<whitespace>\\s*)`);
const imageRe = (0, regex_1.regEx)(`^(?<whitespace>\\s*)image:(?:\\s+['"]?(?<image>[^\\s'"]+)['"]?)?\\s*$`);
const nameRe = (0, regex_1.regEx)(`^\\s*name:\\s+['"]?(?<depName>[^\\s'"]+)['"]?\\s*$`);
const serviceRe = (0, regex_1.regEx)(`^\\s*-\\s*(?:name:\\s+)?['"]?(?<depName>[^\\s'"]+)['"]?\\s*$`);
function skipCommentLines(lines, lineNumber) {
    let ln = lineNumber;
    while (ln < lines.length - 1 && commentsRe.test(lines[ln])) {
        ln += 1;
    }
    return { line: lines[ln], lineNumber: ln };
}
function extractPackageFile(content) {
    var _a;
    const deps = [];
    try {
        const lines = content.split('\n');
        for (let lineNumber = 0; lineNumber < lines.length; lineNumber += 1) {
            const line = lines[lineNumber];
            const imageMatch = imageRe.exec(line);
            if (imageMatch) {
                switch (imageMatch.groups.image) {
                    case undefined:
                    case '': {
                        let blockLine;
                        do {
                            lineNumber += 1;
                            blockLine = lines[lineNumber];
                            const imageNameMatch = nameRe.exec(blockLine);
                            if (imageNameMatch) {
                                logger_1.logger.trace(`Matched image name on line ${lineNumber}`);
                                const dep = (0, extract_1.getDep)(imageNameMatch.groups.depName);
                                dep.depType = 'image-name';
                                deps.push(dep);
                                break;
                            }
                        } while (((_a = whitespaceRe.exec(blockLine)) === null || _a === void 0 ? void 0 : _a.groups.whitespace.length) >
                            imageMatch.groups.whitespace.length);
                        break;
                    }
                    default: {
                        logger_1.logger.trace(`Matched image on line ${lineNumber}`);
                        const dep = (0, extract_1.getDep)(imageMatch.groups.image);
                        dep.depType = 'image';
                        deps.push(dep);
                    }
                }
            }
            const services = (0, regex_1.regEx)(/^\s*services:\s*$/).test(line); // TODO #12071
            if (services) {
                logger_1.logger.trace(`Matched services on line ${lineNumber}`);
                let foundImage;
                do {
                    foundImage = false;
                    const serviceImageLine = skipCommentLines(lines, lineNumber + 1);
                    logger_1.logger.trace(`serviceImageLine: "${serviceImageLine.line}"`);
                    const serviceImageMatch = serviceRe.exec(serviceImageLine.line);
                    if (serviceImageMatch) {
                        logger_1.logger.trace('serviceImageMatch');
                        foundImage = true;
                        lineNumber = serviceImageLine.lineNumber;
                        const dep = (0, extract_1.getDep)(serviceImageMatch.groups.depName);
                        dep.depType = 'service-image';
                        deps.push(dep);
                    }
                } while (foundImage);
            }
        }
    }
    catch (err) /* istanbul ignore next */ {
        logger_1.logger.warn({ err }, 'Error extracting GitLab CI dependencies');
    }
    if (!deps.length) {
        return null;
    }
    return { deps };
}
exports.extractPackageFile = extractPackageFile;
async function extractAllPackageFiles(_config, packageFiles) {
    const filesToExamine = [...packageFiles];
    const seen = new Set(packageFiles);
    const results = [];
    // extract all includes from the files
    while (filesToExamine.length > 0) {
        const file = filesToExamine.pop();
        const content = await (0, fs_1.readLocalFile)(file, 'utf8');
        if (!content) {
            logger_1.logger.debug({ file }, 'Empty or non existent gitlabci file');
            continue;
        }
        let doc;
        try {
            doc = (0, js_yaml_1.load)((0, utils_1.replaceReferenceTags)(content), {
                json: true,
            });
        }
        catch (err) {
            logger_1.logger.warn({ err, file }, 'Error extracting GitLab CI dependencies');
        }
        if (is_1.default.array(doc === null || doc === void 0 ? void 0 : doc.include)) {
            for (const includeObj of doc.include) {
                if (is_1.default.string(includeObj.local)) {
                    const fileObj = includeObj.local.replace((0, regex_1.regEx)(/^\//), '');
                    if (!seen.has(fileObj)) {
                        seen.add(fileObj);
                        filesToExamine.push(fileObj);
                    }
                }
            }
        }
        else if (is_1.default.string(doc === null || doc === void 0 ? void 0 : doc.include)) {
            const fileObj = doc.include.replace((0, regex_1.regEx)(/^\//), '');
            if (!seen.has(fileObj)) {
                seen.add(fileObj);
                filesToExamine.push(fileObj);
            }
        }
        const result = extractPackageFile(content);
        if (result !== null) {
            results.push({
                packageFile: file,
                deps: result.deps,
            });
        }
    }
    logger_1.logger.trace({ packageFiles, files: filesToExamine.entries() }, 'extracted all GitLab CI files');
    if (!results.length) {
        return null;
    }
    return results;
}
exports.extractAllPackageFiles = extractAllPackageFiles;
//# sourceMappingURL=extract.js.map