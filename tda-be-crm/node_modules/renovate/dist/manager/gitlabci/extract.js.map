{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/gitlabci/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { load } from 'js-yaml';\nimport { logger } from '../../logger';\nimport { readLocalFile } from '../../util/fs';\nimport { regEx } from '../../util/regex';\nimport { getDep } from '../dockerfile/extract';\nimport type { ExtractConfig, PackageDependency, PackageFile } from '../types';\nimport type { GitlabPipeline } from './types';\nimport { replaceReferenceTags } from './utils';\n\nconst commentsRe = regEx(/^\\s*#/);\nconst whitespaceRe = regEx(`^(?<whitespace>\\\\s*)`);\nconst imageRe = regEx(\n  `^(?<whitespace>\\\\s*)image:(?:\\\\s+['\"]?(?<image>[^\\\\s'\"]+)['\"]?)?\\\\s*$`\n);\nconst nameRe = regEx(`^\\\\s*name:\\\\s+['\"]?(?<depName>[^\\\\s'\"]+)['\"]?\\\\s*$`);\nconst serviceRe = regEx(\n  `^\\\\s*-\\\\s*(?:name:\\\\s+)?['\"]?(?<depName>[^\\\\s'\"]+)['\"]?\\\\s*$`\n);\nfunction skipCommentLines(\n  lines: string[],\n  lineNumber: number\n): { lineNumber: number; line: string } {\n  let ln = lineNumber;\n  while (ln < lines.length - 1 && commentsRe.test(lines[ln])) {\n    ln += 1;\n  }\n  return { line: lines[ln], lineNumber: ln };\n}\n\nexport function extractPackageFile(content: string): PackageFile | null {\n  const deps: PackageDependency[] = [];\n  try {\n    const lines = content.split('\\n');\n    for (let lineNumber = 0; lineNumber < lines.length; lineNumber += 1) {\n      const line = lines[lineNumber];\n      const imageMatch = imageRe.exec(line);\n      if (imageMatch) {\n        switch (imageMatch.groups.image) {\n          case undefined:\n          case '': {\n            let blockLine;\n            do {\n              lineNumber += 1;\n              blockLine = lines[lineNumber];\n              const imageNameMatch = nameRe.exec(blockLine);\n              if (imageNameMatch) {\n                logger.trace(`Matched image name on line ${lineNumber}`);\n                const dep = getDep(imageNameMatch.groups.depName);\n                dep.depType = 'image-name';\n                deps.push(dep);\n                break;\n              }\n            } while (\n              whitespaceRe.exec(blockLine)?.groups.whitespace.length >\n              imageMatch.groups.whitespace.length\n            );\n            break;\n          }\n          default: {\n            logger.trace(`Matched image on line ${lineNumber}`);\n            const dep = getDep(imageMatch.groups.image);\n            dep.depType = 'image';\n            deps.push(dep);\n          }\n        }\n      }\n      const services = regEx(/^\\s*services:\\s*$/).test(line); // TODO #12071\n      if (services) {\n        logger.trace(`Matched services on line ${lineNumber}`);\n        let foundImage: boolean;\n        do {\n          foundImage = false;\n          const serviceImageLine = skipCommentLines(lines, lineNumber + 1);\n          logger.trace(`serviceImageLine: \"${serviceImageLine.line}\"`);\n          const serviceImageMatch = serviceRe.exec(serviceImageLine.line);\n          if (serviceImageMatch) {\n            logger.trace('serviceImageMatch');\n            foundImage = true;\n            lineNumber = serviceImageLine.lineNumber;\n            const dep = getDep(serviceImageMatch.groups.depName);\n            dep.depType = 'service-image';\n            deps.push(dep);\n          }\n        } while (foundImage);\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'Error extracting GitLab CI dependencies');\n  }\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n\nexport async function extractAllPackageFiles(\n  _config: ExtractConfig,\n  packageFiles: string[]\n): Promise<PackageFile[] | null> {\n  const filesToExamine = [...packageFiles];\n  const seen = new Set<string>(packageFiles);\n  const results: PackageFile[] = [];\n\n  // extract all includes from the files\n  while (filesToExamine.length > 0) {\n    const file = filesToExamine.pop();\n\n    const content = await readLocalFile(file, 'utf8');\n    if (!content) {\n      logger.debug({ file }, 'Empty or non existent gitlabci file');\n\n      continue;\n    }\n    let doc: GitlabPipeline;\n    try {\n      doc = load(replaceReferenceTags(content), {\n        json: true,\n      }) as GitlabPipeline;\n    } catch (err) {\n      logger.warn({ err, file }, 'Error extracting GitLab CI dependencies');\n    }\n\n    if (is.array(doc?.include)) {\n      for (const includeObj of doc.include) {\n        if (is.string(includeObj.local)) {\n          const fileObj = includeObj.local.replace(regEx(/^\\//), '');\n          if (!seen.has(fileObj)) {\n            seen.add(fileObj);\n            filesToExamine.push(fileObj);\n          }\n        }\n      }\n    } else if (is.string(doc?.include)) {\n      const fileObj = doc.include.replace(regEx(/^\\//), '');\n      if (!seen.has(fileObj)) {\n        seen.add(fileObj);\n        filesToExamine.push(fileObj);\n      }\n    }\n\n    const result = extractPackageFile(content);\n    if (result !== null) {\n      results.push({\n        packageFile: file,\n        deps: result.deps,\n      });\n    }\n  }\n\n  logger.trace(\n    { packageFiles, files: filesToExamine.entries() },\n    'extracted all GitLab CI files'\n  );\n\n  if (!results.length) {\n    return null;\n  }\n\n  return results;\n}\n"]}