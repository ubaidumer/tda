"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractPackageFile = void 0;
const tslib_1 = require("tslib");
const toml_1 = require("@iarna/toml");
const is_1 = (0, tslib_1.__importDefault)(require("@sindresorhus/is"));
const pypi_1 = require("../../datasource/pypi");
const logger_1 = require("../../logger");
const types_1 = require("../../types");
const fs_1 = require("../../util/fs");
const pep440Versioning = (0, tslib_1.__importStar)(require("../../versioning/pep440"));
const poetryVersioning = (0, tslib_1.__importStar)(require("../../versioning/poetry"));
function extractFromSection(parsedFile, section, poetryLockfile) {
    const deps = [];
    const sectionContent = parsedFile.tool.poetry[section];
    if (!sectionContent) {
        return [];
    }
    Object.keys(sectionContent).forEach((depName) => {
        if (depName === 'python') {
            return;
        }
        let skipReason;
        let currentValue = sectionContent[depName];
        let nestedVersion = false;
        if (typeof currentValue !== 'string') {
            const version = currentValue.version;
            const path = currentValue.path;
            const git = currentValue.git;
            if (version) {
                currentValue = version;
                nestedVersion = true;
                if (path) {
                    skipReason = types_1.SkipReason.PathDependency;
                }
                if (git) {
                    skipReason = types_1.SkipReason.GitDependency;
                }
            }
            else if (path) {
                currentValue = '';
                skipReason = types_1.SkipReason.PathDependency;
            }
            else if (git) {
                currentValue = '';
                skipReason = types_1.SkipReason.GitDependency;
            }
            else {
                currentValue = '';
                skipReason = types_1.SkipReason.MultipleConstraintDep;
            }
        }
        const dep = {
            depName,
            depType: section,
            currentValue: currentValue,
            managerData: { nestedVersion },
            datasource: pypi_1.PypiDatasource.id,
        };
        if (dep.depName in poetryLockfile) {
            dep.lockedVersion = poetryLockfile[dep.depName].version;
        }
        if (skipReason) {
            dep.skipReason = skipReason;
        }
        else if (pep440Versioning.isValid(dep.currentValue)) {
            dep.versioning = pep440Versioning.id;
        }
        else if (poetryVersioning.isValid(dep.currentValue)) {
            dep.versioning = poetryVersioning.id;
        }
        else {
            dep.skipReason = types_1.SkipReason.UnknownVersion;
        }
        deps.push(dep);
    });
    return deps;
}
function extractRegistries(pyprojectfile) {
    var _a, _b;
    const sources = (_b = (_a = pyprojectfile.tool) === null || _a === void 0 ? void 0 : _a.poetry) === null || _b === void 0 ? void 0 : _b.source;
    if (!Array.isArray(sources) || sources.length === 0) {
        return null;
    }
    const registryUrls = new Set();
    for (const source of sources) {
        if (source.url) {
            registryUrls.add(source.url);
        }
    }
    registryUrls.add(process.env.PIP_INDEX_URL || 'https://pypi.org/pypi/');
    return Array.from(registryUrls);
}
async function extractPackageFile(content, fileName) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    logger_1.logger.trace(`poetry.extractPackageFile(${fileName})`);
    let pyprojectfile;
    try {
        pyprojectfile = (0, toml_1.parse)(content);
    }
    catch (err) {
        logger_1.logger.debug({ err }, 'Error parsing pyproject.toml file');
        return null;
    }
    if (!((_a = pyprojectfile.tool) === null || _a === void 0 ? void 0 : _a.poetry)) {
        logger_1.logger.debug(`${fileName} contains no poetry section`);
        return null;
    }
    // handle the lockfile
    const lockfileName = (0, fs_1.getSiblingFileName)(fileName, 'poetry.lock');
    const lockContents = await (0, fs_1.readLocalFile)(lockfileName, 'utf8');
    let poetryLockfile;
    try {
        poetryLockfile = (0, toml_1.parse)(lockContents);
    }
    catch (err) {
        logger_1.logger.debug({ err }, 'Error parsing pyproject.toml file');
    }
    const lockfileMapping = {};
    if (poetryLockfile === null || poetryLockfile === void 0 ? void 0 : poetryLockfile.package) {
        // Create a package->PoetryLockSection mapping
        for (const poetryPackage of poetryLockfile.package) {
            lockfileMapping[poetryPackage.name] = poetryPackage;
        }
    }
    const deps = [
        ...extractFromSection(pyprojectfile, 'dependencies', lockfileMapping),
        ...extractFromSection(pyprojectfile, 'dev-dependencies', lockfileMapping),
        ...extractFromSection(pyprojectfile, 'extras', lockfileMapping),
    ];
    if (!deps.length) {
        return null;
    }
    const constraints = {};
    // https://python-poetry.org/docs/pyproject/#poetry-and-pep-517
    if (((_b = pyprojectfile['build-system']) === null || _b === void 0 ? void 0 : _b['build-backend']) === 'poetry.masonry.api') {
        constraints.poetry = (_c = pyprojectfile['build-system']) === null || _c === void 0 ? void 0 : _c.requires.join(' ');
    }
    if (is_1.default.nonEmptyString((_f = (_e = (_d = pyprojectfile.tool) === null || _d === void 0 ? void 0 : _d.poetry) === null || _e === void 0 ? void 0 : _e.dependencies) === null || _f === void 0 ? void 0 : _f.python)) {
        constraints.python = (_j = (_h = (_g = pyprojectfile.tool) === null || _g === void 0 ? void 0 : _g.poetry) === null || _h === void 0 ? void 0 : _h.dependencies) === null || _j === void 0 ? void 0 : _j.python;
    }
    const res = {
        deps,
        registryUrls: extractRegistries(pyprojectfile),
        constraints,
    };
    // Try poetry.lock first
    let lockFile = (0, fs_1.getSiblingFileName)(fileName, 'poetry.lock');
    // istanbul ignore next
    if (await (0, fs_1.localPathExists)(lockFile)) {
        res.lockFiles = [lockFile];
    }
    else {
        // Try pyproject.lock next
        lockFile = (0, fs_1.getSiblingFileName)(fileName, 'pyproject.lock');
        if (await (0, fs_1.localPathExists)(lockFile)) {
            res.lockFiles = [lockFile];
        }
    }
    return res;
}
exports.extractPackageFile = extractPackageFile;
//# sourceMappingURL=extract.js.map