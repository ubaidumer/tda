{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../lib/manager/poetry/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import { parse } from '@iarna/toml';\nimport is from '@sindresorhus/is';\nimport { quote } from 'shlex';\nimport { TEMPORARY_ERROR } from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { ExecOptions, exec } from '../../util/exec';\nimport {\n  deleteLocalFile,\n  getSiblingFileName,\n  readLocalFile,\n  writeLocalFile,\n} from '../../util/fs';\nimport { find } from '../../util/host-rules';\nimport type {\n  UpdateArtifact,\n  UpdateArtifactsConfig,\n  UpdateArtifactsResult,\n} from '../types';\nimport type { PoetryFile, PoetrySource } from './types';\n\nfunction getPythonConstraint(\n  existingLockFileContent: string,\n  config: UpdateArtifactsConfig\n): string | undefined | null {\n  const { constraints = {} } = config;\n  const { python } = constraints;\n\n  if (python) {\n    logger.debug('Using python constraint from config');\n    return python;\n  }\n  try {\n    const data = parse(existingLockFileContent);\n    if (data?.metadata?.['python-versions']) {\n      return data?.metadata?.['python-versions'];\n    }\n  } catch (err) {\n    // Do nothing\n  }\n  return undefined;\n}\n\nfunction getPoetrySources(content: string, fileName: string): PoetrySource[] {\n  let pyprojectFile: PoetryFile;\n  try {\n    pyprojectFile = parse(content);\n  } catch (err) {\n    logger.debug({ err }, 'Error parsing pyproject.toml file');\n    return [];\n  }\n  if (!pyprojectFile.tool?.poetry) {\n    logger.debug(`{$fileName} contains no poetry section`);\n    return [];\n  }\n\n  const sources = pyprojectFile.tool?.poetry?.source || [];\n  const sourceArray: PoetrySource[] = [];\n  for (const source of sources) {\n    if (source.name && source.url) {\n      sourceArray.push({ name: source.name, url: source.url });\n    }\n  }\n  return sourceArray;\n}\n\nfunction getSourceCredentialVars(\n  pyprojectContent: string,\n  packageFileName: string\n): Record<string, string> {\n  const poetrySources = getPoetrySources(pyprojectContent, packageFileName);\n  const envVars: Record<string, string> = {};\n\n  for (const source of poetrySources) {\n    const matchingHostRule = find({ url: source.url });\n    const formattedSourceName = source.name.toUpperCase();\n    if (matchingHostRule.username) {\n      envVars[`POETRY_HTTP_BASIC_${formattedSourceName}_USERNAME`] =\n        matchingHostRule.username;\n    }\n    if (matchingHostRule.password) {\n      envVars[`POETRY_HTTP_BASIC_${formattedSourceName}_PASSWORD`] =\n        matchingHostRule.password;\n    }\n  }\n  return envVars;\n}\nexport async function updateArtifacts({\n  packageFileName,\n  updatedDeps,\n  newPackageFileContent,\n  config,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  logger.debug(`poetry.updateArtifacts(${packageFileName})`);\n  const isLockFileMaintenance = config.updateType === 'lockFileMaintenance';\n\n  if (!is.nonEmptyArray(updatedDeps) && !isLockFileMaintenance) {\n    logger.debug('No updated poetry deps - returning null');\n    return null;\n  }\n  // Try poetry.lock first\n  let lockFileName = getSiblingFileName(packageFileName, 'poetry.lock');\n  let existingLockFileContent = await readLocalFile(lockFileName, 'utf8');\n  if (!existingLockFileContent) {\n    // Try pyproject.lock next\n    lockFileName = getSiblingFileName(packageFileName, 'pyproject.lock');\n    existingLockFileContent = await readLocalFile(lockFileName, 'utf8');\n    if (!existingLockFileContent) {\n      logger.debug(`No lock file found`);\n      return null;\n    }\n  }\n  logger.debug(`Updating ${lockFileName}`);\n  try {\n    await writeLocalFile(packageFileName, newPackageFileContent);\n    const cmd: string[] = [];\n    if (isLockFileMaintenance) {\n      await deleteLocalFile(lockFileName);\n      cmd.push('poetry update --lock --no-interaction');\n    } else {\n      cmd.push(\n        `poetry update --lock --no-interaction ${updatedDeps\n          .map((dep) => quote(dep.depName))\n          .join(' ')}`\n      );\n    }\n    const tagConstraint = getPythonConstraint(existingLockFileContent, config);\n    const poetryRequirement = config.constraints?.poetry || 'poetry';\n    const poetryInstall =\n      'pip install ' + poetryRequirement.split(' ').map(quote).join(' ');\n    const extraEnv = getSourceCredentialVars(\n      newPackageFileContent,\n      packageFileName\n    );\n\n    const execOptions: ExecOptions = {\n      cwdFile: packageFileName,\n      extraEnv,\n      docker: {\n        image: 'python',\n        tagConstraint,\n        tagScheme: 'poetry',\n        preCommands: [poetryInstall],\n      },\n    };\n    await exec(cmd, execOptions);\n    const newPoetryLockContent = await readLocalFile(lockFileName, 'utf8');\n    if (existingLockFileContent === newPoetryLockContent) {\n      logger.debug(`${lockFileName} is unchanged`);\n      return null;\n    }\n    logger.debug(`Returning updated ${lockFileName}`);\n    return [\n      {\n        file: {\n          name: lockFileName,\n          contents: newPoetryLockContent,\n        },\n      },\n    ];\n  } catch (err) {\n    // istanbul ignore if\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n    logger.debug({ err }, `Failed to update ${lockFileName} file`);\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: `${String(err.stdout)}\\n${String(err.stderr)}`,\n        },\n      },\n    ];\n  }\n}\n"]}