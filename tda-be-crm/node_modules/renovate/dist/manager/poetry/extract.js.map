{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/poetry/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { parse } from '@iarna/toml';\nimport is from '@sindresorhus/is';\nimport { PypiDatasource } from '../../datasource/pypi';\nimport { logger } from '../../logger';\nimport { SkipReason } from '../../types';\nimport {\n  getSiblingFileName,\n  localPathExists,\n  readLocalFile,\n} from '../../util/fs';\nimport * as pep440Versioning from '../../versioning/pep440';\nimport * as poetryVersioning from '../../versioning/poetry';\nimport type { PackageDependency, PackageFile } from '../types';\nimport type {\n  PoetryFile,\n  PoetryLock,\n  PoetryLockSection,\n  PoetrySection,\n} from './types';\n\nfunction extractFromSection(\n  parsedFile: PoetryFile,\n  section: keyof PoetrySection,\n  poetryLockfile: Record<string, PoetryLockSection>\n): PackageDependency[] {\n  const deps = [];\n  const sectionContent = parsedFile.tool.poetry[section];\n  if (!sectionContent) {\n    return [];\n  }\n\n  Object.keys(sectionContent).forEach((depName) => {\n    if (depName === 'python') {\n      return;\n    }\n    let skipReason: SkipReason;\n    let currentValue = sectionContent[depName];\n    let nestedVersion = false;\n    if (typeof currentValue !== 'string') {\n      const version = currentValue.version;\n      const path = currentValue.path;\n      const git = currentValue.git;\n      if (version) {\n        currentValue = version;\n        nestedVersion = true;\n        if (path) {\n          skipReason = SkipReason.PathDependency;\n        }\n        if (git) {\n          skipReason = SkipReason.GitDependency;\n        }\n      } else if (path) {\n        currentValue = '';\n        skipReason = SkipReason.PathDependency;\n      } else if (git) {\n        currentValue = '';\n        skipReason = SkipReason.GitDependency;\n      } else {\n        currentValue = '';\n        skipReason = SkipReason.MultipleConstraintDep;\n      }\n    }\n    const dep: PackageDependency = {\n      depName,\n      depType: section,\n      currentValue: currentValue as string,\n      managerData: { nestedVersion },\n      datasource: PypiDatasource.id,\n    };\n    if (dep.depName in poetryLockfile) {\n      dep.lockedVersion = poetryLockfile[dep.depName].version;\n    }\n    if (skipReason) {\n      dep.skipReason = skipReason;\n    } else if (pep440Versioning.isValid(dep.currentValue)) {\n      dep.versioning = pep440Versioning.id;\n    } else if (poetryVersioning.isValid(dep.currentValue)) {\n      dep.versioning = poetryVersioning.id;\n    } else {\n      dep.skipReason = SkipReason.UnknownVersion;\n    }\n    deps.push(dep);\n  });\n  return deps;\n}\n\nfunction extractRegistries(pyprojectfile: PoetryFile): string[] {\n  const sources = pyprojectfile.tool?.poetry?.source;\n\n  if (!Array.isArray(sources) || sources.length === 0) {\n    return null;\n  }\n\n  const registryUrls = new Set<string>();\n  for (const source of sources) {\n    if (source.url) {\n      registryUrls.add(source.url);\n    }\n  }\n  registryUrls.add(process.env.PIP_INDEX_URL || 'https://pypi.org/pypi/');\n\n  return Array.from(registryUrls);\n}\n\nexport async function extractPackageFile(\n  content: string,\n  fileName: string\n): Promise<PackageFile | null> {\n  logger.trace(`poetry.extractPackageFile(${fileName})`);\n  let pyprojectfile: PoetryFile;\n  try {\n    pyprojectfile = parse(content);\n  } catch (err) {\n    logger.debug({ err }, 'Error parsing pyproject.toml file');\n    return null;\n  }\n  if (!pyprojectfile.tool?.poetry) {\n    logger.debug(`${fileName} contains no poetry section`);\n    return null;\n  }\n\n  // handle the lockfile\n  const lockfileName = getSiblingFileName(fileName, 'poetry.lock');\n  const lockContents = await readLocalFile(lockfileName, 'utf8');\n\n  let poetryLockfile: PoetryLock;\n  try {\n    poetryLockfile = parse(lockContents);\n  } catch (err) {\n    logger.debug({ err }, 'Error parsing pyproject.toml file');\n  }\n\n  const lockfileMapping: Record<string, PoetryLockSection> = {};\n  if (poetryLockfile?.package) {\n    // Create a package->PoetryLockSection mapping\n    for (const poetryPackage of poetryLockfile.package) {\n      lockfileMapping[poetryPackage.name] = poetryPackage;\n    }\n  }\n\n  const deps = [\n    ...extractFromSection(pyprojectfile, 'dependencies', lockfileMapping),\n    ...extractFromSection(pyprojectfile, 'dev-dependencies', lockfileMapping),\n    ...extractFromSection(pyprojectfile, 'extras', lockfileMapping),\n  ];\n  if (!deps.length) {\n    return null;\n  }\n\n  const constraints: Record<string, any> = {};\n\n  // https://python-poetry.org/docs/pyproject/#poetry-and-pep-517\n  if (\n    pyprojectfile['build-system']?.['build-backend'] === 'poetry.masonry.api'\n  ) {\n    constraints.poetry = pyprojectfile['build-system']?.requires.join(' ');\n  }\n\n  if (is.nonEmptyString(pyprojectfile.tool?.poetry?.dependencies?.python)) {\n    constraints.python = pyprojectfile.tool?.poetry?.dependencies?.python;\n  }\n\n  const res: PackageFile = {\n    deps,\n    registryUrls: extractRegistries(pyprojectfile),\n    constraints,\n  };\n  // Try poetry.lock first\n  let lockFile = getSiblingFileName(fileName, 'poetry.lock');\n  // istanbul ignore next\n  if (await localPathExists(lockFile)) {\n    res.lockFiles = [lockFile];\n  } else {\n    // Try pyproject.lock next\n    lockFile = getSiblingFileName(fileName, 'pyproject.lock');\n    if (await localPathExists(lockFile)) {\n      res.lockFiles = [lockFile];\n    }\n  }\n  return res;\n}\n"]}