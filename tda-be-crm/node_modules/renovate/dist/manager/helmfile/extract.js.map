{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/helmfile/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { loadAll } from 'js-yaml';\nimport { HelmDatasource } from '../../datasource/helm';\nimport { logger } from '../../logger';\nimport { SkipReason } from '../../types';\nimport { regEx } from '../../util/regex';\nimport type { ExtractConfig, PackageDependency, PackageFile } from '../types';\nimport type { Doc } from './types';\n\nconst isValidChartName = (name: string): boolean =>\n  !regEx(/[!@#$%^&*(),.?\":{}/|<>A-Z]/).test(name);\n\nexport function extractPackageFile(\n  content: string,\n  fileName: string,\n  config: ExtractConfig\n): PackageFile {\n  let deps = [];\n  let docs: Doc[];\n  const aliases: Record<string, string> = {};\n  try {\n    docs = loadAll(content, null, { json: true });\n  } catch (err) {\n    logger.debug({ err, fileName }, 'Failed to parse helmfile helmfile.yaml');\n    return null;\n  }\n  for (const doc of docs) {\n    if (!(doc && is.array(doc.releases))) {\n      continue;\n    }\n\n    if (doc.repositories) {\n      for (let i = 0; i < doc.repositories.length; i += 1) {\n        aliases[doc.repositories[i].name] = doc.repositories[i].url;\n      }\n    }\n    logger.debug({ aliases }, 'repositories discovered.');\n\n    deps = doc.releases.map((dep) => {\n      let depName = dep.chart;\n      let repoName = null;\n\n      if (!is.string(dep.chart)) {\n        return {\n          depName: dep.name,\n          skipReason: SkipReason.InvalidName,\n        };\n      }\n\n      // If starts with ./ is for sure a local path\n      if (dep.chart.startsWith('./')) {\n        return {\n          depName,\n          skipReason: SkipReason.LocalChart,\n        };\n      }\n\n      if (dep.chart.includes('/')) {\n        const v = dep.chart.split('/');\n        repoName = v.shift();\n        depName = v.join('/');\n      } else {\n        repoName = dep.chart;\n      }\n\n      const res: PackageDependency = {\n        depName,\n        currentValue: dep.version,\n        registryUrls: [aliases[repoName]]\n          .concat([config.aliases[repoName]])\n          .filter(Boolean),\n      };\n\n      // If version is null is probably a local chart\n      if (!res.currentValue) {\n        res.skipReason = SkipReason.LocalChart;\n      }\n\n      // By definition on helm the chart name should be lowercase letter + number + -\n      // However helmfile support templating of that field\n      if (!isValidChartName(res.depName)) {\n        res.skipReason = SkipReason.UnsupportedChartType;\n      }\n\n      // Skip in case we cannot locate the registry\n      if (is.emptyArray(res.registryUrls)) {\n        res.skipReason = SkipReason.UnknownRegistry;\n      }\n\n      return res;\n    });\n  }\n\n  if (!deps.length) {\n    logger.debug({ fileName }, 'helmfile.yaml has no releases');\n    return null;\n  }\n\n  return { deps, datasource: HelmDatasource.id } as PackageFile;\n}\n"]}