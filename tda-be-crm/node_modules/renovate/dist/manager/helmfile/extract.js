"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractPackageFile = void 0;
const tslib_1 = require("tslib");
const is_1 = (0, tslib_1.__importDefault)(require("@sindresorhus/is"));
const js_yaml_1 = require("js-yaml");
const helm_1 = require("../../datasource/helm");
const logger_1 = require("../../logger");
const types_1 = require("../../types");
const regex_1 = require("../../util/regex");
const isValidChartName = (name) => !(0, regex_1.regEx)(/[!@#$%^&*(),.?":{}/|<>A-Z]/).test(name);
function extractPackageFile(content, fileName, config) {
    let deps = [];
    let docs;
    const aliases = {};
    try {
        docs = (0, js_yaml_1.loadAll)(content, null, { json: true });
    }
    catch (err) {
        logger_1.logger.debug({ err, fileName }, 'Failed to parse helmfile helmfile.yaml');
        return null;
    }
    for (const doc of docs) {
        if (!(doc && is_1.default.array(doc.releases))) {
            continue;
        }
        if (doc.repositories) {
            for (let i = 0; i < doc.repositories.length; i += 1) {
                aliases[doc.repositories[i].name] = doc.repositories[i].url;
            }
        }
        logger_1.logger.debug({ aliases }, 'repositories discovered.');
        deps = doc.releases.map((dep) => {
            let depName = dep.chart;
            let repoName = null;
            if (!is_1.default.string(dep.chart)) {
                return {
                    depName: dep.name,
                    skipReason: types_1.SkipReason.InvalidName,
                };
            }
            // If starts with ./ is for sure a local path
            if (dep.chart.startsWith('./')) {
                return {
                    depName,
                    skipReason: types_1.SkipReason.LocalChart,
                };
            }
            if (dep.chart.includes('/')) {
                const v = dep.chart.split('/');
                repoName = v.shift();
                depName = v.join('/');
            }
            else {
                repoName = dep.chart;
            }
            const res = {
                depName,
                currentValue: dep.version,
                registryUrls: [aliases[repoName]]
                    .concat([config.aliases[repoName]])
                    .filter(Boolean),
            };
            // If version is null is probably a local chart
            if (!res.currentValue) {
                res.skipReason = types_1.SkipReason.LocalChart;
            }
            // By definition on helm the chart name should be lowercase letter + number + -
            // However helmfile support templating of that field
            if (!isValidChartName(res.depName)) {
                res.skipReason = types_1.SkipReason.UnsupportedChartType;
            }
            // Skip in case we cannot locate the registry
            if (is_1.default.emptyArray(res.registryUrls)) {
                res.skipReason = types_1.SkipReason.UnknownRegistry;
            }
            return res;
        });
    }
    if (!deps.length) {
        logger_1.logger.debug({ fileName }, 'helmfile.yaml has no releases');
        return null;
    }
    return { deps, datasource: helm_1.HelmDatasource.id };
}
exports.extractPackageFile = extractPackageFile;
//# sourceMappingURL=extract.js.map