{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../lib/manager/terraform/lockfile/util.ts"],"names":[],"mappings":"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","sourcesContent":["import { getSiblingFileName, readLocalFile } from '../../../util/fs';\nimport { regEx } from '../../../util/regex';\nimport { get as getVersioning } from '../../../versioning';\nimport type { UpdateArtifactsResult } from '../../types';\nimport type {\n  LineNumbers,\n  ProviderLock,\n  ProviderLockUpdate,\n  ProviderSlice,\n} from './types';\n\nconst providerStartLineRegex = regEx(\n  `^provider \"(?<registryUrl>[^/]*)\\\\/(?<namespace>[^/]*)\\\\/(?<depName>[^/]*)\"`\n);\nconst versionLineRegex = regEx(\n  `^(?<prefix>[\\\\s]*version[\\\\s]*=[\\\\s]*\")(?<version>[^\"']+)(?<suffix>\".*)$`\n);\nconst constraintLineRegex = regEx(\n  `^(?<prefix>[\\\\s]*constraints[\\\\s]*=[\\\\s]*\")(?<constraint>[^\"']+)(?<suffix>\".*)$`\n);\nconst hashLineRegex = regEx(`^(?<prefix>\\\\s*\")(?<hash>[^\"]+)(?<suffix>\",.*)$`);\n\nconst lockFile = '.terraform.lock.hcl';\n\nexport function findLockFile(packageFilePath: string): string {\n  return getSiblingFileName(packageFilePath, lockFile);\n}\n\nexport function readLockFile(lockFilePath: string): Promise<string> {\n  return readLocalFile(lockFilePath, 'utf8');\n}\n\nexport function extractLocks(lockFileContent: string): ProviderLock[] {\n  const lines = lockFileContent.split('\\n');\n  const blockStarts: number[] = [];\n  // get first lines of blocks\n  lines.forEach((line, index) => {\n    if (line.startsWith('provider \"')) {\n      blockStarts.push(index);\n    }\n  });\n\n  // sort ascending\n  const sortedStarts = blockStarts.sort((a, b) => a - b);\n  const contentSlices = sortedStarts.map((start, index, array) => {\n    let end: number;\n    if (index < array.length - 1) {\n      end = array[index + 1];\n    } else {\n      end = lines.length - 1;\n    }\n    const slice: ProviderSlice = {\n      lines: lines.slice(start, end),\n      block: {\n        start,\n        end,\n      },\n    };\n    return slice;\n  });\n\n  // generate Lock objects from slices\n  const locks = contentSlices.map((slice) => {\n    let lookupName = '';\n    let registryUrl = '';\n    let version = '';\n    let constraints = '';\n    const relativeLineNumbers: LineNumbers = {\n      block: slice.block,\n      hashes: {\n        start: -1,\n        end: -1,\n      },\n    };\n    const hashes = [];\n\n    slice.lines.forEach((line, index) => {\n      const hashLineResult = hashLineRegex.exec(line);\n      if (hashLineResult) {\n        hashes.push(hashLineResult.groups.hash);\n        relativeLineNumbers.hashes.start =\n          relativeLineNumbers.hashes.start === -1\n            ? index\n            : relativeLineNumbers.hashes.start;\n        relativeLineNumbers.hashes.end = index;\n        return;\n      }\n\n      const providerStartLineResult = providerStartLineRegex.exec(line);\n      if (providerStartLineResult) {\n        lookupName = `${providerStartLineResult.groups.namespace}/${providerStartLineResult.groups.depName}`;\n        registryUrl = providerStartLineResult.groups.registryUrl;\n        return;\n      }\n\n      const versionLineResult = versionLineRegex.exec(line);\n      if (versionLineResult) {\n        version = versionLineResult.groups.version;\n        relativeLineNumbers.version = index;\n        return;\n      }\n\n      const constraintLineResult = constraintLineRegex.exec(line);\n      if (constraintLineResult) {\n        constraints = constraintLineResult.groups.constraint;\n        relativeLineNumbers.constraint = index;\n      }\n    });\n\n    const lock: ProviderLock = {\n      lookupName,\n      registryUrl: `https://${registryUrl}`,\n      version,\n      constraints,\n      hashes,\n      lineNumbers: relativeLineNumbers,\n    };\n    return lock;\n  });\n\n  if (locks.length === 0) {\n    return null;\n  }\n  return locks;\n}\n\nexport function isPinnedVersion(value: string): boolean {\n  const versioning = getVersioning('hashicorp');\n  return !!versioning.isSingleVersion(value);\n}\n\nexport function writeLockUpdates(\n  updates: ProviderLockUpdate[],\n  lockFilePath: string,\n  oldLockFileContent: string\n): UpdateArtifactsResult {\n  const lines = oldLockFileContent.split('\\n');\n\n  const sections: string[][] = [];\n\n  // sort updates in order of appearance in the lockfile\n  updates.sort((a, b) => a.lineNumbers.block.start - b.lineNumbers.block.start);\n  updates.forEach((update, index, array) => {\n    // re add leading whitespace\n    let startWhitespace;\n    if (index > 0) {\n      // get end of the\n      startWhitespace = array[index - 1].lineNumbers.block.end;\n    }\n    const leadingNonRelevantLines = lines.slice(\n      startWhitespace,\n      update.lineNumbers.block.start\n    );\n    sections.push(leadingNonRelevantLines);\n\n    const providerBlockLines = lines.slice(\n      update.lineNumbers.block.start,\n      update.lineNumbers.block.end\n    );\n    const newProviderBlockLines: string[] = [];\n    let hashLinePrefix = '';\n    let hashLineSuffix = '';\n    providerBlockLines.forEach((providerBlockLine, providerBlockIndex) => {\n      const versionLine = providerBlockLine.replace(\n        versionLineRegex,\n        `$<prefix>${update.newVersion}$<suffix>`\n      );\n      if (versionLine !== providerBlockLine) {\n        newProviderBlockLines.push(versionLine);\n        return;\n      }\n\n      const constraintLine = providerBlockLine.replace(\n        constraintLineRegex,\n        `$<prefix>${update.newConstraint}$<suffix>`\n      );\n      if (constraintLine !== providerBlockLine) {\n        newProviderBlockLines.push(constraintLine);\n        return;\n      }\n\n      const hashLineRegexResult = hashLineRegex.exec(providerBlockLine);\n      if (hashLineRegexResult) {\n        // skip hash line but safe the whitespace\n        hashLinePrefix = hashLineRegexResult.groups.prefix;\n        hashLineSuffix = hashLineRegexResult.groups.suffix;\n        return;\n      }\n      newProviderBlockLines.push(providerBlockLine);\n    });\n    const hashesWithWhitespace = update.newHashes.map(\n      (value) => `${hashLinePrefix}${value}${hashLineSuffix}`\n    );\n    newProviderBlockLines.splice(\n      update.lineNumbers.hashes.start,\n      0,\n      ...hashesWithWhitespace\n    );\n    sections.push(newProviderBlockLines);\n  });\n\n  const trailingNotUpdatedLines = lines.slice(\n    updates[updates.length - 1].lineNumbers.block.end\n  );\n  sections.push(trailingNotUpdatedLines);\n\n  const newLines = sections.reduce((previousValue, currentValue) =>\n    previousValue.concat(currentValue)\n  );\n  const newContent = newLines.join('\\n');\n\n  return {\n    file: {\n      name: lockFilePath,\n      contents: newContent,\n    },\n  };\n}\n"]}