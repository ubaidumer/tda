"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractPackageFile = void 0;
const hex_1 = require("../../datasource/hex");
const logger_1 = require("../../logger");
const types_1 = require("../../types");
const fs_1 = require("../../util/fs");
const regex_1 = require("../../util/regex");
const depSectionRegExp = (0, regex_1.regEx)(/defp\s+deps.*do/g);
const depMatchRegExp = (0, regex_1.regEx)(/{:(\w+),\s*([^:"]+)?:?\s*"([^"]+)",?\s*(organization: "(.*)")?.*}/gm);
async function extractPackageFile(content, fileName) {
    logger_1.logger.trace('mix.extractPackageFile()');
    const deps = [];
    const contentArr = content.split('\n');
    for (let lineNumber = 0; lineNumber < contentArr.length; lineNumber += 1) {
        if (contentArr[lineNumber].match(depSectionRegExp)) {
            logger_1.logger.trace(`Matched dep section on line ${lineNumber}`);
            let depBuffer = '';
            do {
                depBuffer += contentArr[lineNumber] + '\n';
                lineNumber += 1;
            } while (!contentArr[lineNumber].includes('end'));
            let depMatch;
            do {
                depMatch = depMatchRegExp.exec(depBuffer);
                if (depMatch) {
                    const depName = depMatch[1];
                    const datasource = depMatch[2];
                    const currentValue = depMatch[3];
                    const organization = depMatch[5];
                    const dep = {
                        depName,
                        currentValue,
                        managerData: {},
                    };
                    dep.datasource = datasource || hex_1.HexDatasource.id;
                    if (dep.datasource === hex_1.HexDatasource.id) {
                        dep.currentValue = currentValue;
                        dep.lookupName = depName;
                    }
                    if (organization) {
                        dep.lookupName += ':' + organization;
                    }
                    if (dep.datasource !== hex_1.HexDatasource.id) {
                        dep.skipReason = types_1.SkipReason.NonHexDeptypes;
                    }
                    // Find dep's line number
                    for (let i = 0; i < contentArr.length; i += 1) {
                        if (contentArr[i].includes(`:${depName},`)) {
                            dep.managerData.lineNumber = i;
                        }
                    }
                    deps.push(dep);
                }
            } while (depMatch);
        }
    }
    const res = { deps };
    const lockFileName = (await (0, fs_1.findLocalSiblingOrParent)(fileName, 'mix.lock')) || 'mix.lock';
    // istanbul ignore if
    if (await (0, fs_1.localPathExists)(lockFileName)) {
        res.lockFiles = [lockFileName];
    }
    return res;
}
exports.extractPackageFile = extractPackageFile;
//# sourceMappingURL=extract.js.map