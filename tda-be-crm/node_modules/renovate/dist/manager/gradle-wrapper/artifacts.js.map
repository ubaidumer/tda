{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../lib/manager/gradle-wrapper/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import { quote } from 'shlex';\nimport { resolve } from 'upath';\nimport { GlobalConfig } from '../../config/global';\nimport { TEMPORARY_ERROR } from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { ExecOptions, exec } from '../../util/exec';\nimport { readLocalFile, stat, writeLocalFile } from '../../util/fs';\nimport { getRepoStatus } from '../../util/git';\nimport type { StatusResult } from '../../util/git/types';\nimport { Http } from '../../util/http';\nimport type { UpdateArtifact, UpdateArtifactsResult } from '../types';\nimport {\n  extraEnv,\n  getJavaContraint,\n  getJavaVersioning,\n  gradleWrapperFileName,\n  prepareGradleCommand,\n} from './utils';\n\nconst http = new Http('gradle-wrapper');\n\nasync function addIfUpdated(\n  status: StatusResult,\n  fileProjectPath: string\n): Promise<UpdateArtifactsResult | null> {\n  if (status.modified.includes(fileProjectPath)) {\n    return {\n      file: {\n        name: fileProjectPath,\n        contents: await readLocalFile(fileProjectPath),\n      },\n    };\n  }\n  return null;\n}\n\nfunction getDistributionUrl(newPackageFileContent: string): string {\n  const distributionUrlLine = newPackageFileContent\n    .split('\\n')\n    .find((line) => line.startsWith('distributionUrl='));\n  if (distributionUrlLine) {\n    return distributionUrlLine\n      .replace('distributionUrl=', '')\n      .replace('https\\\\:', 'https:');\n  }\n  return null;\n}\n\nasync function getDistributionChecksum(url: string): Promise<string> {\n  const { body } = await http.get(`${url}.sha256`);\n  return body;\n}\n\nexport async function updateArtifacts({\n  packageFileName,\n  newPackageFileContent,\n  updatedDeps,\n  config,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  try {\n    const projectDir = GlobalConfig.get('localDir');\n    logger.debug({ updatedDeps }, 'gradle-wrapper.updateArtifacts()');\n    const gradlew = gradleWrapperFileName();\n    const gradlewPath = resolve(projectDir, `./${gradlew}`);\n    let cmd = await prepareGradleCommand(\n      gradlew,\n      projectDir,\n      await stat(gradlewPath).catch(() => null),\n      `wrapper`\n    );\n    if (!cmd) {\n      logger.info('No gradlew found - skipping Artifacts update');\n      return null;\n    }\n    const distributionUrl = getDistributionUrl(newPackageFileContent);\n    if (distributionUrl) {\n      cmd += ` --gradle-distribution-url ${distributionUrl}`;\n      if (newPackageFileContent.includes('distributionSha256Sum=')) {\n        // need to reset version, otherwise we have a checksum mismatch\n        await writeLocalFile(\n          packageFileName,\n          newPackageFileContent.replace(config.newValue, config.currentValue)\n        );\n        const checksum = await getDistributionChecksum(distributionUrl);\n        cmd += ` --gradle-distribution-sha256-sum ${quote(checksum)}`;\n      }\n    } else {\n      cmd += ` --gradle-version ${quote(config.newValue)}`;\n    }\n    logger.debug(`Updating gradle wrapper: \"${cmd}\"`);\n    const execOptions: ExecOptions = {\n      docker: {\n        image: 'java',\n        tagConstraint:\n          config.constraints?.java ?? getJavaContraint(config.currentValue),\n        tagScheme: getJavaVersioning(),\n      },\n      extraEnv,\n    };\n    try {\n      await exec(cmd, execOptions);\n    } catch (err) {\n      // istanbul ignore if\n      if (err.message === TEMPORARY_ERROR) {\n        throw err;\n      }\n      logger.warn(\n        { err },\n        'Error executing gradle wrapper update command. It can be not a critical one though.'\n      );\n    }\n    const status = await getRepoStatus();\n    const artifactFileNames = [\n      'gradle/wrapper/gradle-wrapper.properties',\n      'gradle/wrapper/gradle-wrapper.jar',\n      'gradlew',\n      'gradlew.bat',\n    ].map(\n      (filename) =>\n        packageFileName\n          .replace('gradle/wrapper/', '')\n          .replace('gradle-wrapper.properties', '') + filename\n    );\n    const updateArtifactsResult = (\n      await Promise.all(\n        artifactFileNames.map((fileProjectPath) =>\n          addIfUpdated(status, fileProjectPath)\n        )\n      )\n    ).filter(Boolean);\n    logger.debug(\n      { files: updateArtifactsResult.map((r) => r.file.name) },\n      `Returning updated gradle-wrapper files`\n    );\n    return updateArtifactsResult;\n  } catch (err) {\n    logger.debug({ err }, 'Error setting new Gradle Wrapper release value');\n    return [\n      {\n        artifactError: {\n          lockFile: packageFileName,\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n}\n"]}