"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractMsbuildGlobalManifest = void 0;
const tslib_1 = require("tslib");
const datasourceNuget = (0, tslib_1.__importStar)(require("../../../datasource/nuget"));
const logger_1 = require("../../../logger");
const types_1 = require("../../../types");
function extractMsbuildGlobalManifest(content, packageFile) {
    var _a, _b, _c;
    const deps = [];
    let manifest;
    try {
        manifest = JSON.parse(content);
    }
    catch (err) {
        logger_1.logger.debug({ fileName: packageFile }, 'Invalid JSON');
        return null;
    }
    if (!manifest['msbuild-sdks'] && !((_a = manifest.sdk) === null || _a === void 0 ? void 0 : _a.version)) {
        logger_1.logger.debug({ fileName: packageFile }, 'This global.json is not a Nuget file');
        return null;
    }
    if ((_b = manifest.sdk) === null || _b === void 0 ? void 0 : _b.version) {
        deps.push({
            depType: 'dotnet-sdk',
            depName: 'dotnet-sdk',
            currentValue: (_c = manifest.sdk) === null || _c === void 0 ? void 0 : _c.version,
            skipReason: types_1.SkipReason.UnsupportedDatasource,
        });
    }
    if (manifest['msbuild-sdks']) {
        for (const depName of Object.keys(manifest['msbuild-sdks'])) {
            const currentValue = manifest['msbuild-sdks'][depName];
            const dep = {
                depType: 'msbuild-sdk',
                depName,
                currentValue,
                datasource: datasourceNuget.id,
            };
            deps.push(dep);
        }
    }
    return { deps };
}
exports.extractMsbuildGlobalManifest = extractMsbuildGlobalManifest;
//# sourceMappingURL=global-manifest.js.map