{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/nuget/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { XmlDocument, XmlElement, XmlNode } from 'xmldoc';\nimport { GlobalConfig } from '../../config/global';\nimport * as datasourceNuget from '../../datasource/nuget';\nimport { logger } from '../../logger';\nimport { getSiblingFileName, localPathExists } from '../../util/fs';\nimport { hasKey } from '../../util/object';\nimport { regEx } from '../../util/regex';\nimport type { ExtractConfig, PackageDependency, PackageFile } from '../types';\nimport { extractMsbuildGlobalManifest } from './extract/global-manifest';\nimport type { DotnetToolsManifest } from './types';\nimport { getConfiguredRegistries } from './util';\n\n/**\n * https://docs.microsoft.com/en-us/nuget/concepts/package-versioning\n * This article mentions that  Nuget 3.x and later tries to restore the lowest possible version\n * regarding to given version range.\n * 1.3.4 equals [1.3.4,)\n * Due to guarantee that an update of package version will result in its usage by the next restore + build operation,\n * only following constrained versions make sense\n * 1.3.4, [1.3.4], [1.3.4, ], [1.3.4, )\n * The update of the right boundary does not make sense regarding to the lowest version restore rule,\n * so we don't include it in the extracting regexp\n */\nconst checkVersion = regEx(\n  `^\\\\s*(?:[[])?(?:(?<currentValue>[^\"(,[\\\\]]+)\\\\s*(?:,\\\\s*[)\\\\]]|])?)\\\\s*$`\n);\nconst elemNames = new Set([\n  'PackageReference',\n  'PackageVersion',\n  'DotNetCliToolReference',\n  'GlobalPackageReference',\n]);\n\nfunction isXmlElem(node: XmlNode): boolean {\n  return hasKey('name', node);\n}\n\nfunction extractDepsFromXml(xmlNode: XmlDocument): PackageDependency[] {\n  const results: PackageDependency[] = [];\n  const todo: XmlElement[] = [xmlNode];\n  while (todo.length) {\n    const child = todo.pop();\n    const { name, attr } = child;\n\n    if (elemNames.has(name)) {\n      const depName = attr?.Include || attr?.Update;\n      const version =\n        attr?.Version ||\n        child.valueWithPath('Version') ||\n        attr?.VersionOverride ||\n        child.valueWithPath('VersionOverride');\n      const currentValue = checkVersion\n        ?.exec(version)\n        ?.groups?.currentValue?.trim();\n      if (depName && currentValue) {\n        results.push({\n          datasource: datasourceNuget.id,\n          depType: 'nuget',\n          depName,\n          currentValue,\n        });\n      }\n    } else {\n      todo.push(...(child.children.filter(isXmlElem) as XmlElement[]));\n    }\n  }\n  return results;\n}\n\nexport async function extractPackageFile(\n  content: string,\n  packageFile: string,\n  config: ExtractConfig\n): Promise<PackageFile | null> {\n  logger.trace({ packageFile }, 'nuget.extractPackageFile()');\n\n  const { localDir } = GlobalConfig.get();\n  const registries = await getConfiguredRegistries(packageFile, localDir);\n  const registryUrls = registries\n    ? registries.map((registry) => registry.url)\n    : undefined;\n\n  if (packageFile.endsWith('dotnet-tools.json')) {\n    const deps: PackageDependency[] = [];\n    let manifest: DotnetToolsManifest;\n\n    try {\n      manifest = JSON.parse(content);\n    } catch (err) {\n      logger.debug({ fileName: packageFile }, 'Invalid JSON');\n      return null;\n    }\n\n    if (manifest.version !== 1) {\n      logger.debug({ contents: manifest }, 'Unsupported dotnet tools version');\n      return null;\n    }\n\n    for (const depName of Object.keys(manifest.tools)) {\n      const tool = manifest.tools[depName];\n      const currentValue = tool.version;\n      const dep: PackageDependency = {\n        depType: 'nuget',\n        depName,\n        currentValue,\n        datasource: datasourceNuget.id,\n      };\n      if (registryUrls) {\n        dep.registryUrls = registryUrls;\n      }\n\n      deps.push(dep);\n    }\n\n    return { deps };\n  }\n\n  if (packageFile.endsWith('global.json')) {\n    return extractMsbuildGlobalManifest(content, packageFile);\n  }\n\n  let deps: PackageDependency[] = [];\n  try {\n    const parsedXml = new XmlDocument(content);\n    deps = extractDepsFromXml(parsedXml).map((dep) => ({\n      ...dep,\n      ...(registryUrls && { registryUrls }),\n    }));\n  } catch (err) {\n    logger.debug({ err }, `Failed to parse ${packageFile}`);\n  }\n  const res: PackageFile = { deps };\n  const lockFileName = getSiblingFileName(packageFile, 'packages.lock.json');\n  // istanbul ignore if\n  if (await localPathExists(lockFileName)) {\n    res.lockFiles = [lockFileName];\n  }\n  return res;\n}\n"]}