{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../lib/manager/nuget/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import { join } from 'path';\nimport { GlobalConfig } from '../../config/global';\nimport { TEMPORARY_ERROR } from '../../constants/error-messages';\nimport { id, parseRegistryUrl } from '../../datasource/nuget';\nimport { logger } from '../../logger';\nimport { ExecOptions, exec } from '../../util/exec';\nimport {\n  ensureCacheDir,\n  getSiblingFileName,\n  outputFile,\n  readLocalFile,\n  remove,\n  writeLocalFile,\n} from '../../util/fs';\nimport * as hostRules from '../../util/host-rules';\nimport { regEx } from '../../util/regex';\nimport type {\n  UpdateArtifact,\n  UpdateArtifactsConfig,\n  UpdateArtifactsResult,\n} from '../types';\nimport {\n  getConfiguredRegistries,\n  getDefaultRegistries,\n  getRandomString,\n} from './util';\n\nasync function addSourceCmds(\n  packageFileName: string,\n  config: UpdateArtifactsConfig,\n  nugetConfigFile: string\n): Promise<string[]> {\n  const { localDir } = GlobalConfig.get();\n  const registries =\n    (await getConfiguredRegistries(packageFileName, localDir)) ||\n    getDefaultRegistries();\n  const result = [];\n  for (const registry of registries) {\n    const { username, password } = hostRules.find({\n      hostType: id,\n      url: registry.url,\n    });\n    const registryInfo = parseRegistryUrl(registry.url);\n    let addSourceCmd = `dotnet nuget add source ${registryInfo.feedUrl} --configfile ${nugetConfigFile}`;\n    if (registry.name) {\n      // Add name for registry, if known.\n      addSourceCmd += ` --name ${registry.name}`;\n    }\n    if (username && password) {\n      // Add registry credentials from host rules, if configured.\n      addSourceCmd += ` --username ${username} --password ${password} --store-password-in-clear-text`;\n    }\n    result.push(addSourceCmd);\n  }\n  return result;\n}\n\nasync function runDotnetRestore(\n  packageFileName: string,\n  config: UpdateArtifactsConfig\n): Promise<void> {\n  const execOptions: ExecOptions = {\n    docker: {\n      image: 'dotnet',\n    },\n  };\n\n  const nugetCacheDir = await ensureCacheDir('nuget');\n  const nugetConfigDir = join(nugetCacheDir, `${getRandomString()}`);\n  const nugetConfigFile = join(nugetConfigDir, `nuget.config`);\n  await outputFile(\n    nugetConfigFile,\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n<configuration>\\n</configuration>\\n`\n  );\n  const cmds = [\n    ...(await addSourceCmds(packageFileName, config, nugetConfigFile)),\n    `dotnet restore ${packageFileName} --force-evaluate --configfile ${nugetConfigFile}`,\n  ];\n  logger.debug({ cmd: cmds }, 'dotnet command');\n  await exec(cmds, execOptions);\n  await remove(nugetConfigDir);\n}\n\nexport async function updateArtifacts({\n  packageFileName,\n  newPackageFileContent,\n  config,\n  updatedDeps,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  logger.debug(`nuget.updateArtifacts(${packageFileName})`);\n\n  if (!regEx(/(?:cs|vb|fs)proj$/i).test(packageFileName)) {\n    // This could be implemented in the future if necessary.\n    // It's not that easy though because the questions which\n    // project file to restore how to determine which lock files\n    // have been changed in such cases.\n    logger.debug(\n      { packageFileName },\n      'Not updating lock file for non project files'\n    );\n    return null;\n  }\n\n  const lockFileName = getSiblingFileName(\n    packageFileName,\n    'packages.lock.json'\n  );\n  const existingLockFileContent = await readLocalFile(lockFileName, 'utf8');\n  if (!existingLockFileContent) {\n    logger.debug(\n      { packageFileName },\n      'No lock file found beneath package file.'\n    );\n    return null;\n  }\n\n  try {\n    if (updatedDeps.length === 0 && config.isLockFileMaintenance !== true) {\n      logger.debug(\n        `Not updating lock file because no deps changed and no lock file maintenance.`\n      );\n      return null;\n    }\n\n    await writeLocalFile(packageFileName, newPackageFileContent);\n\n    await runDotnetRestore(packageFileName, config);\n\n    const newLockFileContent = await readLocalFile(lockFileName, 'utf8');\n    if (existingLockFileContent === newLockFileContent) {\n      logger.debug(`Lock file is unchanged`);\n      return null;\n    }\n    logger.debug('Returning updated lock file');\n    return [\n      {\n        file: {\n          name: lockFileName,\n          contents: await readLocalFile(lockFileName),\n        },\n      },\n    ];\n  } catch (err) {\n    // istanbul ignore if\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n    logger.debug({ err }, 'Failed to generate lock file');\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n}\n"]}