{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../lib/manager/nuget/util.ts"],"names":[],"mappings":"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","sourcesContent":["import cryptoRandomString from 'crypto-random-string';\nimport findUp from 'find-up';\nimport * as upath from 'upath';\nimport { XmlDocument } from 'xmldoc';\nimport * as datasourceNuget from '../../datasource/nuget';\nimport { logger } from '../../logger';\nimport { readFile } from '../../util/fs';\nimport { regEx } from '../../util/regex';\nimport type { Registry } from './types';\n\nasync function readFileAsXmlDocument(file: string): Promise<XmlDocument> {\n  try {\n    return new XmlDocument(await readFile(file, 'utf8'));\n  } catch (err) {\n    logger.debug({ err }, `failed to parse '${file}' as XML document`);\n    return undefined;\n  }\n}\n\n/* istanbul ignore next */\nexport function getRandomString(): string {\n  return cryptoRandomString({ length: 16 });\n}\n\nexport function getDefaultRegistries(): Registry[] {\n  return datasourceNuget.defaultRegistryUrls.map(\n    (registryUrl) =>\n      ({\n        url: registryUrl,\n      } as Registry)\n  );\n}\n\nexport async function getConfiguredRegistries(\n  packageFile: string,\n  localDir: string\n): Promise<Registry[] | undefined> {\n  // Valid file names taken from https://github.com/NuGet/NuGet.Client/blob/f64621487c0b454eda4b98af853bf4a528bef72a/src/NuGet.Core/NuGet.Configuration/Settings/Settings.cs#L34\n  const nuGetConfigFileNames = ['nuget.config', 'NuGet.config', 'NuGet.Config'];\n  // normalize paths, otherwise startsWith can fail because of path delimitter mismatch\n  const normalizedLocalDir = upath.normalizeSafe(localDir);\n  const nuGetConfigPath = await findUp(nuGetConfigFileNames, {\n    cwd: upath.dirname(upath.join(normalizedLocalDir, packageFile)),\n    type: 'file',\n  });\n\n  if (\n    !nuGetConfigPath ||\n    upath.normalizeSafe(nuGetConfigPath).startsWith(normalizedLocalDir) !== true\n  ) {\n    return undefined;\n  }\n\n  logger.debug({ nuGetConfigPath }, 'found NuGet.config');\n  const nuGetConfig = await readFileAsXmlDocument(nuGetConfigPath);\n  if (!nuGetConfig) {\n    return undefined;\n  }\n\n  const packageSources = nuGetConfig.childNamed('packageSources');\n  if (!packageSources) {\n    return undefined;\n  }\n\n  const registries = getDefaultRegistries();\n  for (const child of packageSources.children) {\n    if (child.type === 'element') {\n      if (child.name === 'clear') {\n        logger.debug(`clearing registry URLs`);\n        registries.length = 0;\n      } else if (child.name === 'add') {\n        const isHttpUrl = regEx(/^https?:\\/\\//i).test(child.attr.value); // TODO #12071\n        if (isHttpUrl) {\n          let registryUrl = child.attr.value;\n          if (child.attr.protocolVersion) {\n            registryUrl += `#protocolVersion=${child.attr.protocolVersion}`;\n          }\n          logger.debug({ registryUrl }, 'adding registry URL');\n          registries.push({\n            name: child.attr.key,\n            url: registryUrl,\n          });\n        } else {\n          logger.debug(\n            { registryUrl: child.attr.value },\n            'ignoring local registry URL'\n          );\n        }\n      }\n      // child.name === 'remove' not supported\n    }\n  }\n  return registries;\n}\n"]}