{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/github-actions/extract.ts"],"names":[],"mappings":";;;;AAAA,gGAAqE;AACrE,yCAAsC;AACtC,uCAAyC;AACzC,4CAAyC;AACzC,uFAA4D;AAC5D,mDAA+C;AAG/C,MAAM,QAAQ,GAAG,IAAA,aAAK,EAAC,kCAAkC,CAAC,CAAC;AAC3D,MAAM,QAAQ,GAAG,IAAA,aAAK,EACpB,uIAAuI,CACxI,CAAC;AAEF,wEAAwE;AACxE,MAAM,KAAK,GAAG,IAAA,aAAK,EAAC,6BAA6B,CAAC,CAAC;AAEnD,SAAgB,kBAAkB,CAAC,OAAe;IAChD,eAAM,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;IACpD,MAAM,IAAI,GAAwB,EAAE,CAAC;IACrC,KAAK,MAAM,IAAI,IAAI,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;QACtC,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;YAC/B,SAAS;SACV;QAED,MAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxC,IAAI,WAAW,EAAE;YACf,MAAM,CAAC,EAAE,WAAW,CAAC,GAAG,WAAW,CAAC;YACpC,MAAM,GAAG,GAAG,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC;YAChC,GAAG,CAAC,OAAO,GAAG,QAAQ,CAAC;YACvB,GAAG,CAAC,UAAU,GAAG,gBAAgB,CAAC,EAAE,CAAC;YACrC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACf,SAAS;SACV;QAED,MAAM,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrC,IAAI,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,EAAE;YACpB,MAAM,EACJ,OAAO,EACP,YAAY,EACZ,IAAI,GAAG,EAAE,EACT,GAAG,EACH,aAAa,GACd,GAAG,QAAQ,CAAC,MAAM,CAAC;YACpB,MAAM,GAAG,GAAsB;gBAC7B,OAAO;gBACP,kBAAkB,EAAE,sBAAsB;gBAC1C,UAAU,EAAE,oBAAoB,CAAC,EAAE;gBACnC,UAAU,EAAE,gBAAgB,CAAC,EAAE;gBAC/B,OAAO,EAAE,QAAQ;gBACjB,aAAa;gBACb,yBAAyB,EAAE,cAAc,IAAI,wIAAwI;aACtL,CAAC;YACF,IAAI,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;gBAC5B,GAAG,CAAC,YAAY,GAAG,GAAG,CAAC;gBACvB,GAAG,CAAC,aAAa,GAAG,YAAY,CAAC;aAClC;iBAAM;gBACL,GAAG,CAAC,YAAY,GAAG,YAAY,CAAC;gBAChC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;oBAC/C,GAAG,CAAC,UAAU,GAAG,kBAAU,CAAC,cAAc,CAAC;iBAC5C;aACF;YACD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAChB;KACF;IACD,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;QAChB,OAAO,IAAI,CAAC;KACb;IACD,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC;AApDD,gDAoDC","sourcesContent":["import * as githubTagsDatasource from '../../datasource/github-tags';\nimport { logger } from '../../logger';\nimport { SkipReason } from '../../types';\nimport { regEx } from '../../util/regex';\nimport * as dockerVersioning from '../../versioning/docker';\nimport { getDep } from '../dockerfile/extract';\nimport type { PackageDependency, PackageFile } from '../types';\n\nconst dockerRe = regEx(/^\\s+uses: docker:\\/\\/([^\"]+)\\s*$/);\nconst actionRe = regEx(\n  /^\\s+-?\\s+?uses: (?<replaceString>(?<depName>[\\w-]+\\/[\\w-]+)(?<path>\\/.*)?@(?<currentValue>.+?)(?: # renovate: tag=(?<tag>.+?))?)\\s*?$/\n);\n\n// SHA1 or SHA256, see https://github.blog/2020-10-19-git-2-29-released/\nconst shaRe = regEx(/^[a-z0-9]{40}|[a-z0-9]{64}$/);\n\nexport function extractPackageFile(content: string): PackageFile | null {\n  logger.trace('github-actions.extractPackageFile()');\n  const deps: PackageDependency[] = [];\n  for (const line of content.split('\\n')) {\n    if (line.trim().startsWith('#')) {\n      continue;\n    }\n\n    const dockerMatch = dockerRe.exec(line);\n    if (dockerMatch) {\n      const [, currentFrom] = dockerMatch;\n      const dep = getDep(currentFrom);\n      dep.depType = 'docker';\n      dep.versioning = dockerVersioning.id;\n      deps.push(dep);\n      continue;\n    }\n\n    const tagMatch = actionRe.exec(line);\n    if (tagMatch?.groups) {\n      const {\n        depName,\n        currentValue,\n        path = '',\n        tag,\n        replaceString,\n      } = tagMatch.groups;\n      const dep: PackageDependency = {\n        depName,\n        commitMessageTopic: '{{{depName}}} action',\n        datasource: githubTagsDatasource.id,\n        versioning: dockerVersioning.id,\n        depType: 'action',\n        replaceString,\n        autoReplaceStringTemplate: `{{depName}}${path}@{{#if newDigest}}{{newDigest}}{{#if newValue}} # renovate: tag={{newValue}}{{/if}}{{/if}}{{#unless newDigest}}{{newValue}}{{/unless}}`,\n      };\n      if (shaRe.test(currentValue)) {\n        dep.currentValue = tag;\n        dep.currentDigest = currentValue;\n      } else {\n        dep.currentValue = currentValue;\n        if (!dockerVersioning.api.isValid(currentValue)) {\n          dep.skipReason = SkipReason.InvalidVersion;\n        }\n      }\n      deps.push(dep);\n    }\n  }\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n"]}