{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/argocd/extract.ts"],"names":[],"mappings":";;;;AAAA,uEAAkC;AAClC,qCAAkC;AAClC,wDAA8D;AAC9D,gDAAuD;AAGvD,iCAAuC;AAEvC,SAAS,gBAAgB,CACvB,UAAiC;;IAEjC,MAAM,MAAM,GAAG,MAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,IAAI,0CAAE,MAAM,CAAC;IAExC,IACE,CAAC,MAAM;QACP,CAAC,YAAE,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC;QAClC,CAAC,YAAE,CAAC,cAAc,CAAC,MAAM,CAAC,cAAc,CAAC,EACzC;QACA,OAAO,IAAI,CAAC;KACb;IAED,uDAAuD;IACvD,IAAI,MAAM,CAAC,KAAK,EAAE;QAChB,OAAO;YACL,OAAO,EAAE,MAAM,CAAC,KAAK;YACrB,YAAY,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC;YAC9B,YAAY,EAAE,MAAM,CAAC,cAAc;YACnC,UAAU,EAAE,qBAAc,CAAC,EAAE;SAC9B,CAAC;KACH;IACD,OAAO;QACL,OAAO,EAAE,MAAM,CAAC,OAAO;QACvB,YAAY,EAAE,MAAM,CAAC,cAAc;QACnC,UAAU,EAAE,4BAAiB,CAAC,EAAE;KACjC,CAAC;AACJ,CAAC;AAED,SAAgB,kBAAkB,CAChC,OAAe,EACf,QAAgB,EAChB,MAAsB;IAEtB,uEAAuE;IACvE,IAAI,oBAAa,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,KAAK,EAAE;QACzC,OAAO,IAAI,CAAC;KACb;IAED,MAAM,WAAW,GAAG,IAAA,iBAAO,EAAC,OAAO,CAA4B,CAAC;IAEhE,MAAM,IAAI,GAAG,WAAW;SACrB,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;SACjD,MAAM,CAAC,OAAO,CAAC,CAAC;IAEnB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;AACvC,CAAC;AAjBD,gDAiBC","sourcesContent":["import is from '@sindresorhus/is';\nimport { loadAll } from 'js-yaml';\nimport { GitTagsDatasource } from '../../datasource/git-tags';\nimport { HelmDatasource } from '../../datasource/helm';\nimport type { ExtractConfig, PackageDependency, PackageFile } from '../types';\nimport type { ApplicationDefinition } from './types';\nimport { fileTestRegex } from './util';\n\nfunction createDependency(\n  definition: ApplicationDefinition\n): PackageDependency {\n  const source = definition?.spec?.source;\n\n  if (\n    !source ||\n    !is.nonEmptyString(source.repoURL) ||\n    !is.nonEmptyString(source.targetRevision)\n  ) {\n    return null;\n  }\n\n  // a chart variable is defined this is helm declaration\n  if (source.chart) {\n    return {\n      depName: source.chart,\n      registryUrls: [source.repoURL],\n      currentValue: source.targetRevision,\n      datasource: HelmDatasource.id,\n    };\n  }\n  return {\n    depName: source.repoURL,\n    currentValue: source.targetRevision,\n    datasource: GitTagsDatasource.id,\n  };\n}\n\nexport function extractPackageFile(\n  content: string,\n  fileName: string,\n  config?: ExtractConfig\n): PackageFile | null {\n  // check for argo reference. API version for the kind attribute is used\n  if (fileTestRegex.test(content) === false) {\n    return null;\n  }\n\n  const definitions = loadAll(content) as ApplicationDefinition[];\n\n  const deps = definitions\n    .map((definition) => createDependency(definition))\n    .filter(Boolean);\n\n  return deps.length ? { deps } : null;\n}\n"]}