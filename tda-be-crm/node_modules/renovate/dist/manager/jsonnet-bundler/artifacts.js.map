{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../lib/manager/jsonnet-bundler/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import { quote } from 'shlex';\nimport { TEMPORARY_ERROR } from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { ExecOptions, exec } from '../../util/exec';\nimport type { ToolConstraint } from '../../util/exec/types';\nimport { readLocalFile } from '../../util/fs';\nimport { getRepoStatus } from '../../util/git';\nimport { regEx } from '../../util/regex';\nimport type {\n  PackageDependency,\n  UpdateArtifact,\n  UpdateArtifactsResult,\n} from '../types';\n\nfunction dependencyUrl(dep: PackageDependency): string {\n  const url = dep.lookupName;\n  if (dep.managerData?.subdir) {\n    return url.concat('/', dep.managerData.subdir);\n  }\n  return url;\n}\n\nexport async function updateArtifacts(\n  updateArtifact: UpdateArtifact\n): Promise<UpdateArtifactsResult[] | null> {\n  const { packageFileName, updatedDeps, config } = updateArtifact;\n  logger.trace({ packageFileName }, 'jsonnet-bundler.updateArtifacts()');\n\n  const lockFileName = packageFileName.replace(regEx(/\\.json$/), '.lock.json');\n  const existingLockFileContent = await readLocalFile(lockFileName, 'utf8');\n\n  if (!existingLockFileContent) {\n    logger.debug('No jsonnetfile.lock.json found');\n    return null;\n  }\n\n  const jsonnetBundlerToolConstraint: ToolConstraint = {\n    toolName: 'jb',\n    constraint: config.constraints?.jb,\n  };\n\n  const execOptions: ExecOptions = {\n    cwdFile: packageFileName,\n    docker: {\n      image: 'sidecar',\n    },\n    toolConstraints: [jsonnetBundlerToolConstraint],\n  };\n\n  try {\n    if (config.isLockFileMaintenance) {\n      await exec('jb update', execOptions);\n    } else {\n      const dependencyUrls = updatedDeps.map(dependencyUrl);\n      if (dependencyUrls.length > 0) {\n        await exec(\n          `jb update ${dependencyUrls.map(quote).join(' ')}`,\n          execOptions\n        );\n      }\n    }\n\n    const status = await getRepoStatus();\n\n    if (status.isClean()) {\n      return null;\n    }\n\n    const res: UpdateArtifactsResult[] = [];\n\n    for (const f of status.modified ?? []) {\n      res.push({\n        file: {\n          name: f,\n          contents: await readLocalFile(f),\n        },\n      });\n    }\n    for (const f of status.not_added ?? []) {\n      res.push({\n        file: {\n          name: f,\n          contents: await readLocalFile(f),\n        },\n      });\n    }\n    for (const f of status.deleted ?? []) {\n      res.push({\n        file: {\n          name: '|delete|',\n          contents: f,\n        },\n      });\n    }\n\n    return res;\n  } catch (err) /* istanbul ignore next */ {\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: err.stderr,\n        },\n      },\n    ];\n  }\n}\n"]}