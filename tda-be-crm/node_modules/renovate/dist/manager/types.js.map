{"version":3,"file":"types.js","sourceRoot":"","sources":["../../lib/manager/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { ReleaseType } from 'semver';\nimport type {\n  MatchStringsStrategy,\n  UpdateType,\n  ValidationMessage,\n} from '../config/types';\nimport type { ProgrammingLanguage } from '../constants';\nimport type { RangeStrategy, SkipReason } from '../types';\nimport type { File } from '../util/git/types';\n\nexport type Result<T> = T | Promise<T>;\n\nexport interface ManagerData<T> {\n  managerData?: T;\n}\n\nexport interface ExtractConfig {\n  constraints?: Record<string, string>;\n  registryUrls?: string[];\n  endpoint?: string;\n  gradle?: { timeout?: number };\n  aliases?: Record<string, string>;\n  npmrc?: string;\n  npmrcMerge?: boolean;\n  skipInstalls?: boolean;\n  updateInternalDeps?: boolean;\n  deepExtract?: boolean;\n}\n\nexport interface CustomExtractConfig extends ExtractConfig {\n  autoReplaceStringTemplate?: string;\n  matchStrings: string[];\n  matchStringsStrategy?: MatchStringsStrategy;\n  depNameTemplate?: string;\n  lookupNameTemplate?: string;\n  datasourceTemplate?: string;\n  versioningTemplate?: string;\n  depTypeTemplate?: string;\n}\n\nexport interface UpdateArtifactsConfig {\n  isLockFileMaintenance?: boolean;\n  constraints?: Record<string, string>;\n  composerIgnorePlatformReqs?: string[];\n  currentValue?: string;\n  postUpdateOptions?: string[];\n  ignorePlugins?: boolean;\n  ignoreScripts?: boolean;\n  updateType?: UpdateType;\n  newValue?: string;\n  newVersion?: string;\n  newMajor?: number;\n  aliases?: Record<string, string>;\n}\n\nexport interface RangeConfig<T = Record<string, any>> extends ManagerData<T> {\n  currentValue?: string;\n  depName?: string;\n  depType?: string;\n  manager?: string;\n  packageJsonType?: 'app' | 'library';\n  rangeStrategy: RangeStrategy;\n}\n\nexport interface NpmLockFiles {\n  yarnLock?: string;\n  packageLock?: string;\n  shrinkwrapJson?: string;\n  pnpmShrinkwrap?: string;\n  npmLock?: string;\n  lockFiles?: string[];\n}\n\nexport interface PackageFile<T = Record<string, any>>\n  extends NpmLockFiles,\n    ManagerData<T> {\n  autoReplaceStringTemplate?: string;\n  hasYarnWorkspaces?: boolean;\n  constraints?: Record<string, string>;\n  datasource?: string;\n  registryUrls?: string[];\n  deps: PackageDependency[];\n  lernaClient?: string;\n  lernaPackages?: string[];\n  mavenProps?: Record<string, any>;\n  npmrc?: string;\n  packageFile?: string;\n  packageJsonName?: string;\n  packageJsonType?: 'app' | 'library';\n  packageFileVersion?: string;\n  parent?: string;\n  skipInstalls?: boolean;\n  yarnWorkspacesPackages?: string[] | string;\n  matchStrings?: string[];\n  matchStringsStrategy?: MatchStringsStrategy;\n}\n\nexport interface Package<T> extends ManagerData<T> {\n  currentValue?: string;\n  currentDigest?: string;\n  depName?: string;\n  depType?: string;\n  fileReplacePosition?: number;\n  groupName?: string;\n  lineNumber?: number;\n  lookupName?: string;\n  repo?: string;\n  target?: string;\n  versioning?: string;\n  dataType?: string;\n\n  // npm manager\n  bumpVersion?: ReleaseType | string;\n  npmPackageAlias?: boolean;\n  packageFileVersion?: string;\n  gitRef?: boolean;\n  sourceUrl?: string;\n  githubRepo?: string;\n  pinDigests?: boolean;\n  currentRawValue?: string;\n  major?: { enabled?: boolean };\n  prettyDepType?: any;\n}\n\nexport interface LookupUpdate {\n  bucket?: string;\n  branchName?: string;\n  commitMessageAction?: string;\n  isBump?: boolean;\n  isLockfileUpdate?: boolean;\n  isPin?: boolean;\n  isRange?: boolean;\n  isRollback?: boolean;\n  isReplacement?: boolean;\n  newDigest?: string;\n  newMajor?: number;\n  newMinor?: number;\n  newName?: string;\n  newValue: string;\n  semanticCommitType?: string;\n  pendingChecks?: boolean;\n  pendingVersions?: string[];\n  newVersion?: string;\n  updateType?: UpdateType;\n}\n\nexport interface PackageDependency<T = Record<string, any>> extends Package<T> {\n  newValue?: string;\n  warnings?: ValidationMessage[];\n  commitMessageTopic?: string;\n  currentDigestShort?: string;\n  datasource?: string;\n  deprecationMessage?: string;\n  digestOneAndOnly?: boolean;\n  fixedVersion?: string;\n  currentVersion?: string;\n  lockedVersion?: string;\n  propSource?: string;\n  registryUrls?: string[];\n  rangeStrategy?: RangeStrategy;\n  skipReason?: SkipReason;\n  sourceLine?: number;\n  newVersion?: string;\n  updates?: LookupUpdate[];\n  replaceString?: string;\n  autoReplaceStringTemplate?: string;\n  depIndex?: number;\n  editFile?: string;\n  separateMinorPatch?: boolean;\n  extractVersion?: string;\n}\n\nexport interface Upgrade<T = Record<string, any>>\n  extends Package<T>,\n    NpmLockFiles {\n  isLockfileUpdate?: boolean;\n  currentRawValue?: any;\n  depGroup?: string;\n  name?: string;\n  newDigest?: string;\n  newFrom?: string;\n  newMajor?: number;\n  newName?: string;\n  newValue?: string;\n  packageFile?: string;\n  rangeStrategy?: RangeStrategy;\n  newVersion?: string;\n  updateType?: UpdateType;\n  version?: string;\n  isLockFileMaintenance?: boolean;\n  isRemediation?: boolean;\n  isVulnerabilityAlert?: boolean;\n  deepExtract?: boolean;\n}\n\nexport interface ArtifactError {\n  lockFile?: string;\n  stderr?: string;\n}\n\nexport interface UpdateArtifactsResult {\n  artifactError?: ArtifactError;\n  file?: File;\n}\n\nexport interface UpdateArtifact {\n  packageFileName: string;\n  updatedDeps: PackageDependency[];\n  newPackageFileContent: string;\n  config: UpdateArtifactsConfig;\n}\n\nexport interface UpdateDependencyConfig<T = Record<string, any>> {\n  fileContent: string;\n  upgrade: Upgrade<T>;\n}\n\nexport interface BumpPackageVersionResult {\n  bumpedContent: string | null;\n}\n\nexport interface UpdateLockedConfig {\n  packageFile?: string;\n  packageFileContent?: string;\n  lockFile?: string;\n  lockFileContent?: string;\n  depName?: string;\n  currentVersion?: string;\n  newVersion?: string;\n}\n\nexport interface GlobalManagerConfig {\n  npmrc?: string;\n  npmrcMerge?: boolean;\n}\n\nexport interface ManagerApi {\n  defaultConfig: Record<string, unknown>;\n  language?: ProgrammingLanguage;\n  supportsLockFileMaintenance?: boolean;\n\n  bumpPackageVersion?(\n    content: string,\n    currentValue: string,\n    bumpVersion: ReleaseType | string\n  ): Result<BumpPackageVersionResult>;\n\n  detectGlobalConfig?(): Result<GlobalManagerConfig>;\n\n  extractAllPackageFiles?(\n    config: ExtractConfig,\n    files: string[]\n  ): Result<PackageFile[] | null>;\n\n  extractPackageFile?(\n    content: string,\n    packageFile?: string,\n    config?: ExtractConfig\n  ): Result<PackageFile | null>;\n\n  getRangeStrategy?(config: RangeConfig): RangeStrategy;\n\n  updateArtifacts?(\n    updateArtifact: UpdateArtifact\n  ): Result<UpdateArtifactsResult[] | null>;\n\n  updateDependency?(\n    updateDependencyConfig: UpdateDependencyConfig\n  ): Result<string | null>;\n\n  updateLockedDependency?(\n    config: UpdateLockedConfig\n  ): Result<Record<string, string | null>>;\n}\n\n// TODO: name and properties used by npm manager\nexport interface PostUpdateConfig<T = Record<string, any>>\n  extends Record<string, any>,\n    ManagerData<T> {\n  updatedPackageFiles?: File[];\n  postUpdateOptions?: string[];\n  skipInstalls?: boolean;\n  ignoreScripts?: boolean;\n\n  platform?: string;\n  upgrades?: Upgrade[];\n  npmLock?: string;\n  yarnLock?: string;\n  branchName?: string;\n  reuseExistingBranch?: boolean;\n}\n"]}