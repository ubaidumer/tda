{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/manager/regex/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { URL } from 'url';\nimport { logger } from '../../logger';\nimport { regEx } from '../../util/regex';\nimport * as template from '../../util/template';\nimport type {\n  CustomExtractConfig,\n  PackageDependency,\n  PackageFile,\n  Result,\n} from '../types';\nimport type { ExtractionTemplate } from './types';\n\nexport const defaultConfig = {\n  pinDigests: false,\n};\n\nconst validMatchFields = [\n  'depName',\n  'lookupName',\n  'currentValue',\n  'currentDigest',\n  'datasource',\n  'versioning',\n  'extractVersion',\n  'registryUrl',\n  'depType',\n];\n\nfunction regexMatchAll(regex: RegExp, content: string): RegExpMatchArray[] {\n  const matches: RegExpMatchArray[] = [];\n  let matchResult;\n  do {\n    matchResult = regex.exec(content);\n    if (matchResult) {\n      matches.push(matchResult);\n    }\n  } while (matchResult);\n  return matches;\n}\n\nfunction createDependency(\n  extractionTemplate: ExtractionTemplate,\n  config: CustomExtractConfig,\n  dep?: PackageDependency\n): PackageDependency {\n  const dependency = dep || {};\n  const { groups, replaceString } = extractionTemplate;\n\n  function updateDependency(field: string, value: string): void {\n    switch (field) {\n      case 'registryUrl':\n        // check if URL is valid and pack inside an array\n        try {\n          const url = new URL(value).toString();\n          dependency.registryUrls = [url];\n        } catch (err) {\n          logger.warn({ value }, 'Invalid regex manager registryUrl');\n        }\n        break;\n      default:\n        dependency[field] = value;\n        break;\n    }\n  }\n\n  for (const field of validMatchFields) {\n    const fieldTemplate = `${field}Template`;\n    if (config[fieldTemplate]) {\n      try {\n        const compiled = template.compile(config[fieldTemplate], groups, false);\n        updateDependency(field, compiled);\n      } catch (err) {\n        logger.warn(\n          { template: config[fieldTemplate] },\n          'Error compiling template for custom manager'\n        );\n        return null;\n      }\n    } else if (groups[field]) {\n      updateDependency(field, groups[field]);\n    }\n  }\n  dependency.replaceString = replaceString;\n  return dependency;\n}\n\nfunction handleAny(\n  content: string,\n  packageFile: string,\n  config: CustomExtractConfig\n): PackageDependency[] {\n  return config.matchStrings\n    .map((matchString) => regEx(matchString, 'g'))\n    .flatMap((regex) => regexMatchAll(regex, content)) // match all regex to content, get all matches, reduce to single array\n    .map((matchResult) =>\n      createDependency(\n        { groups: matchResult.groups, replaceString: matchResult[0] },\n        config\n      )\n    );\n}\n\nfunction mergeGroups(\n  mergedGroup: Record<string, string>,\n  secondGroup: Record<string, string>\n): Record<string, string> {\n  return { ...mergedGroup, ...secondGroup };\n}\n\nexport function mergeExtractionTemplate(\n  base: ExtractionTemplate,\n  addition: ExtractionTemplate\n): ExtractionTemplate {\n  return {\n    groups: mergeGroups(base.groups, addition.groups),\n    replaceString: addition.replaceString ?? base.replaceString,\n  };\n}\n\nfunction handleCombination(\n  content: string,\n  packageFile: string,\n  config: CustomExtractConfig\n): PackageDependency[] {\n  const matches = config.matchStrings\n    .map((matchString) => regEx(matchString, 'g'))\n    .flatMap((regex) => regexMatchAll(regex, content)); // match all regex to content, get all matches, reduce to single array\n\n  if (!matches.length) {\n    return [];\n  }\n\n  const extraction = matches\n    .map((match) => ({\n      groups: match.groups,\n      replaceString: match?.groups?.currentValue ? match[0] : undefined,\n    }))\n    .reduce((base, addition) => mergeExtractionTemplate(base, addition));\n  return [createDependency(extraction, config)];\n}\n\nfunction handleRecursive(\n  content: string,\n  packageFile: string,\n  config: CustomExtractConfig,\n  index = 0,\n  combinedGroups: Record<string, string> = {}\n): PackageDependency[] {\n  const regexes = config.matchStrings.map((matchString) =>\n    regEx(matchString, 'g')\n  );\n  // abort if we have no matchString anymore\n  if (!regexes[index]) {\n    return [];\n  }\n  return regexMatchAll(regexes[index], content).flatMap((match) => {\n    // if we have a depName and a currentValue which have the minimal viable definition\n    if (match?.groups?.depName && match?.groups?.currentValue) {\n      return createDependency(\n        {\n          groups: mergeGroups(combinedGroups, match.groups),\n          replaceString: match[0],\n        },\n        config\n      );\n    }\n\n    return handleRecursive(\n      match[0],\n      packageFile,\n      config,\n      index + 1,\n      mergeGroups(combinedGroups, match.groups || {})\n    );\n  });\n}\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n  config: CustomExtractConfig\n): Result<PackageFile | null> {\n  let deps: PackageDependency[];\n  switch (config.matchStringsStrategy) {\n    default:\n    case 'any':\n      deps = handleAny(content, packageFile, config);\n      break;\n    case 'combination':\n      deps = handleCombination(content, packageFile, config);\n      break;\n    case 'recursive':\n      deps = handleRecursive(content, packageFile, config);\n      break;\n  }\n\n  // filter all null values\n  deps = deps.filter(Boolean);\n  if (deps.length) {\n    const res: PackageFile = { deps, matchStrings: config.matchStrings };\n    if (config.matchStringsStrategy) {\n      res.matchStringsStrategy = config.matchStringsStrategy;\n    }\n    // copy over templates for autoreplace\n    for (const field of validMatchFields.map((f) => `${f}Template`)) {\n      if (config[field]) {\n        res[field] = config[field];\n      }\n    }\n    if (config.autoReplaceStringTemplate) {\n      res.autoReplaceStringTemplate = config.autoReplaceStringTemplate;\n    }\n    return res;\n  }\n\n  return null;\n}\n"]}