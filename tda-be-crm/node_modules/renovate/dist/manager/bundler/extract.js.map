{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/bundler/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { RubyGemsDatasource } from '../../datasource/rubygems';\nimport { logger } from '../../logger';\nimport { readLocalFile } from '../../util/fs';\nimport { regEx } from '../../util/regex';\nimport type { PackageDependency, PackageFile } from '../types';\nimport { extractLockFileEntries } from './locked-version';\n\nexport async function extractPackageFile(\n  content: string,\n  fileName?: string\n): Promise<PackageFile | null> {\n  const res: PackageFile = {\n    registryUrls: [],\n    deps: [],\n  };\n  const lines = content.split('\\n');\n  const delimiters = ['\"', \"'\"];\n  for (let lineNumber = 0; lineNumber < lines.length; lineNumber += 1) {\n    const line = lines[lineNumber];\n    let sourceMatch: RegExpMatchArray;\n    for (const delimiter of delimiters) {\n      sourceMatch =\n        sourceMatch ||\n        regEx(`^source ${delimiter}([^${delimiter}]+)${delimiter}\\\\s*$`).exec(\n          // TODO #12071\n          line\n        );\n    }\n    if (sourceMatch) {\n      res.registryUrls.push(sourceMatch[1]);\n    }\n    let rubyMatch: RegExpMatchArray;\n    for (const delimiter of delimiters) {\n      rubyMatch =\n        rubyMatch ||\n        regEx(`^ruby ${delimiter}([^${delimiter}]+)${delimiter}`).exec(line); // TODO #12071\n    }\n    if (rubyMatch) {\n      res.constraints = { ruby: rubyMatch[1] };\n    }\n    const gemMatchRegex = regEx(\n      `^\\\\s*gem\\\\s+(['\"])(?<depName>[^'\"]+)(['\"])(\\\\s*,\\\\s*(?<currentValue>(['\"])[^'\"]+['\"](\\\\s*,\\\\s*['\"][^'\"]+['\"])?))?`\n    ); // TODO #12071\n    const gemMatch = gemMatchRegex.exec(line);\n    if (gemMatch) {\n      const dep: PackageDependency = {\n        depName: gemMatch.groups.depName,\n        managerData: { lineNumber },\n      };\n      if (gemMatch.groups.currentValue) {\n        const currentValue = gemMatch.groups.currentValue;\n        dep.currentValue = regEx(/\\s*,\\s*/).test(currentValue) // TODO #12071\n          ? currentValue\n          : currentValue.slice(1, -1);\n      }\n      dep.datasource = RubyGemsDatasource.id;\n      res.deps.push(dep);\n    }\n    const groupMatch = regEx(/^group\\s+(.*?)\\s+do/).exec(line); // TODO #12071\n    if (groupMatch) {\n      const depTypes = groupMatch[1]\n        .split(',')\n        .map((group) => group.trim())\n        .map((group) => group.replace(regEx(/^:/), '')); // TODO #12071\n      const groupLineNumber = lineNumber;\n      let groupContent = '';\n      let groupLine = '';\n      while (lineNumber < lines.length && groupLine !== 'end') {\n        lineNumber += 1;\n        groupLine = lines[lineNumber];\n        if (groupLine !== 'end') {\n          groupContent += (groupLine || '').replace(regEx(/^ {2}/), '') + '\\n'; // TODO #12071\n        }\n      }\n      const groupRes = await extractPackageFile(groupContent);\n      if (groupRes) {\n        res.deps = res.deps.concat(\n          groupRes.deps.map((dep) => ({\n            ...dep,\n            depTypes,\n            managerData: {\n              lineNumber:\n                Number(dep.managerData.lineNumber) + groupLineNumber + 1,\n            },\n          }))\n        );\n      }\n    }\n    for (const delimiter of delimiters) {\n      const sourceBlockMatch = regEx(\n        `^source\\\\s+${delimiter}(.*?)${delimiter}\\\\s+do` // TODO #12071\n      ).exec(line);\n      if (sourceBlockMatch) {\n        const repositoryUrl = sourceBlockMatch[1];\n        const sourceLineNumber = lineNumber;\n        let sourceContent = '';\n        let sourceLine = '';\n        while (lineNumber < lines.length && sourceLine.trim() !== 'end') {\n          lineNumber += 1;\n          sourceLine = lines[lineNumber];\n          // istanbul ignore if\n          if (sourceLine === null || sourceLine === undefined) {\n            logger.info({ content, fileName }, 'Undefined sourceLine');\n            sourceLine = 'end';\n          }\n          if (sourceLine !== 'end') {\n            sourceContent += sourceLine.replace(regEx(/^ {2}/), '') + '\\n'; // TODO #12071\n          }\n        }\n        const sourceRes = await extractPackageFile(sourceContent);\n        if (sourceRes) {\n          res.deps = res.deps.concat(\n            sourceRes.deps.map((dep) => ({\n              ...dep,\n              registryUrls: [repositoryUrl],\n              managerData: {\n                lineNumber:\n                  Number(dep.managerData.lineNumber) + sourceLineNumber + 1,\n              },\n            }))\n          );\n        }\n      }\n    }\n    const platformsMatch = regEx(/^platforms\\s+(.*?)\\s+do/).test(line); // TODO #12071\n    if (platformsMatch) {\n      const platformsLineNumber = lineNumber;\n      let platformsContent = '';\n      let platformsLine = '';\n      while (lineNumber < lines.length && platformsLine !== 'end') {\n        lineNumber += 1;\n        platformsLine = lines[lineNumber];\n        if (platformsLine !== 'end') {\n          platformsContent += platformsLine.replace(regEx(/^ {2}/), '') + '\\n'; // TODO #12071\n        }\n      }\n      const platformsRes = await extractPackageFile(platformsContent);\n      if (platformsRes) {\n        res.deps = res.deps.concat(\n          platformsRes.deps.map((dep) => ({\n            ...dep,\n            managerData: {\n              lineNumber:\n                Number(dep.managerData.lineNumber) + platformsLineNumber + 1,\n            },\n          }))\n        );\n      }\n    }\n    const ifMatch = regEx(/^if\\s+(.*?)/).test(line); // TODO #12071\n    if (ifMatch) {\n      const ifLineNumber = lineNumber;\n      let ifContent = '';\n      let ifLine = '';\n      while (lineNumber < lines.length && ifLine !== 'end') {\n        lineNumber += 1;\n        ifLine = lines[lineNumber];\n        if (ifLine !== 'end') {\n          ifContent += ifLine.replace(regEx(/^ {2}/), '') + '\\n'; // TODO #12071\n        }\n      }\n      const ifRes = await extractPackageFile(ifContent);\n      if (ifRes) {\n        res.deps = res.deps.concat(\n          ifRes.deps.map((dep) => ({\n            ...dep,\n            managerData: {\n              lineNumber: Number(dep.managerData.lineNumber) + ifLineNumber + 1,\n            },\n          }))\n        );\n      }\n    }\n  }\n  if (!res.deps.length && !res.registryUrls.length) {\n    return null;\n  }\n\n  if (fileName) {\n    const gemfileLock = fileName + '.lock';\n    const lockContent = await readLocalFile(gemfileLock, 'utf8');\n    if (lockContent) {\n      logger.debug({ packageFile: fileName }, 'Found Gemfile.lock file');\n      res.lockFiles = [gemfileLock];\n      const lockedEntries = extractLockFileEntries(lockContent);\n      for (const dep of res.deps) {\n        const lockedDepValue = lockedEntries.get(dep.depName);\n        if (lockedDepValue) {\n          dep.lockedVersion = lockedDepValue;\n        }\n      }\n      const bundledWith = regEx(/\\nBUNDLED WITH\\n\\s+(.*?)(\\n|$)/).exec(\n        lockContent\n      );\n      if (bundledWith) {\n        res.constraints = res.constraints || {};\n        res.constraints.bundler = bundledWith[1];\n      }\n    }\n  }\n  return res;\n}\n"]}