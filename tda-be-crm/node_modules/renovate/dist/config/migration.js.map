{"version":3,"file":"migration.js","sourceRoot":"","sources":["../../lib/config/migration.ts"],"names":[],"mappings":"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","sourcesContent":["import later from '@breejs/later';\nimport is from '@sindresorhus/is';\nimport { dequal } from 'dequal';\nimport { logger } from '../logger';\nimport { clone } from '../util/clone';\nimport { regEx } from '../util/regex';\nimport { GlobalConfig } from './global';\nimport { MigrationsService } from './migrations';\nimport { getOptions } from './options';\nimport { removedPresets } from './presets/common';\nimport type {\n  MigratedConfig,\n  MigratedRenovateConfig,\n  RenovateConfig,\n  RenovateOptions,\n} from './types';\nimport { mergeChildConfig } from './utils';\n\nconst options = getOptions();\n\nlet optionTypes: Record<string, RenovateOptions['type']>;\n\n// Returns a migrated config\nexport function migrateConfig(\n  config: RenovateConfig,\n  // TODO: remove any type (#9611)\n  parentKey?: string | any\n): MigratedConfig {\n  try {\n    if (!optionTypes) {\n      optionTypes = {};\n      options.forEach((option) => {\n        optionTypes[option.name] = option.type;\n      });\n    }\n    const newConfig = MigrationsService.run(config);\n    const migratedConfig = clone(newConfig) as MigratedRenovateConfig;\n    const depTypes = [\n      'dependencies',\n      'devDependencies',\n      'engines',\n      'optionalDependencies',\n      'peerDependencies',\n    ];\n    const { migratePresets } = GlobalConfig.get();\n    for (const [key, val] of Object.entries(config)) {\n      if (key === 'pathRules') {\n        if (is.array(val)) {\n          migratedConfig.packageRules = is.array(migratedConfig.packageRules)\n            ? migratedConfig.packageRules\n            : [];\n          migratedConfig.packageRules = val.concat(migratedConfig.packageRules);\n        }\n        delete migratedConfig.pathRules;\n      } else if (key === 'suppressNotifications') {\n        if (is.nonEmptyArray(val) && val.includes('prEditNotification')) {\n          migratedConfig.suppressNotifications =\n            migratedConfig.suppressNotifications.filter(\n              (item) => item !== 'prEditNotification'\n            );\n        }\n      } else if (key.startsWith('masterIssue')) {\n        const newKey = key.replace('masterIssue', 'dependencyDashboard');\n        migratedConfig[newKey] = val;\n        if (optionTypes[newKey] === 'boolean' && val === 'true') {\n          migratedConfig[newKey] = true;\n        }\n        delete migratedConfig[key];\n      } else if (key === 'semanticCommits') {\n        if (val === true) {\n          migratedConfig.semanticCommits = 'enabled';\n        } else if (val === false) {\n          migratedConfig.semanticCommits = 'disabled';\n        } else if (val !== 'enabled' && val !== 'disabled') {\n          migratedConfig.semanticCommits = 'auto';\n        }\n      } else if (key === 'enabledManagers' && is.array(val)) {\n        // Replace yarn with npm, since yarn actually uses npm as package manager\n        migratedConfig.enabledManagers = migratedConfig.enabledManagers.map(\n          (element) => (element === 'yarn' ? 'npm' : element)\n        );\n      } else if (parentKey === 'hostRules' && key === 'platform') {\n        migratedConfig.hostType = val;\n        delete migratedConfig.platform;\n      } else if (parentKey === 'hostRules' && key === 'endpoint') {\n        migratedConfig.matchHost ||= val;\n        delete migratedConfig.endpoint;\n      } else if (parentKey === 'hostRules' && key === 'host') {\n        migratedConfig.matchHost ||= val;\n        delete migratedConfig.host;\n      } else if (parentKey === 'hostRules' && key === 'baseUrl') {\n        migratedConfig.matchHost ||= val;\n        delete migratedConfig.baseUrl;\n      } else if (parentKey === 'hostRules' && key === 'hostName') {\n        migratedConfig.matchHost ||= val;\n        delete migratedConfig.hostName;\n      } else if (parentKey === 'hostRules' && key === 'domainName') {\n        migratedConfig.matchHost ||= val;\n        delete migratedConfig.domainName;\n      } else if (key === 'packageRules' && is.plainObject(val)) {\n        migratedConfig.packageRules = is.array(migratedConfig.packageRules)\n          ? migratedConfig.packageRules\n          : [];\n        migratedConfig.packageRules.push(val);\n      } else if (key === 'packageFiles' && is.array(val)) {\n        const fileList = [];\n        for (const packageFile of val) {\n          if (is.object(packageFile) && !is.array(packageFile)) {\n            fileList.push((packageFile as any).packageFile);\n            if (Object.keys(packageFile).length > 1) {\n              migratedConfig.packageRules = is.array(\n                migratedConfig.packageRules\n              )\n                ? migratedConfig.packageRules\n                : [];\n              const payload = migrateConfig(\n                packageFile as RenovateConfig,\n                key\n              ).migratedConfig;\n              for (const subrule of payload.packageRules || []) {\n                subrule.paths = [(packageFile as any).packageFile];\n                migratedConfig.packageRules.push(subrule);\n              }\n              delete payload.packageFile;\n              delete payload.packageRules;\n              if (Object.keys(payload).length) {\n                migratedConfig.packageRules.push({\n                  ...payload,\n                  paths: [(packageFile as any).packageFile],\n                });\n              }\n            }\n          } else {\n            fileList.push(packageFile);\n          }\n        }\n        migratedConfig.includePaths = fileList;\n        delete migratedConfig.packageFiles;\n      } else if (depTypes.includes(key)) {\n        migratedConfig.packageRules = is.array(migratedConfig.packageRules)\n          ? migratedConfig.packageRules\n          : [];\n        const depTypePackageRule = migrateConfig(\n          val as RenovateConfig,\n          key\n        ).migratedConfig;\n        depTypePackageRule.depTypeList = [key];\n        delete depTypePackageRule.packageRules;\n        migratedConfig.packageRules.push(depTypePackageRule);\n        delete migratedConfig[key];\n      } else if (key === 'pinVersions') {\n        delete migratedConfig.pinVersions;\n        if (val === true) {\n          migratedConfig.rangeStrategy = 'pin';\n        } else if (val === false) {\n          migratedConfig.rangeStrategy = 'replace';\n        }\n      } else if (is.string(val) && val.includes('{{baseDir}}')) {\n        migratedConfig[key] = val.replace(\n          regEx(/{{baseDir}}/g), // TODO #12071\n          '{{packageFileDir}}'\n        );\n      } else if (is.string(val) && val.includes('{{depNameShort}}')) {\n        migratedConfig[key] = val.replace(\n          regEx(/{{depNameShort}}/g), // TODO #12071\n          '{{depName}}'\n        );\n      } else if (key === 'gitFs') {\n        delete migratedConfig.gitFs;\n      } else if (key === 'rebaseStalePrs') {\n        delete migratedConfig.rebaseStalePrs;\n        if (!migratedConfig.rebaseWhen) {\n          if (val === null) {\n            migratedConfig.rebaseWhen = 'auto';\n          }\n          if (val === true) {\n            migratedConfig.rebaseWhen = 'behind-base-branch';\n          }\n          if (val === false) {\n            migratedConfig.rebaseWhen = 'conflicted';\n          }\n        }\n      } else if (key === 'rebaseConflictedPrs') {\n        delete migratedConfig.rebaseConflictedPrs;\n        if (val === false) {\n          migratedConfig.rebaseWhen = 'never';\n        }\n      } else if (key === 'ignoreNpmrcFile') {\n        delete migratedConfig.ignoreNpmrcFile;\n        if (!is.string(migratedConfig.npmrc)) {\n          migratedConfig.npmrc = '';\n        }\n      } else if (\n        key === 'branchName' &&\n        is.string(val) &&\n        val?.includes('{{managerBranchPrefix}}')\n      ) {\n        migratedConfig.branchName = val.replace(\n          '{{managerBranchPrefix}}',\n          '{{additionalBranchPrefix}}'\n        );\n      } else if (key === 'managerBranchPrefix') {\n        delete migratedConfig.managerBranchPrefix;\n        migratedConfig.additionalBranchPrefix = val;\n      } else if (\n        key === 'branchPrefix' &&\n        is.string(val) &&\n        val.includes('{{')\n      ) {\n        const templateIndex = val.indexOf(`{{`);\n        migratedConfig.branchPrefix = val.substring(0, templateIndex);\n        migratedConfig.additionalBranchPrefix = val.substring(templateIndex);\n      } else if (key === 'upgradeInRange') {\n        delete migratedConfig.upgradeInRange;\n        if (val === true) {\n          migratedConfig.rangeStrategy = 'bump';\n        }\n      } else if (key === 'versionStrategy') {\n        delete migratedConfig.versionStrategy;\n        if (val === 'widen') {\n          migratedConfig.rangeStrategy = 'widen';\n        }\n      } else if (key === 'semanticPrefix' && is.string(val)) {\n        delete migratedConfig.semanticPrefix;\n        let [text] = val.split(':') as any; // TODO: fixme\n        text = text.split('(');\n        [migratedConfig.semanticCommitType] = text;\n        if (text.length > 1) {\n          [migratedConfig.semanticCommitScope] = text[1].split(')');\n        } else {\n          migratedConfig.semanticCommitScope = null;\n        }\n      } else if (\n        key === 'extends' &&\n        (is.array<string>(val) || is.string(val))\n      ) {\n        if (is.string(migratedConfig.extends)) {\n          migratedConfig.extends = [migratedConfig.extends];\n        }\n        const presets = migratedConfig.extends;\n        for (let i = 0; i < presets.length; i += 1) {\n          const preset = presets[i];\n          if (is.string(preset)) {\n            let newPreset = removedPresets[preset];\n            if (newPreset !== undefined) {\n              presets[i] = newPreset;\n            }\n            newPreset = migratePresets?.[preset];\n            if (newPreset !== undefined) {\n              presets[i] = newPreset;\n            }\n          }\n        }\n        migratedConfig.extends = migratedConfig.extends.filter(Boolean);\n      } else if (key === 'unpublishSafe') {\n        if (val === true) {\n          migratedConfig.extends = migratedConfig.extends || [];\n          if (is.string(migratedConfig.extends)) {\n            migratedConfig.extends = [migratedConfig.extends];\n          }\n          if (\n            ![\n              ':unpublishSafe',\n              'default:unpublishSafe',\n              'npm:unpublishSafe',\n            ].some((x) => migratedConfig.extends.includes(x))\n          ) {\n            migratedConfig.extends.push('npm:unpublishSafe');\n          }\n        }\n        delete migratedConfig.unpublishSafe;\n      } else if (\n        key === 'automergeType' &&\n        is.string(val) &&\n        val.startsWith('branch-')\n      ) {\n        migratedConfig.automergeType = 'branch';\n      } else if (key === 'automergeMinor') {\n        migratedConfig.minor = migratedConfig.minor || {};\n        migratedConfig.minor.automerge = !!val;\n        delete migratedConfig[key];\n      } else if (key === 'automergeMajor') {\n        migratedConfig.major = migratedConfig.major || {};\n        migratedConfig.major.automerge = !!val;\n        delete migratedConfig[key];\n      } else if (key === 'renovateFork' && is.boolean(val)) {\n        delete migratedConfig.renovateFork;\n        migratedConfig.includeForks = val;\n      } else if (key === 'separateMajorReleases') {\n        delete migratedConfig.separateMultipleMajor;\n        migratedConfig.separateMajorMinor = val;\n      } else if (key === 'automergePatch') {\n        migratedConfig.patch = migratedConfig.patch || {};\n        migratedConfig.patch.automerge = !!val;\n        delete migratedConfig[key];\n      } else if (\n        key === 'automerge' &&\n        is.string(val) &&\n        ['none', 'patch', 'minor', 'any'].includes(val)\n      ) {\n        delete migratedConfig.automerge;\n        if (val === 'none') {\n          migratedConfig.automerge = false;\n        } else if (val === 'patch') {\n          migratedConfig.patch = migratedConfig.patch || {};\n          migratedConfig.patch.automerge = true;\n          migratedConfig.minor = migratedConfig.minor || {};\n          migratedConfig.minor.automerge = false;\n          migratedConfig.major = migratedConfig.major || {};\n          migratedConfig.major.automerge = false;\n        } else if (val === 'minor') {\n          migratedConfig.minor = migratedConfig.minor || {};\n          migratedConfig.minor.automerge = true;\n          migratedConfig.major = migratedConfig.major || {};\n          migratedConfig.major.automerge = false;\n        } /* istanbul ignore else: we can never go to else */ else if (\n          val === 'any'\n        ) {\n          migratedConfig.automerge = true;\n        }\n      } else if (key === 'packages') {\n        migratedConfig.packageRules = is.array(migratedConfig.packageRules)\n          ? migratedConfig.packageRules\n          : [];\n        migratedConfig.packageRules = migratedConfig.packageRules.concat(\n          migratedConfig.packages\n        );\n        delete migratedConfig.packages;\n      } else if (key === 'packageName') {\n        migratedConfig.packageNames = [val];\n        delete migratedConfig.packageName;\n      } else if (key === 'packagePattern') {\n        migratedConfig.packagePatterns = [val];\n        delete migratedConfig.packagePattern;\n      } else if (key === 'baseBranch') {\n        migratedConfig.baseBranches = (is.array(val) ? val : [val]) as string[];\n        delete migratedConfig.baseBranch;\n      } else if (key === 'schedule' && val) {\n        // massage to array first\n        const schedules = is.string(val) ? [val] : [...(val as string[])];\n        // split 'and'\n        const schedulesLength = schedules.length;\n        for (let i = 0; i < schedulesLength; i += 1) {\n          if (\n            schedules[i].includes(' and ') &&\n            schedules[i].includes('before ') &&\n            schedules[i].includes('after ')\n          ) {\n            const parsedSchedule = later.parse.text(\n              // We need to massage short hours first before we can parse it\n              schedules[i].replace(regEx(/( \\d?\\d)((a|p)m)/g), '$1:00$2') // TODO #12071\n            ).schedules[0];\n            // Only migrate if the after time is greater than before, e.g. \"after 10pm and before 5am\"\n            if (parsedSchedule?.t_a?.[0] > parsedSchedule?.t_b?.[0]) {\n              const toSplit = schedules[i];\n              schedules[i] = toSplit\n                .replace(\n                  regEx(\n                    /^(.*?)(after|before) (.*?) and (after|before) (.*?)( |$)(.*)/\n                  ), // TODO #12071\n                  '$1$2 $3 $7'\n                )\n                .trim();\n              schedules.push(\n                toSplit\n                  .replace(\n                    regEx(\n                      /^(.*?)(after|before) (.*?) and (after|before) (.*?)( |$)(.*)/\n                    ), // TODO #12071\n                    '$1$4 $5 $7'\n                  )\n                  .trim()\n              );\n            }\n          }\n        }\n        for (let i = 0; i < schedules.length; i += 1) {\n          if (schedules[i].includes('on the last day of the month')) {\n            schedules[i] = schedules[i].replace(\n              'on the last day of the month',\n              'on the first day of the month'\n            );\n          }\n          if (schedules[i].includes('on every weekday')) {\n            schedules[i] = schedules[i].replace(\n              'on every weekday',\n              'every weekday'\n            );\n          }\n          if (schedules[i].endsWith(' every day')) {\n            schedules[i] = schedules[i].replace(' every day', '');\n          }\n          if (\n            regEx(/every (mon|tues|wednes|thurs|fri|satur|sun)day$/).test(\n              schedules[i]\n            ) // TODO #12071\n          ) {\n            schedules[i] = schedules[i].replace(\n              regEx(/every ([a-z]*day)$/), // TODO #12071\n              'on $1'\n            );\n          }\n          if (schedules[i].endsWith('days')) {\n            schedules[i] = schedules[i].replace('days', 'day');\n          }\n        }\n        if (is.string(val) && schedules.length === 1) {\n          [migratedConfig.schedule] = schedules as any; // TODO: fixme\n        } else {\n          migratedConfig.schedule = schedules;\n        }\n      } else if (is.string(val) && val.startsWith('{{semanticPrefix}}')) {\n        migratedConfig[key] = val.replace(\n          '{{semanticPrefix}}',\n          '{{#if semanticCommitType}}{{semanticCommitType}}{{#if semanticCommitScope}}({{semanticCommitScope}}){{/if}}: {{/if}}'\n        );\n      } else if (key === 'depTypes' && is.array(val)) {\n        val.forEach((depType) => {\n          if (is.object(depType) && !is.array(depType)) {\n            const depTypeName = (depType as any).depType;\n            if (depTypeName) {\n              migratedConfig.packageRules = is.array(\n                migratedConfig.packageRules\n              )\n                ? migratedConfig.packageRules\n                : [];\n              const newPackageRule = migrateConfig(\n                depType as RenovateConfig,\n                key\n              ).migratedConfig;\n              delete newPackageRule.depType;\n              newPackageRule.depTypeList = [depTypeName];\n              migratedConfig.packageRules.push(newPackageRule);\n            }\n          }\n        });\n        delete migratedConfig.depTypes;\n      } else if (optionTypes[key] === 'object' && is.boolean(val)) {\n        migratedConfig[key] = { enabled: val };\n      } else if (optionTypes[key] === 'boolean') {\n        if (val === 'true') {\n          migratedConfig[key] = true;\n        } else if (val === 'false') {\n          migratedConfig[key] = false;\n        }\n      } else if (\n        optionTypes[key] === 'string' &&\n        is.array(val) &&\n        val.length === 1\n      ) {\n        migratedConfig[key] = String(val[0]);\n      } else if (key === 'node' && (val as RenovateConfig).enabled === true) {\n        delete migratedConfig.node.enabled;\n        migratedConfig.travis = migratedConfig.travis || {};\n        migratedConfig.travis.enabled = true;\n        if (Object.keys(migratedConfig.node).length) {\n          const subMigrate = migrateConfig(migratedConfig.node, key);\n          migratedConfig.node = subMigrate.migratedConfig;\n        } else {\n          delete migratedConfig.node;\n        }\n      } else if (is.array(val)) {\n        if (is.array(migratedConfig?.[key])) {\n          const newArray = [];\n          for (const item of migratedConfig[key] as unknown[]) {\n            if (is.object(item) && !is.array(item)) {\n              const arrMigrate = migrateConfig(item as RenovateConfig, key);\n              newArray.push(arrMigrate.migratedConfig);\n            } else {\n              newArray.push(item);\n            }\n          }\n          migratedConfig[key] = newArray;\n        }\n      } else if (key === 'compatibility' && is.object(val)) {\n        migratedConfig.constraints = migratedConfig.compatibility;\n        delete migratedConfig.compatibility;\n      } else if (is.object(val)) {\n        const subMigrate = migrateConfig(\n          migratedConfig[key] as RenovateConfig,\n          key\n        );\n        if (subMigrate.isMigrated) {\n          migratedConfig[key] = subMigrate.migratedConfig;\n        }\n      } else if (key === 'raiseDeprecationWarnings') {\n        delete migratedConfig.raiseDeprecationWarnings;\n        if (val === false) {\n          migratedConfig.suppressNotifications =\n            migratedConfig.suppressNotifications || [];\n          migratedConfig.suppressNotifications.push('deprecationWarningIssues');\n        }\n      } else if (key === 'composerIgnorePlatformReqs') {\n        if (val === true) {\n          migratedConfig.composerIgnorePlatformReqs = [];\n        } else if (val === false) {\n          migratedConfig.composerIgnorePlatformReqs = null;\n        }\n      } else if (key === 'azureAutoComplete' || key === 'gitLabAutomerge') {\n        if (migratedConfig[key] !== undefined) {\n          migratedConfig.platformAutomerge = migratedConfig[key];\n        }\n        delete migratedConfig[key];\n      }\n\n      const migratedTemplates = {\n        fromVersion: 'currentVersion',\n        newValueMajor: 'newMajor',\n        newValueMinor: 'newMinor',\n        newVersionMajor: 'newMajor',\n        newVersionMinor: 'newMinor',\n        toVersion: 'newVersion',\n      };\n      if (is.string(migratedConfig[key])) {\n        for (const [from, to] of Object.entries(migratedTemplates)) {\n          migratedConfig[key] = (migratedConfig[key] as string).replace(\n            regEx(from, 'g'), // TODO #12071\n            to\n          );\n        }\n      }\n    }\n    if (migratedConfig.endpoints) {\n      migratedConfig.hostRules = migratedConfig.endpoints;\n      delete migratedConfig.endpoints;\n    }\n    if (is.array(migratedConfig.packageRules)) {\n      const renameMap = {\n        paths: 'matchPaths',\n        languages: 'matchLanguages',\n        baseBranchList: 'matchBaseBranches',\n        managers: 'matchManagers',\n        datasources: 'matchDatasources',\n        depTypeList: 'matchDepTypes',\n        packageNames: 'matchPackageNames',\n        packagePatterns: 'matchPackagePatterns',\n        sourceUrlPrefixes: 'matchSourceUrlPrefixes',\n        updateTypes: 'matchUpdateTypes',\n      };\n      for (const packageRule of migratedConfig.packageRules) {\n        for (const [oldKey, ruleVal] of Object.entries(packageRule)) {\n          const newKey = renameMap[oldKey];\n          if (newKey) {\n            packageRule[newKey] = ruleVal;\n            delete packageRule[oldKey];\n          }\n        }\n      }\n    }\n    // Migrate nested packageRules\n    if (is.nonEmptyArray(migratedConfig.packageRules)) {\n      const existingRules = migratedConfig.packageRules;\n      migratedConfig.packageRules = [];\n      for (const packageRule of existingRules) {\n        if (is.array(packageRule.packageRules)) {\n          logger.debug('Flattening nested packageRules');\n          // merge each subrule and add to the parent list\n          for (const subrule of packageRule.packageRules) {\n            const combinedRule = mergeChildConfig(packageRule, subrule);\n            delete combinedRule.packageRules;\n            migratedConfig.packageRules.push(combinedRule);\n          }\n        } else {\n          migratedConfig.packageRules.push(packageRule);\n        }\n      }\n    }\n    if (is.nonEmptyArray(migratedConfig.matchManagers)) {\n      if (migratedConfig.matchManagers.includes('gradle-lite')) {\n        if (!migratedConfig.matchManagers.includes('gradle')) {\n          migratedConfig.matchManagers.push('gradle');\n        }\n        migratedConfig.matchManagers = migratedConfig.matchManagers.filter(\n          (manager) => manager !== 'gradle-lite'\n        );\n      }\n    }\n    if (is.nonEmptyObject(migratedConfig['gradle-lite'])) {\n      migratedConfig.gradle = mergeChildConfig(\n        migratedConfig.gradle || {},\n        migratedConfig['gradle-lite']\n      );\n    }\n    delete migratedConfig['gradle-lite'];\n    const isMigrated = !dequal(config, migratedConfig);\n    if (isMigrated) {\n      // recursive call in case any migrated configs need further migrating\n      return {\n        isMigrated,\n        migratedConfig: migrateConfig(migratedConfig).migratedConfig,\n      };\n    }\n    return { isMigrated, migratedConfig };\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ config, err }, 'migrateConfig() error');\n    throw err;\n  }\n}\n"]}