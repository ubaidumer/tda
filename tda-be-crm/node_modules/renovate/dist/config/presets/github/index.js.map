{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/config/presets/github/index.ts"],"names":[],"mappings":";;;;AAAA,uEAAkC;AAClC,4CAAyC;AACzC,mFAA8E;AAC9E,sDAAuD;AAEvD,kCAIiB;AAEJ,QAAA,QAAQ,GAAG,yBAAyB,CAAC;AAElD,MAAM,IAAI,GAAG,IAAI,mBAAU,EAAE,CAAC;AAEvB,KAAK,UAAU,aAAa,CACjC,IAAY,EACZ,QAAgB,EAChB,QAAgB,EAChB,UAAmB;IAEnB,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,IAAI,YAAE,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;QACjC,GAAG,GAAG,QAAQ,UAAU,EAAE,CAAC;KAC5B;IACD,MAAM,GAAG,GAAG,GAAG,QAAQ,SAAS,IAAI,aAAa,QAAQ,GAAG,GAAG,EAAE,CAAC;IAClE,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,YAAY,CAAC,CAAC;IACpC,IAAI,GAAkC,CAAC;IACvC,IAAI;QACF,GAAG,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;KAC/B;IAAC,OAAO,GAAG,EAAE;QACZ,6CAA6C;QAC7C,IAAI,GAAG,YAAY,uCAAiB,EAAE;YACpC,MAAM,GAAG,CAAC;SACX;QACD,eAAM,CAAC,KAAK,CACV,EAAE,UAAU,EAAE,GAAG,CAAC,UAAU,EAAE,GAAG,EAAE,EACnC,sBAAsB,QAAQ,YAAY,CAC3C,CAAC;QACF,MAAM,IAAI,KAAK,CAAC,2BAAoB,CAAC,CAAC;KACvC;IACD,IAAI;QACF,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;QACnE,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACnC,OAAO,MAAM,CAAC;KACf;IAAC,OAAO,GAAG,EAAE;QACZ,MAAM,IAAI,KAAK,CAAC,0BAAmB,CAAC,CAAC;KACtC;AACH,CAAC;AAjCD,sCAiCC;AAED,SAAgB,qBAAqB,CACnC,OAAe,EACf,UAAkB,EAClB,UAAkB,EAClB,QAAQ,GAAG,gBAAQ,EACnB,UAAmB;IAEnB,OAAO,IAAA,kBAAW,EAAC;QACjB,OAAO;QACP,UAAU;QACV,UAAU;QACV,QAAQ;QACR,UAAU;QACV,KAAK,EAAE,aAAa;KACrB,CAAC,CAAC;AACL,CAAC;AAfD,sDAeC;AAED,SAAgB,SAAS,CAAC,EACxB,WAAW,EAAE,OAAO,EACpB,UAAU,GAAG,SAAS,EACtB,UAAU,EACV,UAAU,GAAG,IAAI,GACJ;IACb,OAAO,qBAAqB,CAC1B,OAAO,EACP,UAAU,EACV,UAAU,EACV,gBAAQ,EACR,UAAU,CACX,CAAC;AACJ,CAAC;AAbD,8BAaC","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport { GithubHttp } from '../../../util/http/github';\nimport type { Preset, PresetConfig } from '../types';\nimport {\n  PRESET_DEP_NOT_FOUND,\n  PRESET_INVALID_JSON,\n  fetchPreset,\n} from '../util';\n\nexport const Endpoint = 'https://api.github.com/';\n\nconst http = new GithubHttp();\n\nexport async function fetchJSONFile(\n  repo: string,\n  fileName: string,\n  endpoint: string,\n  packageTag?: string\n): Promise<Preset> {\n  let ref = '';\n  if (is.nonEmptyString(packageTag)) {\n    ref = `?ref=${packageTag}`;\n  }\n  const url = `${endpoint}repos/${repo}/contents/${fileName}${ref}`;\n  logger.trace({ url }, `Preset URL`);\n  let res: { body: { content: string } };\n  try {\n    res = await http.getJson(url);\n  } catch (err) {\n    // istanbul ignore if: not testable with nock\n    if (err instanceof ExternalHostError) {\n      throw err;\n    }\n    logger.debug(\n      { statusCode: err.statusCode, url },\n      `Failed to retrieve ${fileName} from repo`\n    );\n    throw new Error(PRESET_DEP_NOT_FOUND);\n  }\n  try {\n    const content = Buffer.from(res.body.content, 'base64').toString();\n    const parsed = JSON.parse(content);\n    return parsed;\n  } catch (err) {\n    throw new Error(PRESET_INVALID_JSON);\n  }\n}\n\nexport function getPresetFromEndpoint(\n  pkgName: string,\n  filePreset: string,\n  presetPath: string,\n  endpoint = Endpoint,\n  packageTag?: string\n): Promise<Preset> {\n  return fetchPreset({\n    pkgName,\n    filePreset,\n    presetPath,\n    endpoint,\n    packageTag,\n    fetch: fetchJSONFile,\n  });\n}\n\nexport function getPreset({\n  packageName: pkgName,\n  presetName = 'default',\n  presetPath,\n  packageTag = null,\n}: PresetConfig): Promise<Preset> {\n  return getPresetFromEndpoint(\n    pkgName,\n    presetName,\n    presetPath,\n    Endpoint,\n    packageTag\n  );\n}\n"]}