{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../../lib/config/presets/local/common.ts"],"names":[],"mappings":";;;AAAA,4CAAyC;AACzC,gDAA6C;AAC7C,mFAA8E;AAE9E,kCAIiB;AAEV,KAAK,UAAU,aAAa,CACjC,IAAY,EACZ,QAAgB,EAChB,YAAoB,IAAI;IAExB,IAAI,GAAW,CAAC;IAChB,IAAI;QACF,GAAG,GAAG,MAAM,mBAAQ,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;KACjD;IAAC,OAAO,GAAG,EAAE;QACZ,6CAA6C;QAC7C,IAAI,GAAG,YAAY,uCAAiB,EAAE;YACpC,MAAM,GAAG,CAAC;SACX;QAED,eAAM,CAAC,KAAK,CACV,EAAE,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,EACvB,sBAAsB,QAAQ,cAAc,IAAI,EAAE,CACnD,CAAC;QAEF,MAAM,IAAI,KAAK,CAAC,2BAAoB,CAAC,CAAC;KACvC;IAED,IAAI;QACF,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KACxB;IAAC,OAAO,GAAG,EAAE;QACZ,MAAM,IAAI,KAAK,CAAC,0BAAmB,CAAC,CAAC;KACtC;AACH,CAAC;AA3BD,sCA2BC;AAED,SAAgB,qBAAqB,CACnC,OAAe,EACf,UAAkB,EAClB,UAAkB,EAClB,QAAgB;IAEhB,OAAO,IAAA,kBAAW,EAAC;QACjB,OAAO;QACP,UAAU;QACV,UAAU;QACV,QAAQ;QACR,KAAK,EAAE,aAAa;KACrB,CAAC,CAAC;AACL,CAAC;AAbD,sDAaC","sourcesContent":["import { logger } from '../../../logger';\nimport { platform } from '../../../platform';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport type { Preset } from '../types';\nimport {\n  PRESET_DEP_NOT_FOUND,\n  PRESET_INVALID_JSON,\n  fetchPreset,\n} from '../util';\n\nexport async function fetchJSONFile(\n  repo: string,\n  fileName: string,\n  _endpoint: string = null\n): Promise<Preset> {\n  let raw: string;\n  try {\n    raw = await platform.getRawFile(fileName, repo);\n  } catch (err) {\n    // istanbul ignore if: not testable with nock\n    if (err instanceof ExternalHostError) {\n      throw err;\n    }\n\n    logger.debug(\n      { err, repo, fileName },\n      `Failed to retrieve ${fileName} from repo ${repo}`\n    );\n\n    throw new Error(PRESET_DEP_NOT_FOUND);\n  }\n\n  try {\n    return JSON.parse(raw);\n  } catch (err) {\n    throw new Error(PRESET_INVALID_JSON);\n  }\n}\n\nexport function getPresetFromEndpoint(\n  pkgName: string,\n  filePreset: string,\n  presetPath: string,\n  endpoint: string\n): Promise<Preset> {\n  return fetchPreset({\n    pkgName,\n    filePreset,\n    presetPath,\n    endpoint,\n    fetch: fetchJSONFile,\n  });\n}\n"]}