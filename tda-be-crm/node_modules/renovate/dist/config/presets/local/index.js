"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPreset = void 0;
const tslib_1 = require("tslib");
const azure = (0, tslib_1.__importStar)(require("../azure"));
const bitbucket = (0, tslib_1.__importStar)(require("../bitbucket"));
const bitbucketServer = (0, tslib_1.__importStar)(require("../bitbucket-server"));
const gitea = (0, tslib_1.__importStar)(require("../gitea"));
const github = (0, tslib_1.__importStar)(require("../github"));
const gitlab = (0, tslib_1.__importStar)(require("../gitlab"));
const resolvers = {
    ["azure" /* Azure */]: azure,
    ["bitbucket" /* Bitbucket */]: bitbucket,
    ["bitbucket-server" /* BitbucketServer */]: bitbucketServer,
    ["gitea" /* Gitea */]: gitea,
    ["github" /* Github */]: github,
    ["gitlab" /* Gitlab */]: gitlab,
};
function getPreset({ packageName: pkgName, presetName = 'default', presetPath, packageTag, baseConfig, }) {
    const { platform, endpoint } = baseConfig;
    if (!platform) {
        throw new Error(`Missing platform config for local preset.`);
    }
    const resolver = resolvers[platform.toLowerCase()];
    if (!resolver) {
        throw new Error(`Unsupported platform '${baseConfig.platform}' for local preset.`);
    }
    return resolver.getPresetFromEndpoint(pkgName, presetName, presetPath, endpoint, packageTag);
}
exports.getPreset = getPreset;
//# sourceMappingURL=index.js.map