{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/config/presets/npm/index.ts"],"names":[],"mappings":";;;AAAA,yDAA+D;AAE/D,4CAAyC;AACzC,6CAA0C;AAE1C,kCAIiB;AAEjB,MAAM,EAAE,GAAG,KAAK,CAAC;AAEjB,MAAM,IAAI,GAAG,IAAI,WAAI,CAAC,EAAE,CAAC,CAAC;AAEnB,KAAK,UAAU,SAAS,CAAC,EAC9B,WAAW,EACX,UAAU,GAAG,SAAS,GACT;IACb,IAAI,GAAG,CAAC;IACR,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,IAAA,sBAAc,EAAC,WAAW,CAAC,CAAC;QAC5D,MAAM,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC,OAAO,CAAc,UAAU,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;aACpE,IAAI,CAAC;QACR,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,CAAC;KAC/C;IAAC,OAAO,GAAG,EAAE;QACZ,MAAM,IAAI,KAAK,CAAC,2BAAoB,CAAC,CAAC;KACvC;IACD,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,EAAE;QAC3B,MAAM,IAAI,KAAK,CAAC,uCAAgC,CAAC,CAAC;KACnD;IACD,MAAM,YAAY,GAAG,GAAG,CAAC,iBAAiB,CAAC,CAAC,UAAU,CAAC,CAAC;IACxD,IAAI,CAAC,YAAY,EAAE;QACjB,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC;QACxD,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,UAAU,EAAE,EAC3B,yCAAyC,CAC1C,CAAC;QACF,MAAM,IAAI,KAAK,CAAC,uBAAgB,CAAC,CAAC;KACnC;IACD,OAAO,YAAY,CAAC;AACtB,CAAC;AA1BD,8BA0BC","sourcesContent":["import { resolvePackage } from '../../../datasource/npm/npmrc';\nimport { NpmResponse } from '../../../datasource/npm/types';\nimport { logger } from '../../../logger';\nimport { Http } from '../../../util/http';\nimport type { Preset, PresetConfig } from '../types';\nimport {\n  PRESET_DEP_NOT_FOUND,\n  PRESET_NOT_FOUND,\n  PRESET_RENOVATE_CONFIG_NOT_FOUND,\n} from '../util';\n\nconst id = 'npm';\n\nconst http = new Http(id);\n\nexport async function getPreset({\n  packageName,\n  presetName = 'default',\n}: PresetConfig): Promise<Preset> {\n  let dep;\n  try {\n    const { headers, packageUrl } = resolvePackage(packageName);\n    const body = (await http.getJson<NpmResponse>(packageUrl, { headers }))\n      .body;\n    dep = body.versions[body['dist-tags'].latest];\n  } catch (err) {\n    throw new Error(PRESET_DEP_NOT_FOUND);\n  }\n  if (!dep['renovate-config']) {\n    throw new Error(PRESET_RENOVATE_CONFIG_NOT_FOUND);\n  }\n  const presetConfig = dep['renovate-config'][presetName];\n  if (!presetConfig) {\n    const presetNames = Object.keys(dep['renovate-config']);\n    logger.debug(\n      { presetNames, presetName },\n      'Preset not found within renovate-config'\n    );\n    throw new Error(PRESET_NOT_FOUND);\n  }\n  return presetConfig;\n}\n"]}