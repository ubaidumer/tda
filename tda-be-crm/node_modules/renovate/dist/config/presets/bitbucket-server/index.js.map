{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/config/presets/bitbucket-server/index.ts"],"names":[],"mappings":";;;AAAA,4CAAyC;AACzC,mFAA8E;AAE9E,0EAG6C;AAE7C,kCAIiB;AAEjB,MAAM,IAAI,GAAG,IAAI,sCAAmB,EAAE,CAAC;AAEhC,KAAK,UAAU,aAAa,CACjC,IAAY,EACZ,QAAgB,EAChB,QAAgB;IAEhB,MAAM,CAAC,UAAU,EAAE,cAAc,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACrD,IAAA,6BAAU,EAAC,QAAQ,CAAC,CAAC;IACrB,MAAM,GAAG,GAAG,yBAAyB,UAAU,UAAU,cAAc,WAAW,QAAQ,cAAc,CAAC;IACzG,IAAI,GAAuB,CAAC;IAC5B,IAAI;QACF,GAAG,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;KAC/B;IAAC,OAAO,GAAG,EAAE;QACZ,6CAA6C;QAC7C,IAAI,GAAG,YAAY,uCAAiB,EAAE;YACpC,MAAM,GAAG,CAAC;SACX;QACD,eAAM,CAAC,KAAK,CACV,EAAE,UAAU,EAAE,GAAG,CAAC,UAAU,EAAE,GAAG,EAAE,GAAG,QAAQ,GAAG,GAAG,EAAE,EAAE,EACxD,sBAAsB,QAAQ,YAAY,CAC3C,CAAC;QACF,MAAM,IAAI,KAAK,CAAC,2BAAoB,CAAC,CAAC;KACvC;IACD,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE;QACxB,eAAM,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,wBAAwB,CAAC,CAAC;QAC/D,MAAM,IAAI,KAAK,CAAC,0BAAmB,CAAC,CAAC;KACtC;IACD,IAAI;QACF,MAAM,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC3D,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACnC,OAAO,MAAM,CAAC;KACf;IAAC,OAAO,GAAG,EAAE;QACZ,MAAM,IAAI,KAAK,CAAC,0BAAmB,CAAC,CAAC;KACtC;AACH,CAAC;AAjCD,sCAiCC;AAED,SAAgB,qBAAqB,CACnC,OAAe,EACf,UAAkB,EAClB,UAAkB,EAClB,QAAgB;IAEhB,OAAO,IAAA,kBAAW,EAAC;QACjB,OAAO;QACP,UAAU;QACV,UAAU;QACV,QAAQ;QACR,KAAK,EAAE,aAAa;KACrB,CAAC,CAAC;AACL,CAAC;AAbD,sDAaC","sourcesContent":["import { logger } from '../../../logger';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport type { FileData } from '../../../types/platform/bitbucket-server';\nimport {\n  BitbucketServerHttp,\n  setBaseUrl,\n} from '../../../util/http/bitbucket-server';\nimport type { Preset } from '../types';\nimport {\n  PRESET_DEP_NOT_FOUND,\n  PRESET_INVALID_JSON,\n  fetchPreset,\n} from '../util';\n\nconst http = new BitbucketServerHttp();\n\nexport async function fetchJSONFile(\n  repo: string,\n  fileName: string,\n  endpoint: string\n): Promise<Preset> {\n  const [projectKey, repositorySlug] = repo.split('/');\n  setBaseUrl(endpoint);\n  const url = `rest/api/1.0/projects/${projectKey}/repos/${repositorySlug}/browse/${fileName}?limit=20000`;\n  let res: { body: FileData };\n  try {\n    res = await http.getJson(url);\n  } catch (err) {\n    // istanbul ignore if: not testable with nock\n    if (err instanceof ExternalHostError) {\n      throw err;\n    }\n    logger.debug(\n      { statusCode: err.statusCode, url: `${endpoint}${url}` },\n      `Failed to retrieve ${fileName} from repo`\n    );\n    throw new Error(PRESET_DEP_NOT_FOUND);\n  }\n  if (!res.body.isLastPage) {\n    logger.warn({ size: res.body.size }, 'Renovate config to big');\n    throw new Error(PRESET_INVALID_JSON);\n  }\n  try {\n    const content = res.body.lines.map((l) => l.text).join('');\n    const parsed = JSON.parse(content);\n    return parsed;\n  } catch (err) {\n    throw new Error(PRESET_INVALID_JSON);\n  }\n}\n\nexport function getPresetFromEndpoint(\n  pkgName: string,\n  filePreset: string,\n  presetPath: string,\n  endpoint: string\n): Promise<Preset> {\n  return fetchPreset({\n    pkgName,\n    filePreset,\n    presetPath,\n    endpoint,\n    fetch: fetchJSONFile,\n  });\n}\n"]}