{"version":3,"file":"migrations-service.js","sourceRoot":"","sources":["../../../lib/config/migrations/migrations-service.ts"],"names":[],"mappings":";;;AACA,gFAA2E;AAC3E,gFAA2E;AAC3E,8EAAyE;AACzE,0EAAoE;AACpE,0FAAoF;AACpF,gGAA0F;AAC1F,0EAAqE;AAGrE,MAAa,iBAAiB;IA0B5B,MAAM,CAAC,GAAG,CAAC,cAA8B;;QACvC,MAAM,cAAc,GAAmB,EAAE,CAAC;QAC1C,MAAM,UAAU,GAAG,iBAAiB,CAAC,aAAa,CAChD,cAAc,EACd,cAAc,CACf,CAAC;QAEF,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;YACzD,MAAA,cAAc,CAAC,GAAG,qCAAlB,cAAc,CAAC,GAAG,IAAM,KAAK,EAAC;YAC9B,MAAM,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,YAAY,KAAK,GAAG,CAAC,CAAC;YACvE,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,GAAG,EAAE,CAAC;SAClB;QAED,OAAO,cAAc,CAAC;IACxB,CAAC;IAEO,MAAM,CAAC,aAAa,CAC1B,cAA8B,EAC9B,cAA8B;QAE9B,MAAM,UAAU,GAAgB,EAAE,CAAC;QAEnC,KAAK,MAAM,YAAY,IAAI,iBAAiB,CAAC,iBAAiB,EAAE;YAC9D,UAAU,CAAC,IAAI,CACb,IAAI,mDAAuB,CACzB,YAAY,EACZ,cAAc,EACd,cAAc,CACf,CACF,CAAC;SACH;QAED,KAAK,MAAM,CACT,eAAe,EACf,eAAe,EAChB,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,OAAO,EAAE,EAAE;YAClD,UAAU,CAAC,IAAI,CACb,IAAI,mDAAuB,CACzB,eAAe,EACf,eAAe,EACf,cAAc,EACd,cAAc,CACf,CACF,CAAC;SACH;QAED,UAAU,CAAC,IAAI,CAAC,IAAI,+CAAqB,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC,CAAC;QAC3E,UAAU,CAAC,IAAI,CACb,IAAI,0DAA0B,CAAC,cAAc,EAAE,cAAc,CAAC,CAC/D,CAAC;QACF,UAAU,CAAC,IAAI,CACb,IAAI,gEAA6B,CAAC,cAAc,EAAE,cAAc,CAAC,CAClE,CAAC;QACF,UAAU,CAAC,IAAI,CAAC,IAAI,2CAAmB,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC,CAAC;QACzE,UAAU,CAAC,IAAI,CAAC,IAAI,0CAAkB,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC,CAAC;QAExE,OAAO,UAAU,CAAC;IACpB,CAAC;;AAnFH,8CAoFC;AAnFiB,mCAAiB,GAAwB,IAAI,GAAG,CAAC;IAC/D,OAAO;IACP,iBAAiB;IACjB,oBAAoB;IACpB,aAAa;IACb,cAAc;IACd,cAAc;IACd,kBAAkB;IAClB,mBAAmB;IACnB,eAAe;IACf,iBAAiB;IACjB,2BAA2B;IAC3B,8BAA8B;IAC9B,uBAAuB;IACvB,wBAAwB;CACzB,CAAC,CAAC;AAEa,mCAAiB,GAAgC,IAAI,GAAG,CAAC;IACvE,CAAC,WAAW,EAAE,cAAc,CAAC;IAC7B,CAAC,uBAAuB,EAAE,oBAAoB,CAAC;IAC/C,CAAC,kBAAkB,EAAE,uBAAuB,CAAC;IAC7C,CAAC,sBAAsB,EAAE,qBAAqB,CAAC;IAC/C,CAAC,eAAe,EAAE,YAAY,CAAC;CAChC,CAAC,CAAC","sourcesContent":["import type { RenovateConfig } from '../types';\nimport { RemovePropertyMigration } from './base/remove-property-migration';\nimport { RenamePropertyMigration } from './base/rename-property-migration';\nimport { BinarySourceMigration } from './custom/binary-source-migration';\nimport { GoModTidyMigration } from './custom/go-mod-tidy-migration';\nimport { IgnoreNodeModulesMigration } from './custom/ignore-node-modules-migration';\nimport { RequiredStatusChecksMigration } from './custom/required-status-checks-migration';\nimport { TrustLevelMigration } from './custom/trust-level-migration';\nimport type { Migration } from './types';\n\nexport class MigrationsService {\n  static readonly removedProperties: ReadonlySet<string> = new Set([\n    'gitFs',\n    'groupBranchName',\n    'groupCommitMessage',\n    'groupPrBody',\n    'groupPrTitle',\n    'lazyGrouping',\n    'maintainYarnLock',\n    'statusCheckVerify',\n    'supportPolicy',\n    'yarnCacheFolder',\n    'yarnMaintenanceBranchName',\n    'yarnMaintenanceCommitMessage',\n    'yarnMaintenancePrBody',\n    'yarnMaintenancePrTitle',\n  ]);\n\n  static readonly renamedProperties: ReadonlyMap<string, string> = new Map([\n    ['exposeEnv', 'exposeAllEnv'],\n    ['separatePatchReleases', 'separateMinorPatch'],\n    ['multipleMajorPrs', 'separateMultipleMajor'],\n    ['excludedPackageNames', 'excludePackageNames'],\n    ['versionScheme', 'versioning'],\n  ]);\n\n  static run(originalConfig: RenovateConfig): RenovateConfig {\n    const migratedConfig: RenovateConfig = {};\n    const migrations = MigrationsService.getMigrations(\n      originalConfig,\n      migratedConfig\n    );\n\n    for (const [key, value] of Object.entries(originalConfig)) {\n      migratedConfig[key] ??= value;\n      const migration = migrations.find((item) => item.propertyName === key);\n      migration?.run();\n    }\n\n    return migratedConfig;\n  }\n\n  private static getMigrations(\n    originalConfig: RenovateConfig,\n    migratedConfig: RenovateConfig\n  ): Migration[] {\n    const migrations: Migration[] = [];\n\n    for (const propertyName of MigrationsService.removedProperties) {\n      migrations.push(\n        new RemovePropertyMigration(\n          propertyName,\n          originalConfig,\n          migratedConfig\n        )\n      );\n    }\n\n    for (const [\n      oldPropertyName,\n      newPropertyName,\n    ] of MigrationsService.renamedProperties.entries()) {\n      migrations.push(\n        new RenamePropertyMigration(\n          oldPropertyName,\n          newPropertyName,\n          originalConfig,\n          migratedConfig\n        )\n      );\n    }\n\n    migrations.push(new BinarySourceMigration(originalConfig, migratedConfig));\n    migrations.push(\n      new IgnoreNodeModulesMigration(originalConfig, migratedConfig)\n    );\n    migrations.push(\n      new RequiredStatusChecksMigration(originalConfig, migratedConfig)\n    );\n    migrations.push(new TrustLevelMigration(originalConfig, migratedConfig));\n    migrations.push(new GoModTidyMigration(originalConfig, migratedConfig));\n\n    return migrations;\n  }\n}\n"]}