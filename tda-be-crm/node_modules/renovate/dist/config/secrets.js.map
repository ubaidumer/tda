{"version":3,"file":"secrets.js","sourceRoot":"","sources":["../../lib/config/secrets.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport {\n  CONFIG_SECRETS_INVALID,\n  CONFIG_VALIDATION,\n} from '../constants/error-messages';\nimport { logger } from '../logger';\nimport { regEx } from '../util/regex';\nimport { add } from '../util/sanitize';\nimport { AllConfig, RenovateConfig } from './types';\n\nconst secretNamePattern = '[A-Za-z][A-Za-z0-9_]*';\n\nconst secretNameRegex = regEx(`^${secretNamePattern}$`);\nconst secretTemplateRegex = regEx(`{{ secrets\\\\.(${secretNamePattern}) }}`);\n\nfunction validateSecrets(secrets_: unknown): void {\n  if (!secrets_) {\n    return;\n  }\n  const validationErrors: string[] = [];\n  if (is.plainObject(secrets_)) {\n    for (const [secretName, secretValue] of Object.entries(secrets_)) {\n      if (!secretNameRegex.test(secretName)) {\n        validationErrors.push(`Invalid secret name \"${secretName}\"`);\n      }\n      if (!is.string(secretValue)) {\n        validationErrors.push(\n          `Secret values must be strings. Found type ${typeof secretValue} for secret ${secretName}`\n        );\n      }\n    }\n  } else {\n    validationErrors.push(\n      `Config secrets must be a plain object. Found: ${typeof secrets_}`\n    );\n  }\n  if (validationErrors.length) {\n    logger.error({ validationErrors }, 'Invalid secrets configured');\n    throw new Error(CONFIG_SECRETS_INVALID);\n  }\n}\n\nexport function validateConfigSecrets(config: AllConfig): void {\n  validateSecrets(config.secrets);\n  if (config.repositories) {\n    for (const repository of config.repositories) {\n      if (is.plainObject(repository)) {\n        validateSecrets(repository.secrets);\n      }\n    }\n  }\n}\n\nfunction replaceSecretsInString(\n  key: string,\n  value: string,\n  secrets: Record<string, string>\n): string {\n  // do nothing if no secret template found\n  if (!secretTemplateRegex.test(value)) {\n    return value;\n  }\n\n  const disallowedPrefixes = ['branch', 'commit', 'group', 'pr', 'semantic'];\n  if (disallowedPrefixes.some((prefix) => key.startsWith(prefix))) {\n    const error = new Error(CONFIG_VALIDATION);\n    error.validationSource = 'config';\n    error.validationError = 'Disallowed secret substitution';\n    error.validationMessage = `The field ${key} may not use secret substitution`;\n    throw error;\n  }\n  return value.replace(secretTemplateRegex, (_, secretName) => {\n    if (secrets[secretName]) {\n      return secrets[secretName];\n    }\n    const error = new Error(CONFIG_VALIDATION);\n    error.validationSource = 'config';\n    error.validationError = 'Unknown secret name';\n    error.validationMessage = `The following secret name was not found in config: ${String(\n      secretName\n    )}`;\n    throw error;\n  });\n}\n\nfunction replaceSecretsinObject(\n  config_: RenovateConfig,\n  secrets: Record<string, string> = {}\n): RenovateConfig {\n  const config = { ...config_ };\n  delete config.secrets;\n  for (const [key, value] of Object.entries(config)) {\n    if (is.plainObject(value)) {\n      config[key] = replaceSecretsinObject(value, secrets);\n    }\n    if (is.string(value)) {\n      config[key] = replaceSecretsInString(key, value, secrets);\n    }\n    if (is.array(value)) {\n      for (const [arrayIndex, arrayItem] of value.entries()) {\n        if (is.plainObject(arrayItem)) {\n          config[key][arrayIndex] = replaceSecretsinObject(arrayItem, secrets);\n        } else if (is.string(arrayItem)) {\n          config[key][arrayIndex] = replaceSecretsInString(\n            key,\n            arrayItem,\n            secrets\n          );\n        }\n      }\n    }\n  }\n  return config;\n}\n\nexport function applySecretsToConfig(\n  config: RenovateConfig,\n  secrets = config.secrets\n): RenovateConfig {\n  // Add all secrets to be sanitized\n  if (is.plainObject(secrets)) {\n    for (const secret of Object.values(secrets)) {\n      add(String(secret));\n    }\n  }\n  return replaceSecretsinObject(config, secrets);\n}\n"]}