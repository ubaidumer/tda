"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGitAuthenticatedEnvironmentVariables = void 0;
const logger_1 = require("../../logger");
const url_1 = require("./url");
/**
 * Add authorization to a Git Url and returns a new environment variables object
 * @returns a new NodeJS.ProcessEnv object without modifying any input parameters
 */
function getGitAuthenticatedEnvironmentVariables(gitUrl, token, environmentVariables) {
    // check if the environmentVariables already contain a GIT_CONFIG_COUNT or if the process has one
    const gitConfigCountEnvVariable = (environmentVariables === null || environmentVariables === void 0 ? void 0 : environmentVariables.GIT_CONFIG_COUNT) || process.env.GIT_CONFIG_COUNT;
    let gitConfigCount = 0;
    if (gitConfigCountEnvVariable) {
        // passthrough the gitConfigCountEnvVariable environment variable as start value of the index count
        gitConfigCount = parseInt(gitConfigCountEnvVariable, 10);
        if (Number.isNaN(gitConfigCount)) {
            logger_1.logger.warn(`Found GIT_CONFIG_COUNT env variable, but couldn't parse the value to an integer: ${process.env.GIT_CONFIG_COUNT}. Ignoring it.`);
            gitConfigCount = 0;
        }
    }
    const gitUrlWithToken = (0, url_1.getHttpUrl)(gitUrl, token);
    // create a shallow copy of the environmentVariables as base so we don't modify the input parameter object
    // add the two new config key and value to the returnEnvironmentVariables object
    // increase the CONFIG_COUNT by one and add it to the object
    const returnEnvironmentVariables = {
        ...environmentVariables,
        [`GIT_CONFIG_KEY_${gitConfigCount}`]: `url.${gitUrlWithToken}.insteadOf`,
        [`GIT_CONFIG_VALUE_${gitConfigCount}`]: gitUrl,
        GIT_CONFIG_COUNT: (gitConfigCount + 1).toString(),
    };
    return returnEnvironmentVariables;
}
exports.getGitAuthenticatedEnvironmentVariables = getGitAuthenticatedEnvironmentVariables;
//# sourceMappingURL=auth.js.map