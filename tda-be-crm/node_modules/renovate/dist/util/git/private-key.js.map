{"version":3,"file":"private-key.js","sourceRoot":"","sources":["../../../lib/util/git/private-key.ts"],"names":[],"mappings":";;;;AAAA,yDAAoB;AACpB,qEAA0B;AAC1B,+DAA0B;AAC1B,mEAAqE;AACrE,yCAAsC;AACtC,kCAA+B;AAE/B,IAAI,aAAqB,CAAC;AAC1B,IAAI,KAAa,CAAC;AAElB,SAAgB,aAAa,CAAC,GAAW;IACvC,aAAa,GAAG,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,IAAI,EAAE,CAAC;AAC9B,CAAC;AAFD,sCAEC;AAED,KAAK,UAAU,SAAS;IACtB,IAAI,KAAK,EAAE;QACT,OAAO;KACR;IACD,MAAM,WAAW,GAAG,eAAK,CAAC,IAAI,CAAC,YAAE,CAAC,MAAM,EAAE,GAAG,kBAAkB,CAAC,CAAC;IACjE,MAAM,kBAAE,CAAC,UAAU,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;IAChD,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAA,WAAI,EAAC,gBAAgB,WAAW,EAAE,CAAC,CAAC;IACrE,eAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,2BAA2B,CAAC,CAAC;IAC9D,KAAK,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC;SACtB,KAAK,CAAC,IAAI,CAAC;SACX,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC;SACpD,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;SACxB,KAAK,CAAC,GAAG,CAAC;SACV,KAAK,EAAE,CAAC;IACX,MAAM,kBAAE,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;AAC/B,CAAC;AAEM,KAAK,UAAU,eAAe;IACnC,IAAI,CAAC,aAAa,EAAE;QAClB,OAAO;KACR;IACD,eAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;IACxC,IAAI;QACF,MAAM,SAAS,EAAE,CAAC;KACnB;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,+BAA+B,CAAC,CAAC;QACtD,MAAM,IAAI,KAAK,CAAC,oCAAmB,CAAC,CAAC;KACtC;AACH,CAAC;AAXD,0CAWC;AAEM,KAAK,UAAU,gBAAgB,CAAC,GAAW;IAChD,IAAI,CAAC,aAAa,EAAE;QAClB,OAAO;KACR;IACD,eAAM,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;IAC5C,MAAM,IAAA,WAAI,EAAC,8BAA8B,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;IAC3D,MAAM,IAAA,WAAI,EAAC,gCAAgC,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;AACxD,CAAC;AAPD,4CAOC","sourcesContent":["import os from 'os';\nimport fs from 'fs-extra';\nimport upath from 'upath';\nimport { PLATFORM_GPG_FAILED } from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { exec } from '../exec';\n\nlet gitPrivateKey: string;\nlet keyId: string;\n\nexport function setPrivateKey(key: string): void {\n  gitPrivateKey = key?.trim();\n}\n\nasync function importKey(): Promise<void> {\n  if (keyId) {\n    return;\n  }\n  const keyFileName = upath.join(os.tmpdir() + '/git-private.key');\n  await fs.outputFile(keyFileName, gitPrivateKey);\n  const { stdout, stderr } = await exec(`gpg --import ${keyFileName}`);\n  logger.debug({ stdout, stderr }, 'Private key import result');\n  keyId = (stdout + stderr)\n    .split('\\n')\n    .find((line) => line.includes('secret key imported'))\n    .replace('gpg: key ', '')\n    .split(':')\n    .shift();\n  await fs.remove(keyFileName);\n}\n\nexport async function writePrivateKey(): Promise<void> {\n  if (!gitPrivateKey) {\n    return;\n  }\n  logger.debug('Setting git private key');\n  try {\n    await importKey();\n  } catch (err) {\n    logger.warn({ err }, 'Error writing git private key');\n    throw new Error(PLATFORM_GPG_FAILED);\n  }\n}\n\nexport async function configSigningKey(cwd: string): Promise<void> {\n  if (!gitPrivateKey) {\n    return;\n  }\n  logger.debug('Configuring commits signing');\n  await exec(`git config user.signingkey ${keyId}`, { cwd });\n  await exec(`git config commit.gpgsign true`, { cwd });\n}\n"]}