{"version":3,"file":"buildpack.js","sourceRoot":"","sources":["../../../lib/util/exec/buildpack.ts"],"names":[],"mappings":"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","sourcesContent":["import { quote } from 'shlex';\nimport { getPkgReleases } from '../../datasource';\nimport { logger } from '../../logger';\nimport * as allVersioning from '../../versioning';\nimport { id as composerVersioningId } from '../../versioning/composer';\nimport { id as semverVersioningId } from '../../versioning/semver';\nimport type { ToolConfig, ToolConstraint } from './types';\n\nconst allToolConfig: Record<string, ToolConfig> = {\n  composer: {\n    datasource: 'github-releases',\n    depName: 'composer/composer',\n    versioning: composerVersioningId,\n  },\n  jb: {\n    datasource: 'github-releases',\n    depName: 'jsonnet-bundler/jsonnet-bundler',\n    versioning: semverVersioningId,\n  },\n};\n\nexport async function resolveConstraint(\n  toolConstraint: ToolConstraint\n): Promise<string> {\n  const { toolName } = toolConstraint;\n  const toolConfig = allToolConfig[toolName];\n  if (!toolConfig) {\n    throw new Error(`Invalid tool to install: ${toolName}`);\n  }\n\n  const versioning = allVersioning.get(toolConfig.versioning);\n  let constraint = toolConstraint.constraint;\n  if (constraint) {\n    if (versioning.isValid(constraint)) {\n      if (versioning.isSingleVersion(constraint)) {\n        return constraint;\n      }\n    } else {\n      logger.warn({ toolName, constraint }, 'Invalid tool constraint');\n      constraint = undefined;\n    }\n  }\n\n  const pkgReleases = await getPkgReleases(toolConfig);\n  if (!pkgReleases?.releases?.length) {\n    throw new Error('No tool releases found.');\n  }\n\n  const allVersions = pkgReleases.releases.map((r) => r.version);\n  const matchingVersions = allVersions.filter(\n    (v) => !constraint || versioning.matches(v, constraint)\n  );\n\n  if (matchingVersions.length) {\n    const resolvedVersion = matchingVersions.pop();\n    logger.debug({ toolName, constraint, resolvedVersion }, 'Resolved version');\n    return resolvedVersion;\n  }\n  const latestVersion = allVersions.filter((v) => versioning.isStable(v)).pop();\n  logger.warn(\n    { toolName, constraint, latestVersion },\n    'No matching tool versions found for constraint - using latest version'\n  );\n  return latestVersion;\n}\n\nexport async function generateInstallCommands(\n  toolConstraints: ToolConstraint[]\n): Promise<string[]> {\n  const installCommands = [];\n  if (toolConstraints?.length) {\n    for (const toolConstraint of toolConstraints) {\n      const toolVersion = await resolveConstraint(toolConstraint);\n      const installCommand = `install-tool ${toolConstraint.toolName} ${quote(\n        toolVersion\n      )}`;\n      installCommands.push(installCommand);\n    }\n  }\n  return installCommands;\n}\n"]}