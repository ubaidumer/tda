{"version":3,"file":"redis.js","sourceRoot":"","sources":["../../../../lib/util/cache/package/redis.ts"],"names":[],"mappings":"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","sourcesContent":["/* istanbul ignore file */\nimport { WrappedNodeRedisClient, createNodeRedisClient } from 'handy-redis';\nimport { DateTime } from 'luxon';\nimport { logger } from '../../../logger';\n\nlet client: WrappedNodeRedisClient | undefined;\n\nfunction getKey(namespace: string, key: string): string {\n  return `${namespace}-${key}`;\n}\n\nexport function end(): void {\n  try {\n    client?.nodeRedis?.end(true); // TODO: Why is this not supported by client directly? (#9714)\n  } catch (err) {\n    logger.warn({ err }, 'Redis cache end failed');\n  }\n}\n\nasync function rm(namespace: string, key: string): Promise<void> {\n  logger.trace({ namespace, key }, 'Removing cache entry');\n  await client?.del(getKey(namespace, key));\n}\n\nexport async function get<T = never>(\n  namespace: string,\n  key: string\n): Promise<T | undefined> {\n  if (!client) {\n    return undefined;\n  }\n  logger.trace(`cache.get(${namespace}, ${key})`);\n  try {\n    const res = await client?.get(getKey(namespace, key));\n    const cachedValue = res && JSON.parse(res);\n    if (cachedValue) {\n      if (DateTime.local() < DateTime.fromISO(cachedValue.expiry)) {\n        logger.trace({ namespace, key }, 'Returning cached value');\n        return cachedValue.value;\n      }\n      // istanbul ignore next\n      await rm(namespace, key);\n    }\n  } catch (err) {\n    logger.trace({ namespace, key }, 'Cache miss');\n  }\n  return undefined;\n}\n\nexport async function set(\n  namespace: string,\n  key: string,\n  value: unknown,\n  ttlMinutes = 5\n): Promise<void> {\n  logger.trace({ namespace, key, ttlMinutes }, 'Saving cached value');\n  await client?.set(\n    getKey(namespace, key),\n    JSON.stringify({\n      value,\n      expiry: DateTime.local().plus({ minutes: ttlMinutes }),\n    }),\n    ['EX', ttlMinutes * 60]\n  );\n}\n\nexport function init(url: string): void {\n  if (!url) {\n    return;\n  }\n  logger.debug('Redis cache init');\n  client = createNodeRedisClient({\n    url,\n    retry_strategy: (options) => {\n      if (options.error) {\n        logger.error({ err: options.error }, 'Redis cache error');\n      }\n      // Reconnect after this time\n      return Math.min(options.attempt * 100, 3000);\n    },\n  });\n}\n"]}