{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/util/cache/repository/index.ts"],"names":[],"mappings":";;;;AAAA,0DAA+B;AAC/B,iCAA6B;AAC7B,mDAAsD;AAKtD,4CAAyC;AAGzC,+FAA+F;AAClF,QAAA,cAAc,GAAG,CAAC,CAAC;AAEhC,IAAI,eAAe,GAAsC,UAAU,CAAC;AACpE,IAAI,aAAa,GAAkB,IAAI,CAAC;AACxC,IAAI,KAAK,GAAiB,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AAE5C,SAAgB,gBAAgB,CAAC,MAAsB;IACrD,OAAO,IAAA,YAAI,EACT,qBAAY,CAAC,GAAG,CAAC,UAAU,CAAC,EAC5B,uBAAuB,EACvB,MAAM,CAAC,QAAQ,EACf,GAAG,MAAM,CAAC,UAAU,OAAO,CAC5B,CAAC;AACJ,CAAC;AAPD,4CAOC;AAED,SAAS,QAAQ,CAAC,MAAsB,EAAE,KAAU;IAClD,IACE,KAAK;QACL,KAAK,CAAC,UAAU,KAAK,MAAM,CAAC,UAAU;QACtC,KAAK,CAAC,QAAQ,KAAK,sBAAc,EACjC;QACA,eAAM,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;QAC1C,OAAO,KAAc,CAAC;KACvB;IACD,eAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;IAC5C,QAAQ;IACR,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,WAAW,CAAC,UAAmB;IACtC,MAAM,GAAG,GAAU,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACrC,GAAG,CAAC,UAAU,GAAG,UAAU,CAAC;IAC5B,GAAG,CAAC,QAAQ,GAAG,sBAAc,CAAC;IAC9B,OAAO,GAAG,CAAC;AACb,CAAC;AAEM,KAAK,UAAU,UAAU,CAAC,MAAsB;IACrD,KAAK,GAAG,IAAI,CAAC;IACb,IAAI;QACF,aAAa,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;QACzC,eAAe,GAAG,MAAM,CAAC,eAAe,CAAC;QACzC,IAAI,eAAe,KAAK,SAAS,EAAE;YACjC,KAAK,GAAG,QAAQ,CACd,MAAM,EACN,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC,CACrD,CAAC;SACH;KACF;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,KAAK,CAAC,EAAE,aAAa,EAAE,EAAE,4BAA4B,CAAC,CAAC;KAC/D;IACD,KAAK,KAAL,KAAK,GAAK,WAAW,CAAC,MAAM,CAAC,UAAU,CAAC,EAAC;AAC3C,CAAC;AAfD,gCAeC;AAED,SAAgB,QAAQ;IACtB,OAAO,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,WAAW,EAAE,CAAC;AAChC,CAAC;AAFD,4BAEC;AAEM,KAAK,UAAU,QAAQ;IAC5B,IAAI,aAAa,IAAI,KAAK,IAAI,eAAe,KAAK,UAAU,EAAE;QAC5D,MAAM,EAAE,CAAC,UAAU,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;KAC3D;IACD,aAAa,GAAG,IAAI,CAAC;IACrB,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AAC5B,CAAC;AAND,4BAMC","sourcesContent":["import * as fs from 'fs-extra';\nimport { join } from 'upath';\nimport { GlobalConfig } from '../../../config/global';\nimport type {\n  RenovateConfig,\n  RepositoryCacheConfig,\n} from '../../../config/types';\nimport { logger } from '../../../logger';\nimport type { Cache } from './types';\n\n// Increment this whenever there could be incompatibilities between old and new cache structure\nexport const CACHE_REVISION = 9;\n\nlet repositoryCache: RepositoryCacheConfig | undefined = 'disabled';\nlet cacheFileName: string | null = null;\nlet cache: Cache | null = Object.create({});\n\nexport function getCacheFileName(config: RenovateConfig): string {\n  return join(\n    GlobalConfig.get('cacheDir'),\n    '/renovate/repository/',\n    config.platform,\n    `${config.repository}.json`\n  );\n}\n\nfunction validate(config: RenovateConfig, input: any): Cache | null {\n  if (\n    input &&\n    input.repository === config.repository &&\n    input.revision === CACHE_REVISION\n  ) {\n    logger.debug('Repository cache is valid');\n    return input as Cache;\n  }\n  logger.info('Repository cache invalidated');\n  // reset\n  return null;\n}\n\nfunction createCache(repository?: string): Cache {\n  const res: Cache = Object.create({});\n  res.repository = repository;\n  res.revision = CACHE_REVISION;\n  return res;\n}\n\nexport async function initialize(config: RenovateConfig): Promise<void> {\n  cache = null;\n  try {\n    cacheFileName = getCacheFileName(config);\n    repositoryCache = config.repositoryCache;\n    if (repositoryCache === 'enabled') {\n      cache = validate(\n        config,\n        JSON.parse(await fs.readFile(cacheFileName, 'utf8'))\n      );\n    }\n  } catch (err) {\n    logger.debug({ cacheFileName }, 'Repository cache not found');\n  }\n  cache ||= createCache(config.repository);\n}\n\nexport function getCache(): Cache {\n  return cache ?? createCache();\n}\n\nexport async function finalize(): Promise<void> {\n  if (cacheFileName && cache && repositoryCache !== 'disabled') {\n    await fs.outputFile(cacheFileName, JSON.stringify(cache));\n  }\n  cacheFileName = null;\n  cache = Object.create({});\n}\n"]}