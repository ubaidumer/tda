"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.finalize = exports.getCache = exports.initialize = exports.getCacheFileName = exports.CACHE_REVISION = void 0;
const tslib_1 = require("tslib");
const fs = (0, tslib_1.__importStar)(require("fs-extra"));
const upath_1 = require("upath");
const global_1 = require("../../../config/global");
const logger_1 = require("../../../logger");
// Increment this whenever there could be incompatibilities between old and new cache structure
exports.CACHE_REVISION = 9;
let repositoryCache = 'disabled';
let cacheFileName = null;
let cache = Object.create({});
function getCacheFileName(config) {
    return (0, upath_1.join)(global_1.GlobalConfig.get('cacheDir'), '/renovate/repository/', config.platform, `${config.repository}.json`);
}
exports.getCacheFileName = getCacheFileName;
function validate(config, input) {
    if (input &&
        input.repository === config.repository &&
        input.revision === exports.CACHE_REVISION) {
        logger_1.logger.debug('Repository cache is valid');
        return input;
    }
    logger_1.logger.info('Repository cache invalidated');
    // reset
    return null;
}
function createCache(repository) {
    const res = Object.create({});
    res.repository = repository;
    res.revision = exports.CACHE_REVISION;
    return res;
}
async function initialize(config) {
    cache = null;
    try {
        cacheFileName = getCacheFileName(config);
        repositoryCache = config.repositoryCache;
        if (repositoryCache === 'enabled') {
            cache = validate(config, JSON.parse(await fs.readFile(cacheFileName, 'utf8')));
        }
    }
    catch (err) {
        logger_1.logger.debug({ cacheFileName }, 'Repository cache not found');
    }
    cache || (cache = createCache(config.repository));
}
exports.initialize = initialize;
function getCache() {
    return cache !== null && cache !== void 0 ? cache : createCache();
}
exports.getCache = getCache;
async function finalize() {
    if (cacheFileName && cache && repositoryCache !== 'disabled') {
        await fs.outputFile(cacheFileName, JSON.stringify(cache));
    }
    cacheFileName = null;
    cache = Object.create({});
}
exports.finalize = finalize;
//# sourceMappingURL=index.js.map