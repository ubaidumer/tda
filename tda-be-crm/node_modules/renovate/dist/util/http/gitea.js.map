{"version":3,"file":"gitea.js","sourceRoot":"","sources":["../../../lib/util/http/gitea.ts"],"names":[],"mappings":";;;AACA,gCAAwC;AACxC,wBAAyE;AAEzE,IAAI,OAAe,CAAC;AACb,MAAM,UAAU,GAAG,CAAC,UAAkB,EAAQ,EAAE;IACrD,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,cAAc;AAC3D,CAAC,CAAC;AAFW,QAAA,UAAU,cAErB;AAOF,SAAS,sBAAsB,CAAC,IAAS;IACvC,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE;QACtC,OAAO,IAAI,CAAC;KACb;IACD,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;QACjD,OAAO,IAAI,CAAC,IAAI,CAAC;KAClB;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,UAAU,CAAC,IAAY,EAAE,IAAY;IAC5C,MAAM,iBAAiB,GAAG,IAAA,oBAAc,EAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACrD,OAAO,IAAI,GAAG,CAAC,iBAAiB,CAAC,CAAC;AACpC,CAAC;AAED,MAAa,SAAU,SAAQ,OAAwC;IACrE,YAAY,OAAqB;QAC/B,KAAK,sBAAmB,OAAO,CAAC,CAAC;IACnC,CAAC;IAEkB,KAAK,CAAC,OAAO,CAC9B,IAAY,EACZ,OAAgD;;QAEhD,MAAM,WAAW,GAAG,UAAU,CAAC,IAAI,EAAE,MAAA,OAAO,CAAC,OAAO,mCAAI,OAAO,CAAC,CAAC;QACjE,MAAM,IAAI,GAAG;YACX,OAAO;YACP,GAAG,OAAO;SACX,CAAC;QACF,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,OAAO,CAAI,WAAW,EAAE,IAAI,CAAC,CAAC;QACtD,MAAM,EAAE,GAAG,sBAAsB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC5C,IAAI,IAAI,CAAC,QAAQ,IAAI,EAAE,EAAE;YACvB,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,eAAe,CAAW,EAAE,EAAE,CAAC,CAAC;YACnE,IAAI,QAAQ,GAAG,QAAQ,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,GAAG,EAAE,EAAE,CAAC,CAAC;YAEzE,OAAO,KAAK,IAAI,EAAE,CAAC,MAAM,GAAG,KAAK,EAAE;gBACjC,QAAQ,IAAI,CAAC,CAAC;gBACd,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAE1D,MAAM,OAAO,GAAG,MAAM,KAAK,CAAC,OAAO,CAAI,WAAW,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAC;gBACrE,MAAM,MAAM,GAAG,sBAAsB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACpD,IAAI,MAAM,KAAK,IAAI,EAAE;oBACnB,MAAM;iBACP;gBAED,EAAE,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC;aACpB;SACF;QAED,OAAO,GAAG,CAAC;IACb,CAAC;CACF;AApCD,8BAoCC","sourcesContent":["import { PlatformId } from '../../constants';\nimport { resolveBaseUrl } from '../url';\nimport { Http, HttpOptions, HttpResponse, InternalHttpOptions } from '.';\n\nlet baseUrl: string;\nexport const setBaseUrl = (newBaseUrl: string): void => {\n  baseUrl = newBaseUrl.replace(/\\/*$/, '/'); // TODO #12070\n};\n\nexport interface GiteaHttpOptions extends InternalHttpOptions {\n  paginate?: boolean;\n  token?: string;\n}\n\nfunction getPaginationContainer(body: any): any[] {\n  if (Array.isArray(body) && body.length) {\n    return body;\n  }\n  if (Array.isArray(body?.data) && body.data.length) {\n    return body.data;\n  }\n\n  return null;\n}\n\nfunction resolveUrl(path: string, base: string): URL {\n  const resolvedUrlString = resolveBaseUrl(base, path);\n  return new URL(resolvedUrlString);\n}\n\nexport class GiteaHttp extends Http<GiteaHttpOptions, GiteaHttpOptions> {\n  constructor(options?: HttpOptions) {\n    super(PlatformId.Gitea, options);\n  }\n\n  protected override async request<T>(\n    path: string,\n    options?: InternalHttpOptions & GiteaHttpOptions\n  ): Promise<HttpResponse<T> | null> {\n    const resolvedUrl = resolveUrl(path, options.baseUrl ?? baseUrl);\n    const opts = {\n      baseUrl,\n      ...options,\n    };\n    const res = await super.request<T>(resolvedUrl, opts);\n    const pc = getPaginationContainer(res.body);\n    if (opts.paginate && pc) {\n      const total = parseInt(res.headers['x-total-count'] as string, 10);\n      let nextPage = parseInt(resolvedUrl.searchParams.get('page') || '1', 10);\n\n      while (total && pc.length < total) {\n        nextPage += 1;\n        resolvedUrl.searchParams.set('page', nextPage.toString());\n\n        const nextRes = await super.request<T>(resolvedUrl.toString(), opts);\n        const nextPc = getPaginationContainer(nextRes.body);\n        if (nextPc === null) {\n          break;\n        }\n\n        pc.push(...nextPc);\n      }\n    }\n\n    return res;\n  }\n}\n"]}