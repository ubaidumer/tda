{"version":3,"file":"auth.js","sourceRoot":"","sources":["../../../lib/util/http/auth.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport type { NormalizedOptions } from 'got';\nimport {\n  GITHUB_API_USING_HOST_TYPES,\n  GITLAB_API_USING_HOST_TYPES,\n  PlatformId,\n} from '../../constants';\nimport type { GotOptions } from './types';\n\nexport function applyAuthorization(inOptions: GotOptions): GotOptions {\n  const options: GotOptions = { ...inOptions };\n\n  if (options.headers?.authorization || options.noAuth) {\n    return options;\n  }\n\n  if (options.token) {\n    if (options.hostType === PlatformId.Gitea) {\n      options.headers.authorization = `token ${options.token}`;\n    } else if (GITHUB_API_USING_HOST_TYPES.includes(options.hostType)) {\n      options.headers.authorization = `token ${options.token}`;\n      if (options.token.startsWith('x-access-token:')) {\n        const appToken = options.token.replace('x-access-token:', '');\n        options.headers.authorization = `token ${appToken}`;\n        if (is.string(options.headers.accept)) {\n          options.headers.accept = options.headers.accept.replace(\n            'application/vnd.github.v3+json',\n            'application/vnd.github.machine-man-preview+json'\n          );\n        }\n      }\n    } else if (GITLAB_API_USING_HOST_TYPES.includes(options.hostType)) {\n      // GitLab versions earlier than 12.2 only support authentication with\n      // a personal access token, which is 20 characters long.\n      if (options.token.length === 20) {\n        options.headers['Private-token'] = options.token;\n      } else {\n        options.headers.authorization = `Bearer ${options.token}`;\n      }\n    } else {\n      // Custom Auth type, eg `Basic XXXX_TOKEN`\n      const type = options.context?.authType ?? 'Bearer';\n\n      if (type === 'Token-Only') {\n        options.headers.authorization = options.token;\n      } else {\n        options.headers.authorization = `${type} ${options.token}`;\n      }\n    }\n    delete options.token;\n  } else if (options.password !== undefined) {\n    // Otherwise got will add username and password to url and header\n    const auth = Buffer.from(\n      `${options.username || ''}:${options.password}`\n    ).toString('base64');\n    options.headers.authorization = `Basic ${auth}`;\n    delete options.username;\n    delete options.password;\n  }\n  return options;\n}\n\n// isAmazon return true if request options contains Amazon related headers\nfunction isAmazon(options: NormalizedOptions): boolean {\n  return options.search?.includes('X-Amz-Algorithm');\n}\n\n// isAzureBlob return true if request options contains Azure container registry related data\nfunction isAzureBlob(options: NormalizedOptions): boolean {\n  return (\n    options.hostname?.endsWith('.blob.core.windows.net') && // lgtm [js/incomplete-url-substring-sanitization]\n    options.href?.includes('/docker/registry')\n  );\n}\n\n// removeAuthorization from the redirect options\nexport function removeAuthorization(options: NormalizedOptions): void {\n  if (!options.password && !options.headers?.authorization) {\n    return;\n  }\n\n  // Check if request has been redirected to Amazon or an Azure blob (ACR)\n  if (isAmazon(options) || isAzureBlob(options)) {\n    // if there is no port in the redirect URL string, then delete it from the redirect options.\n    // This can be evaluated for removal after upgrading to Got v10\n    const portInUrl = options.href.split('/')[2].split(':')[1];\n    // istanbul ignore next\n    if (!portInUrl) {\n      delete options.port; // Redirect will instead use 80 or 443 for HTTP or HTTPS respectively\n    }\n\n    // registry is hosted on Amazon or Azure blob, redirect url includes\n    // authentication which is not required and should be removed\n    delete options.headers.authorization;\n    delete options.username;\n    delete options.password;\n  }\n}\n"]}