{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/util/http/index.ts"],"names":[],"mappings":"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","sourcesContent":["import crypto from 'crypto';\nimport merge from 'deepmerge';\nimport got, { Options, Response } from 'got';\nimport { HOST_DISABLED } from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport * as memCache from '../cache/memory';\nimport { clone } from '../clone';\nimport { resolveBaseUrl } from '../url';\nimport { applyAuthorization, removeAuthorization } from './auth';\nimport { hooks } from './hooks';\nimport { applyHostRules } from './host-rules';\nimport { getQueue } from './queue';\nimport type {\n  GotJSONOptions,\n  GotOptions,\n  OutgoingHttpHeaders,\n  RequestStats,\n} from './types';\n\n// TODO: refactor code to remove this (#9651)\nimport './legacy';\n\nexport interface HttpOptions {\n  body?: any;\n  username?: string;\n  password?: string;\n  baseUrl?: string;\n  headers?: OutgoingHttpHeaders;\n\n  /**\n   * Do not use authentication\n   */\n  noAuth?: boolean;\n\n  throwHttpErrors?: boolean;\n  useCache?: boolean;\n}\n\nexport interface HttpPostOptions extends HttpOptions {\n  body: unknown;\n}\n\nexport interface InternalHttpOptions extends HttpOptions {\n  json?: Record<string, unknown>;\n  responseType?: 'json' | 'buffer';\n  method?: 'get' | 'post' | 'put' | 'patch' | 'delete' | 'head';\n}\n\nexport interface HttpResponse<T = string> {\n  statusCode: number;\n  body: T;\n  headers: any;\n  authorization?: boolean;\n}\n\nfunction cloneResponse<T extends Buffer | string | any>(\n  response: HttpResponse<T>\n): HttpResponse<T> {\n  const { body, statusCode, headers } = response;\n  // clone body and headers so that the cached result doesn't get accidentally mutated\n  // Don't use json clone for buffers\n  return {\n    statusCode,\n    body: body instanceof Buffer ? (body.slice() as T) : clone<T>(body),\n    headers: clone(headers),\n    authorization: !!response.authorization,\n  };\n}\n\nfunction applyDefaultHeaders(options: Options): void {\n  let renovateVersion = 'unknown';\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    renovateVersion = require('../../../package.json').version;\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ err }, 'Error getting renovate version');\n  }\n\n  options.headers = {\n    ...options.headers,\n    'user-agent':\n      process.env.RENOVATE_USER_AGENT ||\n      `RenovateBot/${renovateVersion} (https://github.com/renovatebot/renovate)`,\n  };\n}\n\n// Note on types:\n// options.requestType can be either 'json' or 'buffer', but `T` should be\n// `Buffer` in the latter case.\n// We don't declare overload signatures because it's immediately wrapped by\n// `request`.\nasync function gotRoutine<T>(\n  url: string,\n  options: GotOptions,\n  requestStats: Partial<RequestStats>\n): Promise<Response<T>> {\n  logger.trace({ url, options }, 'got request');\n\n  // Cheat the TS compiler using `as` to pick a specific overload.\n  // Otherwise it doesn't typecheck.\n  const resp = await got<T>(url, { ...options, hooks } as GotJSONOptions);\n  const duration =\n    resp.timings.phases.total || /* istanbul ignore next: can't be tested */ 0;\n\n  const httpRequests = memCache.get('http-requests') || [];\n  httpRequests.push({ ...requestStats, duration });\n  memCache.set('http-requests', httpRequests);\n\n  return resp;\n}\n\nexport class Http<GetOptions = HttpOptions, PostOptions = HttpPostOptions> {\n  private options?: GotOptions;\n\n  constructor(private hostType: string, options?: HttpOptions) {\n    this.options = merge<GotOptions>(options, { context: { hostType } });\n  }\n\n  protected async request<T>(\n    requestUrl: string | URL,\n    httpOptions?: InternalHttpOptions\n  ): Promise<HttpResponse<T> | null> {\n    let url = requestUrl.toString();\n    if (httpOptions?.baseUrl) {\n      url = resolveBaseUrl(httpOptions.baseUrl, url);\n    }\n\n    let options: GotOptions = merge<GotOptions>(\n      {\n        method: 'get',\n        ...this.options,\n        hostType: this.hostType,\n      },\n      httpOptions\n    );\n\n    if (process.env.NODE_ENV === 'test') {\n      options.retry = 0;\n    }\n    options.hooks = {\n      beforeRedirect: [removeAuthorization],\n    };\n\n    applyDefaultHeaders(options);\n\n    options = applyHostRules(url, options);\n    if (options.enabled === false) {\n      throw new Error(HOST_DISABLED);\n    }\n    options = applyAuthorization(options);\n\n    const cacheKey = crypto\n      .createHash('md5')\n      .update(\n        'got-' +\n          JSON.stringify({\n            url,\n            headers: options.headers,\n            method: options.method,\n          })\n      )\n      .digest('hex');\n\n    let resPromise;\n\n    // Cache GET requests unless useCache=false\n    if (\n      ['get', 'head'].includes(options.method) &&\n      options.useCache !== false\n    ) {\n      resPromise = memCache.get(cacheKey);\n    }\n\n    // istanbul ignore else: no cache tests\n    if (!resPromise) {\n      const startTime = Date.now();\n      const queueTask = (): Promise<Response<T>> => {\n        const queueDuration = Date.now() - startTime;\n        return gotRoutine(url, options, {\n          method: options.method,\n          url,\n          queueDuration,\n        });\n      };\n      const queue = getQueue(url);\n      resPromise = queue?.add(queueTask) ?? queueTask();\n      if (options.method === 'get') {\n        memCache.set(cacheKey, resPromise); // always set if it's a get\n      }\n    }\n\n    try {\n      const res = await resPromise;\n      res.authorization = !!options?.headers?.authorization;\n      return cloneResponse(res);\n    } catch (err) {\n      const { abortOnError, abortIgnoreStatusCodes } = options;\n      if (abortOnError && !abortIgnoreStatusCodes?.includes(err.statusCode)) {\n        throw new ExternalHostError(err);\n      }\n      throw err;\n    }\n  }\n\n  get(url: string, options: HttpOptions = {}): Promise<HttpResponse> {\n    return this.request<string>(url, options);\n  }\n\n  head(url: string, options: HttpOptions = {}): Promise<HttpResponse> {\n    return this.request<string>(url, { ...options, method: 'head' });\n  }\n\n  protected requestBuffer(\n    url: string | URL,\n    httpOptions?: InternalHttpOptions\n  ): Promise<HttpResponse<Buffer> | null> {\n    return this.request<Buffer>(url, {\n      ...httpOptions,\n      responseType: 'buffer',\n    });\n  }\n\n  getBuffer(\n    url: string,\n    options: HttpOptions = {}\n  ): Promise<HttpResponse<Buffer> | null> {\n    return this.requestBuffer(url, options);\n  }\n\n  private async requestJson<T = unknown>(\n    url: string,\n    options: InternalHttpOptions\n  ): Promise<HttpResponse<T>> {\n    const { body, ...jsonOptions } = options;\n    if (body) {\n      jsonOptions.json = body;\n    }\n    const res = await this.request<T>(url, {\n      ...jsonOptions,\n      responseType: 'json',\n    });\n    return { ...res, body: res.body };\n  }\n\n  getJson<T = unknown>(\n    url: string,\n    options?: GetOptions\n  ): Promise<HttpResponse<T>> {\n    return this.requestJson<T>(url, { ...options });\n  }\n\n  headJson<T = unknown>(\n    url: string,\n    options?: GetOptions\n  ): Promise<HttpResponse<T>> {\n    return this.requestJson<T>(url, { ...options, method: 'head' });\n  }\n\n  postJson<T = unknown>(\n    url: string,\n    options?: PostOptions\n  ): Promise<HttpResponse<T>> {\n    return this.requestJson<T>(url, { ...options, method: 'post' });\n  }\n\n  putJson<T = unknown>(\n    url: string,\n    options?: PostOptions\n  ): Promise<HttpResponse<T>> {\n    return this.requestJson<T>(url, { ...options, method: 'put' });\n  }\n\n  patchJson<T = unknown>(\n    url: string,\n    options?: PostOptions\n  ): Promise<HttpResponse<T>> {\n    return this.requestJson<T>(url, { ...options, method: 'patch' });\n  }\n\n  deleteJson<T = unknown>(\n    url: string,\n    options?: PostOptions\n  ): Promise<HttpResponse<T>> {\n    return this.requestJson<T>(url, { ...options, method: 'delete' });\n  }\n\n  stream(url: string, options?: HttpOptions): NodeJS.ReadableStream {\n    const combinedOptions: any = {\n      method: 'get',\n      ...this.options,\n      hostType: this.hostType,\n      ...options,\n    };\n\n    let resolvedUrl = url;\n    // istanbul ignore else: needs test\n    if (options?.baseUrl) {\n      resolvedUrl = resolveBaseUrl(options.baseUrl, url);\n    }\n\n    applyDefaultHeaders(combinedOptions);\n    return got.stream(resolvedUrl, combinedOptions);\n  }\n}\n"]}