{"version":3,"file":"github.js","sourceRoot":"","sources":["../../../lib/util/http/github.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport pAll from 'p-all';\nimport parseLinkHeader from 'parse-link-header';\nimport { PlatformId } from '../../constants';\nimport {\n  PLATFORM_BAD_CREDENTIALS,\n  PLATFORM_INTEGRATION_UNAUTHORIZED,\n  PLATFORM_RATE_LIMIT_EXCEEDED,\n  REPOSITORY_CHANGED,\n} from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport { maskToken } from '../mask';\nimport { regEx } from '../regex';\nimport { GotLegacyError } from './legacy';\nimport { Http, HttpPostOptions, HttpResponse, InternalHttpOptions } from '.';\n\nconst githubBaseUrl = 'https://api.github.com/';\nlet baseUrl = githubBaseUrl;\nexport const setBaseUrl = (url: string): void => {\n  baseUrl = url;\n};\n\ninterface GithubInternalOptions extends InternalHttpOptions {\n  body?: string;\n}\n\nexport interface GithubHttpOptions extends InternalHttpOptions {\n  paginate?: boolean | string;\n  paginationField?: string;\n  pageLimit?: number;\n  token?: string;\n}\n\ninterface GithubGraphqlRepoData<T = unknown> {\n  repository?: T;\n}\n\ninterface GithubGraphqlResponse<T = unknown> {\n  data?: T;\n  errors?: {\n    type?: string;\n    message: string;\n    locations: unknown;\n  }[];\n}\n\nfunction handleGotError(\n  err: GotLegacyError,\n  url: string | URL,\n  opts: GithubHttpOptions\n): never {\n  const path = url.toString();\n  let message = err.message || '';\n  if (is.plainObject(err.response?.body) && 'message' in err.response.body) {\n    message = String(err.response.body.message);\n  }\n  if (\n    err.code === 'ENOTFOUND' ||\n    err.code === 'ETIMEDOUT' ||\n    err.code === 'EAI_AGAIN' ||\n    err.code === 'ECONNRESET'\n  ) {\n    logger.debug({ err }, 'GitHub failure: RequestError');\n    throw new ExternalHostError(err, PlatformId.Github);\n  }\n  if (err.name === 'ParseError') {\n    logger.debug({ err }, '');\n    throw new ExternalHostError(err, PlatformId.Github);\n  }\n  if (err.statusCode >= 500 && err.statusCode < 600) {\n    logger.debug({ err }, 'GitHub failure: 5xx');\n    throw new ExternalHostError(err, PlatformId.Github);\n  }\n  if (\n    err.statusCode === 403 &&\n    message.startsWith('You have triggered an abuse detection mechanism')\n  ) {\n    logger.debug({ err }, 'GitHub failure: abuse detection');\n    throw new Error(PLATFORM_RATE_LIMIT_EXCEEDED);\n  }\n  if (\n    err.statusCode === 403 &&\n    message.startsWith('You have exceeded a secondary rate limit')\n  ) {\n    logger.debug({ err }, 'GitHub failure: secondary rate limit');\n    throw new Error(PLATFORM_RATE_LIMIT_EXCEEDED);\n  }\n  if (err.statusCode === 403 && message.includes('Upgrade to GitHub Pro')) {\n    logger.debug({ path }, 'Endpoint needs paid GitHub plan');\n    throw err;\n  }\n  if (err.statusCode === 403 && message.includes('rate limit exceeded')) {\n    logger.debug({ err }, 'GitHub failure: rate limit');\n    throw new Error(PLATFORM_RATE_LIMIT_EXCEEDED);\n  }\n  if (\n    err.statusCode === 403 &&\n    message.startsWith('Resource not accessible by integration')\n  ) {\n    logger.debug(\n      { err },\n      'GitHub failure: Resource not accessible by integration'\n    );\n    throw new Error(PLATFORM_INTEGRATION_UNAUTHORIZED);\n  }\n  if (err.statusCode === 401 && message.includes('Bad credentials')) {\n    const rateLimit = err.headers?.['x-ratelimit-limit'] ?? -1;\n    logger.debug(\n      {\n        token: maskToken(opts.token),\n        err,\n      },\n      'GitHub failure: Bad credentials'\n    );\n    if (rateLimit === '60') {\n      throw new ExternalHostError(err, PlatformId.Github);\n    }\n    throw new Error(PLATFORM_BAD_CREDENTIALS);\n  }\n  if (err.statusCode === 422) {\n    if (\n      message.includes('Review cannot be requested from pull request author')\n    ) {\n      throw err;\n    } else if (err.body?.errors?.find((e: any) => e.code === 'invalid')) {\n      logger.debug({ err }, 'Received invalid response - aborting');\n      throw new Error(REPOSITORY_CHANGED);\n    } else if (\n      err.body?.errors?.find((e: any) =>\n        e.message?.startsWith('A pull request already exists')\n      )\n    ) {\n      throw err;\n    }\n    logger.debug({ err }, '422 Error thrown from GitHub');\n    throw new ExternalHostError(err, PlatformId.Github);\n  }\n  if (\n    err.statusCode === 410 &&\n    err.body?.message === 'Issues are disabled for this repo'\n  ) {\n    throw err;\n  }\n  if (err.statusCode === 404) {\n    logger.debug({ url: path }, 'GitHub 404');\n  } else {\n    logger.debug({ err }, 'Unknown GitHub error');\n  }\n  throw err;\n}\n\ninterface GraphqlOptions {\n  variables?: Record<string, string | number | null>;\n  paginate?: boolean;\n  count?: number;\n  limit?: number;\n  cursor?: string;\n  acceptHeader?: string;\n}\n\nfunction constructAcceptString(input?: any): string {\n  const defaultAccept = 'application/vnd.github.v3+json';\n  const acceptStrings =\n    typeof input === 'string' ? input.split(regEx(/\\s*,\\s*/)) : [];\n  if (\n    !acceptStrings.some((x) => x.startsWith('application/vnd.github.')) ||\n    acceptStrings.length < 2\n  ) {\n    acceptStrings.push(defaultAccept);\n  }\n  return acceptStrings.join(', ');\n}\n\nexport class GithubHttp extends Http<GithubHttpOptions, GithubHttpOptions> {\n  constructor(\n    hostType: string = PlatformId.Github,\n    options?: GithubHttpOptions\n  ) {\n    super(hostType, options);\n  }\n\n  protected override async request<T>(\n    url: string | URL,\n    options?: GithubInternalOptions & GithubHttpOptions,\n    okToRetry = true\n  ): Promise<HttpResponse<T> | null> {\n    let result = null;\n\n    const opts = {\n      baseUrl,\n      ...options,\n      throwHttpErrors: true,\n    };\n\n    const accept = constructAcceptString(opts.headers?.accept);\n\n    opts.headers = {\n      ...opts.headers,\n      accept,\n    };\n\n    try {\n      result = await super.request<T>(url, opts);\n\n      // istanbul ignore else: Can result be null ???\n      if (result !== null) {\n        if (opts.paginate) {\n          // Check if result is paginated\n          const pageLimit = opts.pageLimit || 10;\n          const linkHeader =\n            result?.headers?.link &&\n            parseLinkHeader(result.headers.link as string);\n          if (linkHeader?.next && linkHeader?.last) {\n            let lastPage = +linkHeader.last.page;\n            // istanbul ignore else: needs a test\n            if (!process.env.RENOVATE_PAGINATE_ALL && opts.paginate !== 'all') {\n              lastPage = Math.min(pageLimit, lastPage);\n            }\n            const pageNumbers = Array.from(\n              new Array(lastPage),\n              (x, i) => i + 1\n            ).slice(1);\n            const queue = pageNumbers.map(\n              (page) => (): Promise<HttpResponse> => {\n                const nextUrl = new URL(linkHeader.next.url, baseUrl);\n                delete nextUrl.search;\n                nextUrl.searchParams.set('page', page.toString());\n                return this.request(\n                  nextUrl,\n                  { ...opts, paginate: false },\n                  okToRetry\n                );\n              }\n            );\n            const pages = await pAll(queue, { concurrency: 5 });\n            if (opts.paginationField) {\n              result.body[opts.paginationField] = result.body[\n                opts.paginationField\n              ].concat(\n                ...pages\n                  .filter(Boolean)\n                  .map((page) => page.body[opts.paginationField])\n              );\n            } else {\n              result.body = result.body.concat(\n                ...pages.filter(Boolean).map((page) => page.body)\n              );\n            }\n          }\n        }\n      }\n    } catch (err) {\n      handleGotError(err, url, opts);\n    }\n\n    return result;\n  }\n\n  public async requestGraphql<T = unknown>(\n    query: string,\n    options: GraphqlOptions = {}\n  ): Promise<GithubGraphqlResponse<T>> {\n    let result = null;\n\n    const path = 'graphql';\n\n    const { paginate, count = 100, cursor = null } = options;\n    let { variables } = options;\n    if (paginate) {\n      variables = {\n        ...variables,\n        count,\n        cursor,\n      };\n    }\n    const body = variables ? { query, variables } : { query };\n\n    const opts: HttpPostOptions = {\n      baseUrl: baseUrl.replace('/v3/', '/'), // GHE uses unversioned graphql path\n      body,\n      headers: { accept: options?.acceptHeader },\n    };\n\n    logger.trace(`Performing Github GraphQL request`);\n\n    try {\n      const res = await this.postJson<GithubGraphqlResponse<T>>(\n        'graphql',\n        opts\n      );\n      result = res?.body;\n    } catch (err) {\n      logger.debug({ err, query, options }, 'Unexpected GraphQL Error');\n      if (err instanceof ExternalHostError && count && count > 10) {\n        logger.info('Reducing pagination count to workaround graphql errors');\n        return null;\n      }\n      handleGotError(err, path, opts);\n    }\n    return result;\n  }\n\n  async queryRepoField<T = Record<string, unknown>>(\n    query: string,\n    fieldName: string,\n    options: GraphqlOptions = {}\n  ): Promise<T[]> {\n    const result: T[] = [];\n\n    const { paginate = true } = options;\n\n    let optimalCount: null | number = null;\n    const initialCount = options.count || 100;\n    let count = initialCount;\n    let limit = options.limit || 1000;\n    let cursor: string = null;\n\n    let isIterating = true;\n    while (isIterating) {\n      const res = await this.requestGraphql<GithubGraphqlRepoData<T>>(query, {\n        ...options,\n        count: Math.min(count, limit),\n        cursor,\n        paginate,\n      });\n      const fieldData = res?.data?.repository?.[fieldName];\n      if (fieldData) {\n        optimalCount = count;\n\n        const { nodes = [], edges = [], pageInfo } = fieldData;\n        result.push(...nodes);\n        result.push(...edges);\n\n        limit = Math.max(0, limit - nodes.length - edges.length);\n\n        if (limit === 0) {\n          isIterating = false;\n        } else if (paginate && pageInfo) {\n          const { hasNextPage, endCursor } = pageInfo;\n          if (hasNextPage && endCursor) {\n            cursor = endCursor;\n          } else {\n            isIterating = false;\n          }\n        }\n      } else {\n        count = Math.floor(count / 2);\n        if (count === 0) {\n          logger.warn({ query, options, res }, 'Error fetching GraphQL nodes');\n          isIterating = false;\n        }\n      }\n\n      if (!paginate) {\n        isIterating = false;\n      }\n    }\n\n    // See: https://github.com/renovatebot/renovate/issues/12703\n    // istanbul ignore if\n    if (\n      optimalCount &&\n      optimalCount < initialCount && // log only shrinked results\n      baseUrl === githubBaseUrl\n    ) {\n      logger.debug(\n        { optimalCount },\n        'Successful GraphQL query with shrinked pagination size'\n      );\n    }\n\n    return result;\n  }\n}\n"]}