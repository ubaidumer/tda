{"version":3,"file":"bitbucket.js","sourceRoot":"","sources":["../../../lib/util/http/bitbucket.ts"],"names":[],"mappings":";;;AACA,wBAAyE;AAEzE,IAAI,OAAO,GAAG,4BAA4B,CAAC;AAEpC,MAAM,UAAU,GAAG,CAAC,GAAW,EAAQ,EAAE;IAC9C,OAAO,GAAG,GAAG,CAAC;AAChB,CAAC,CAAC;AAFW,QAAA,UAAU,cAErB;AAEF,MAAa,aAAc,SAAQ,OAAI;IACrC,YAAY,OAAqB;QAC/B,KAAK,8BAAuB,OAAO,CAAC,CAAC;IACvC,CAAC;IAEkB,OAAO,CACxB,GAAiB,EACjB,OAA6B;QAE7B,MAAM,IAAI,GAAG;YACX,OAAO;YACP,GAAG,OAAO;SACX,CAAC;QACF,OAAO,KAAK,CAAC,OAAO,CAAI,GAAG,EAAE,IAAI,CAAC,CAAC;IACrC,CAAC;CACF;AAfD,sCAeC","sourcesContent":["import { PlatformId } from '../../constants';\nimport { Http, HttpOptions, HttpResponse, InternalHttpOptions } from '.';\n\nlet baseUrl = 'https://api.bitbucket.org/';\n\nexport const setBaseUrl = (url: string): void => {\n  baseUrl = url;\n};\n\nexport class BitbucketHttp extends Http {\n  constructor(options?: HttpOptions) {\n    super(PlatformId.Bitbucket, options);\n  }\n\n  protected override request<T>(\n    url: string | URL,\n    options?: InternalHttpOptions\n  ): Promise<HttpResponse<T> | null> {\n    const opts = {\n      baseUrl,\n      ...options,\n    };\n    return super.request<T>(url, opts);\n  }\n}\n"]}