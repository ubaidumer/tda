{"version":3,"file":"proxies.js","sourceRoot":"","sources":["../../../lib/util/fs/proxies.ts"],"names":[],"mappings":";;;;AAAA,0DAA+B;AAG/B,uBAAuB;AACvB,SAAgB,IAAI,CAAC,IAAqB;IACxC,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACvB,CAAC;AAFD,oBAEC;AAED,uBAAuB;AACvB,SAAgB,KAAK,CACnB,IAAqB,EACrB,IAAqB;IAErB,OAAO,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAC9B,CAAC;AALD,sBAKC;AAOD,SAAgB,QAAQ,CACtB,QAAgB,EAChB,QAAiB;IAEjB,OAAO,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AAC5E,CAAC;AALD,4BAKC;AAED,uBAAuB;AACvB,SAAgB,SAAS,CACvB,QAAgB,EAChB,WAAmB;IAEnB,OAAO,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;AAC7C,CAAC;AALD,8BAKC;AAED,uBAAuB;AACvB,SAAgB,UAAU,CACxB,IAAY,EACZ,IAAa,EACb,OAAmC;IAEnC,OAAO,EAAE,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,CAAC,CAAC;AAClD,CAAC;AAND,gCAMC;AAED,SAAgB,MAAM,CAAC,GAAW;IAChC,OAAO,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AACxB,CAAC;AAFD,wBAEC;AAED,uBAAuB;AACvB,SAAgB,MAAM,CAAC,IAAqB;IAC1C,OAAO,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACzB,CAAC;AAFD,wBAEC;AAED,uBAAuB;AACvB,SAAgB,MAAM,CAAC,IAAY;IACjC,OAAO,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AAC7B,CAAC;AAFD,wBAEC;AAED,uBAAuB;AACvB,SAAgB,UAAU,CAAC,IAAY;IACrC,OAAO,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AAC7B,CAAC;AAFD,gCAEC;AAED,uBAAuB;AACvB,SAAgB,IAAI,CAClB,GAAW,EACX,IAAY,EACZ,OAAqB;IAErB,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,CAAC,CAAC;AAC3C,CAAC;AAND,oBAMC;AAED,uBAAuB;AACvB,SAAgB,OAAO,CAAC,IAAY;IAClC,OAAO,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC1B,CAAC;AAFD,0BAEC;AAED,uBAAuB;AACvB,SAAgB,EAAE,CAChB,IAAY,EACZ,OAKC;IAED,OAAO,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAC9B,CAAC;AAVD,gBAUC","sourcesContent":["import * as fs from 'fs-extra';\nimport { MoveOptions, WriteFileOptions } from 'fs-extra';\n\n// istanbul ignore next\nexport function stat(path: string | Buffer): Promise<fs.Stats> {\n  return fs.stat(path);\n}\n\n// istanbul ignore next\nexport function chmod(\n  path: string | Buffer,\n  mode: string | number\n): Promise<void> {\n  return fs.chmod(path, mode);\n}\n\nexport async function readFile(fileName: string): Promise<Buffer>;\nexport async function readFile(\n  fileName: string,\n  encoding: 'utf8'\n): Promise<string>;\nexport function readFile(\n  fileName: string,\n  encoding?: string\n): Promise<string | Buffer> {\n  return encoding ? fs.readFile(fileName, encoding) : fs.readFile(fileName);\n}\n\n// istanbul ignore next\nexport function writeFile(\n  fileName: string,\n  fileContent: string\n): Promise<void> {\n  return fs.writeFile(fileName, fileContent);\n}\n\n// istanbul ignore next\nexport function outputFile(\n  file: string,\n  data: unknown,\n  options?: WriteFileOptions | string\n): Promise<void> {\n  return fs.outputFile(file, data, options ?? {});\n}\n\nexport function remove(dir: string): Promise<void> {\n  return fs.remove(dir);\n}\n\n// istanbul ignore next\nexport function unlink(path: string | Buffer): Promise<void> {\n  return fs.unlink(path);\n}\n\n// istanbul ignore next\nexport function exists(path: string): Promise<boolean> {\n  return fs.pathExists(path);\n}\n\n// istanbul ignore next\nexport function pathExists(path: string): Promise<boolean> {\n  return fs.pathExists(path);\n}\n\n// istanbul ignore next\nexport function move(\n  src: string,\n  dest: string,\n  options?: MoveOptions\n): Promise<void> {\n  return fs.move(src, dest, options ?? {});\n}\n\n// istanbul ignore next\nexport function readdir(path: string): Promise<string[]> {\n  return fs.readdir(path);\n}\n\n// istanbul ignore next\nexport function rm(\n  path: string,\n  options?: {\n    force?: boolean;\n    maxRetries?: number;\n    recursive?: boolean;\n    retryDelay?: number;\n  }\n): Promise<void> {\n  return fs.rm(path, options);\n}\n"]}