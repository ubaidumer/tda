{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/versioning/nuget/index.ts"],"names":[],"mappings":";;;;AAAA,4CAAyC;AACzC,uEAA4C;AAG/B,QAAA,EAAE,GAAG,OAAO,CAAC;AACb,QAAA,WAAW,GAAG,OAAO,CAAC;AACtB,QAAA,IAAI,GAAG;IAClB,oEAAoE;CACrE,CAAC;AACW,QAAA,cAAc,GAAG,KAAK,CAAC;AAEpC,MAAM,OAAO,GAAG,IAAA,aAAK,EAAC,mCAAmC,CAAC,CAAC;AAE3D,SAAS,KAAK,CAAC,OAAe;IAC5B,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACtC,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,IAAI,CAAC;KACb;IACD,MAAM,CAAC,EAAE,MAAM,EAAE,gBAAgB,CAAC,GAAG,OAAO,CAAC;IAC7C,MAAM,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAC9C,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,gBAAgB,IAAI,EAAE,EAAE,CAAC;AACrD,CAAC;AAED,SAAS,OAAO,CAAC,QAAgB,EAAE,QAAgB;IACjD,MAAM,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;IAChC,MAAM,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;IAChC,qBAAqB;IACrB,IAAI,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,EAAE;QACzB,OAAO,CAAC,CAAC;KACV;IACD,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACxE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;QAClC,+BAA+B;QAC/B,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACtC,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACtC,IAAI,KAAK,KAAK,KAAK,EAAE;YACnB,OAAO,KAAK,GAAG,KAAK,CAAC;SACtB;KACF;IACD,yBAAyB;IACzB,MAAM,gBAAgB,GAAG,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACtE,IAAI,gBAAgB,KAAK,CAAC,EAAE;QAC1B,4DAA4D;QAC5D,IAAI,OAAO,CAAC,MAAM,KAAK,EAAE,EAAE;YACzB,OAAO,CAAC,CAAC;SACV;QACD,IAAI,OAAO,CAAC,MAAM,KAAK,EAAE,EAAE;YACzB,OAAO,CAAC,CAAC,CAAC;SACX;KACF;IACD,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AAED,SAAS,QAAQ,CAAC,OAAe;IAC/B,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;IAC9B,OAAO,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,EAAE,CAAC;AACxC,CAAC;AAEY,QAAA,GAAG,GAAkB;IAChC,GAAG,OAAO,CAAC,MAAM,CAAC;QAChB,KAAK;QACL,OAAO;KACR,CAAC;IACF,QAAQ;CACT,CAAC;AAEF,kBAAe,WAAG,CAAC","sourcesContent":["import { regEx } from '../../util/regex';\nimport * as generic from '../loose/generic';\nimport type { VersioningApi } from '../types';\n\nexport const id = 'nuget';\nexport const displayName = 'NuGet';\nexport const urls = [\n  'https://docs.microsoft.com/en-us/nuget/concepts/package-versioning',\n];\nexport const supportsRanges = false;\n\nconst pattern = regEx(/^(\\d+(?:\\.\\d+)*)(-[^+]+)?(\\+.*)?$/);\n\nfunction parse(version: string): any {\n  const matches = pattern.exec(version);\n  if (!matches) {\n    return null;\n  }\n  const [, prefix, prereleasesuffix] = matches;\n  const release = prefix.split('.').map(Number);\n  return { release, suffix: prereleasesuffix || '' };\n}\n\nfunction compare(version1: string, version2: string): number {\n  const parsed1 = parse(version1);\n  const parsed2 = parse(version2);\n  // istanbul ignore if\n  if (!(parsed1 && parsed2)) {\n    return 1;\n  }\n  const length = Math.max(parsed1.release.length, parsed2.release.length);\n  for (let i = 0; i < length; i += 1) {\n    // 2.1 and 2.1.0 are equivalent\n    const part1 = parsed1.release[i] || 0;\n    const part2 = parsed2.release[i] || 0;\n    if (part1 !== part2) {\n      return part1 - part2;\n    }\n  }\n  // numeric version equals\n  const suffixComparison = parsed1.suffix.localeCompare(parsed2.suffix);\n  if (suffixComparison !== 0) {\n    // Empty suffix should compare greater than non-empty suffix\n    if (parsed1.suffix === '') {\n      return 1;\n    }\n    if (parsed2.suffix === '') {\n      return -1;\n    }\n  }\n  return suffixComparison;\n}\n\nfunction isStable(version: string): boolean {\n  const parsed = parse(version);\n  return parsed && parsed.suffix === '';\n}\n\nexport const api: VersioningApi = {\n  ...generic.create({\n    parse,\n    compare,\n  }),\n  isStable,\n};\n\nexport default api;\n"]}