{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/versioning/cargo/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../logger';\nimport { regEx } from '../../util/regex';\nimport { api as npm } from '../npm';\nimport type { NewValueConfig, VersioningApi } from '../types';\n\nexport const id = 'cargo';\nexport const displayName = 'Cargo';\nexport const urls = [\n  'https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html',\n];\nexport const supportsRanges = true;\nexport const supportedRangeStrategies = ['bump', 'extend', 'pin', 'replace'];\n\nconst isVersion = (input: string): string | boolean => npm.isVersion(input);\n\nfunction convertToCaret(item: string): string {\n  // In Cargo, \"1.2.3\" doesn't mean exactly 1.2.3, it means >= 1.2.3 < 2.0.0\n  if (isVersion(item)) {\n    // NOTE: Partial versions like '1.2' don't get converted to '^1.2'\n    // because isVersion('1.2') === false\n    // In cargo and in npm 1.2 is equivalent to 1.2.* so it is correct behavior.\n    return '^' + item.trim();\n  }\n  return item.trim();\n}\n\nfunction cargo2npm(input: string): string {\n  let versions = input.split(',');\n  versions = versions.map(convertToCaret);\n  return versions.join(' ');\n}\n\nfunction notEmpty(s: string): boolean {\n  return s !== '';\n}\n\nfunction npm2cargo(input: string): string {\n  // istanbul ignore if\n  if (!input) {\n    return input;\n  }\n  // Note: this doesn't remove the ^\n  const res = input\n    .split(regEx(/\\s+,?\\s*|\\s*,?\\s+/))\n    .map((str) => str.trim())\n    .filter(notEmpty);\n  const operators = ['^', '~', '=', '>', '<', '<=', '>='];\n  for (let i = 0; i < res.length - 1; i += 1) {\n    if (operators.includes(res[i])) {\n      const newValue = res[i] + ' ' + res[i + 1];\n      res.splice(i, 2, newValue);\n    }\n  }\n  return res.join(', ');\n}\n\nconst isLessThanRange = (version: string, range: string): boolean =>\n  npm.isLessThanRange(version, cargo2npm(range));\n\nexport const isValid = (input: string): string | boolean =>\n  npm.isValid(cargo2npm(input));\n\nconst matches = (version: string, range: string): boolean =>\n  npm.matches(version, cargo2npm(range));\n\nconst getSatisfyingVersion = (versions: string[], range: string): string =>\n  npm.getSatisfyingVersion(versions, cargo2npm(range));\n\nconst minSatisfyingVersion = (versions: string[], range: string): string =>\n  npm.minSatisfyingVersion(versions, cargo2npm(range));\n\nconst isSingleVersion = (constraint: string): string | boolean =>\n  constraint.trim().startsWith('=') &&\n  isVersion(constraint.trim().substring(1).trim());\n\nfunction getNewValue({\n  currentValue,\n  rangeStrategy,\n  currentVersion,\n  newVersion,\n}: NewValueConfig): string {\n  if (!currentValue || currentValue === '*') {\n    return currentValue;\n  }\n  if (rangeStrategy === 'pin' || isSingleVersion(currentValue)) {\n    let res = '=';\n    if (currentValue.startsWith('= ')) {\n      res += ' ';\n    }\n    res += newVersion;\n    return res;\n  }\n  const newSemver = npm.getNewValue({\n    currentValue: cargo2npm(currentValue),\n    rangeStrategy,\n    currentVersion,\n    newVersion,\n  });\n  let newCargo = npm2cargo(newSemver);\n  // istanbul ignore if\n  if (!newCargo) {\n    logger.info(\n      { currentValue, newSemver },\n      'Could not get cargo version from semver'\n    );\n    return currentValue;\n  }\n  // Try to reverse any caret we added\n  if (newCargo.startsWith('^') && !currentValue.startsWith('^')) {\n    newCargo = newCargo.substring(1);\n  }\n  return newCargo;\n}\n\nexport const api: VersioningApi = {\n  ...npm,\n  getNewValue,\n  isLessThanRange,\n  isSingleVersion,\n  isValid,\n  matches,\n  getSatisfyingVersion,\n  minSatisfyingVersion,\n};\nexport default api;\n"]}