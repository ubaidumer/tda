{"version":3,"file":"range.js","sourceRoot":"","sources":["../../../lib/versioning/ruby/range.ts"],"names":[],"mappings":";;;AAAA,gFAAiF;AACjF,wEAA6E;AAC7E,yCAAsC;AACtC,4CAAyC;AACzC,yCAAsE;AAQtE,MAAM,KAAK,GAAG,CAAC,KAAa,EAAS,EAAE;IACrC,MAAM,MAAM,GAAG,IAAA,aAAK,EAClB,qEAAqE,CACtE,CAAC;IAEF,MAAM,KAAK,GAAG,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;IAEnC,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,KAAK,EAAE;QACT,MAAM,EAAE,OAAO,GAAG,IAAI,EAAE,QAAQ,GAAG,IAAI,EAAE,SAAS,GAAG,GAAG,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC;QAC1E,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC;KACzC;IAED,OAAO;QACL,OAAO,EAAE,IAAI;QACb,QAAQ,EAAE,IAAI;QACd,SAAS,EAAE,GAAG;KACf,CAAC;AACJ,CAAC,CAAC;AAqCO,sBAAK;AAjCd,MAAM,GAAG,GAAG,CAAC,OAAe,EAAE,KAAa,EAAkB,EAAE;IAC7D,MAAM,UAAU,GAAG,IAAA,gBAAM,EAAC,OAAO,CAAC,CAAC;IACnC,IAAI,CAAC,UAAU,EAAE;QACf,eAAM,CAAC,IAAI,CAAC,yBAAyB,OAAO,GAAG,CAAC,CAAC;QACjD,OAAO,IAAI,CAAC;KACb;IACD,MAAM,YAAY,GAAqB,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,mBAAM,CAAC,CAAC;IAEpE,MAAM,OAAO,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,EAAE;QACnD,QAAQ,QAAQ,EAAE;YAChB,KAAK,aAAE,CAAC;YACR,KAAK,aAAE;gBACL,OAAO,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACtC,KAAK,cAAG,CAAC;YACT,KAAK,cAAG,CAAC;YACT,KAAK,gBAAK,CAAC;YACX,KAAK,oBAAS;gBACZ,OAAO,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACrC,KAAK,eAAI;gBACP,OAAO,CACL,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;oBAC3B,UAAU,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAC9C,CAAC;YACJ,uBAAuB;YACvB;gBACE,eAAM,CAAC,IAAI,CAAC,yBAAyB,QAAQ,GAAG,CAAC,CAAC;gBAClD,OAAO,IAAI,CAAC;SACf;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,KAAK,EAAE,EAAE,CAAC,WAAW,IAAI,KAAK,EAAE,IAAI,CAAC,CAAC;AAC5E,CAAC,CAAC;AAEc,kBAAG","sourcesContent":["import { parse as _parse } from '@renovatebot/ruby-semver/dist/ruby/requirement';\nimport { Version, create } from '@renovatebot/ruby-semver/dist/ruby/version';\nimport { logger } from '../../logger';\nimport { regEx } from '../../util/regex';\nimport { EQUAL, GT, GTE, LT, LTE, NOT_EQUAL, PGTE } from './operator';\n\nexport interface Range {\n  version: string;\n  operator: string;\n  delimiter: string;\n}\n\nconst parse = (range: string): Range => {\n  const regExp = regEx(\n    /^(?<operator>[^\\d\\s]+)?(?<delimiter>\\s*)(?<version>[0-9a-zA-Z-.]+)$/\n  );\n\n  const value = (range || '').trim();\n\n  const match = regExp.exec(value);\n  if (match) {\n    const { version = null, operator = null, delimiter = ' ' } = match.groups;\n    return { version, operator, delimiter };\n  }\n\n  return {\n    version: null,\n    operator: null,\n    delimiter: ' ',\n  };\n};\n\ntype GemRequirement = [string, Version];\n\nconst ltr = (version: string, range: string): boolean | null => {\n  const gemVersion = create(version);\n  if (!gemVersion) {\n    logger.warn(`Invalid ruby version '${version}'`);\n    return null;\n  }\n  const requirements: GemRequirement[] = range.split(',').map(_parse);\n\n  const results = requirements.map(([operator, ver]) => {\n    switch (operator) {\n      case GT:\n      case LT:\n        return gemVersion.compare(ver) <= 0;\n      case GTE:\n      case LTE:\n      case EQUAL:\n      case NOT_EQUAL:\n        return gemVersion.compare(ver) < 0;\n      case PGTE:\n        return (\n          gemVersion.compare(ver) < 0 &&\n          gemVersion.release().compare(ver.bump()) <= 0\n        );\n      // istanbul ignore next\n      default:\n        logger.warn(`Unsupported operator '${operator}'`);\n        return null;\n    }\n  });\n\n  return results.reduce((accumulator, value) => accumulator && value, true);\n};\n\nexport { parse, ltr };\n"]}