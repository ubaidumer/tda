{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/versioning/regex/index.ts"],"names":[],"mappings":";;;;AAAA,uEAAkC;AAClC,mCAAsE;AACtE,mEAAmE;AACnE,4CAAyC;AACzC,8CAAwE;AAG3D,QAAA,EAAE,GAAG,OAAO,CAAC;AACb,QAAA,WAAW,GAAG,oBAAoB,CAAC;AACnC,QAAA,IAAI,GAAG,EAAE,CAAC;AACV,QAAA,cAAc,GAAG,KAAK,CAAC;AAUpC,4EAA4E;AAC5E,SAAS,QAAQ,CAAC,OAAsB;IACtC,IAAI,OAAO,GAAG,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;IAClF,IAAI,YAAE,CAAC,cAAc,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;QACzC,OAAO,IAAI,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;KACrC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,MAAa,mBAAoB,SAAQ,8BAAmC;IAc1E,YAAY,WAAmB;QAC7B,KAAK,EAAE,CAAC;QAdV,uEAAuE;QACvE,iBAAiB;QACjB,EAAE;QACF,yCAAyC;QACzC,sFAAsF;QACtF,yCAAyC;QACzC,yFAAyF;QACzF,4EAA4E;QAC5E,gHAAgH;QAChH,6EAA6E;QAC7E,4GAA4G;QACpG,YAAO,GAAW,IAAI,CAAC;QAI7B,MAAM,UAAU,GAAG,WAAW,IAAI,mBAAmB,CAAC;QAEtD,wEAAwE;QACxE,wCAAwC;QACxC,IACE,CAAC,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC;YAC/B,CAAC,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC;YAC/B,CAAC,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,EAC/B;YACA,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,kCAAiB,CAAC,CAAC;YAC3C,KAAK,CAAC,gBAAgB,GAAG,UAAU,CAAC;YACpC,KAAK,CAAC,eAAe;gBACnB,yEAAyE,CAAC;YAC5E,MAAM,KAAK,CAAC;SACb;QAED,oEAAoE;QACpE,0BAA0B;QAC1B,IAAI,CAAC,OAAO,GAAG,IAAA,aAAK,EAAC,UAAU,CAAC,CAAC;IACnC,CAAC;IAED,+EAA+E;IACrE,MAAM,CAAC,OAAe;QAC9B,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACzC,IAAI,KAAK,KAAK,IAAI,EAAE;YAClB,OAAO,IAAI,CAAC;SACb;QAED,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;QAC5B,MAAM,OAAO,GAAG;YACd,OAAO,MAAM,CAAC,KAAK,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;YAC9D,OAAO,MAAM,CAAC,KAAK,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;YAC9D,OAAO,MAAM,CAAC,KAAK,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;SAC/D,CAAC;QAEF,IAAI,MAAM,CAAC,KAAK,EAAE;YAChB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;SACpC;QAED,OAAO;YACL,OAAO;YACP,UAAU,EAAE,MAAM,CAAC,UAAU;YAC7B,aAAa,EAAE,MAAM,CAAC,aAAa;SACpC,CAAC;IACJ,CAAC;IAEQ,YAAY,CAAC,OAAe,EAAE,KAAa;QAClD,OAAO,CACL,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,aAAa,KAAK,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,aAAa,CACxE,CAAC;IACJ,CAAC;IAEQ,eAAe,CAAC,OAAe,EAAE,KAAa;QACrD,OAAO,IAAA,YAAG,EAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3E,CAAC;IAEQ,oBAAoB,CAC3B,QAAkB,EAClB,KAAa;QAEb,OAAO,IAAA,sBAAa,EAClB,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAC7C,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAC7B,CAAC;IACJ,CAAC;IAEQ,oBAAoB,CAC3B,QAAkB,EAClB,KAAa;QAEb,OAAO,IAAA,sBAAa,EAClB,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAC7C,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAC7B,CAAC;IACJ,CAAC;IAEQ,OAAO,CAAC,OAAe,EAAE,KAAa;QAC7C,OAAO,IAAA,kBAAS,EACd,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EAC9B,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAC7B,CAAC;IACJ,CAAC;CACF;AAlGD,kDAkGC;AAEY,QAAA,GAAG,GAA6B,mBAAmB,CAAC;AAEjE,kBAAe,WAAG,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { ltr, maxSatisfying, minSatisfying, satisfies } from 'semver';\nimport { CONFIG_VALIDATION } from '../../constants/error-messages';\nimport { regEx } from '../../util/regex';\nimport { GenericVersion, GenericVersioningApi } from '../loose/generic';\nimport type { VersioningApiConstructor } from '../types';\n\nexport const id = 'regex';\nexport const displayName = 'Regular Expression';\nexport const urls = [];\nexport const supportsRanges = false;\n\nexport interface RegExpVersion extends GenericVersion {\n  /**\n   * compatibility, if present, are treated as a compatibility layer: we will\n   * never try to update to a version with a different compatibility.\n   */\n  compatibility: string;\n}\n\n// convenience method for passing a Version object into any semver.* method.\nfunction asSemver(version: RegExpVersion): string {\n  let vstring = `${version.release[0]}.${version.release[1]}.${version.release[2]}`;\n  if (is.nonEmptyString(version.prerelease)) {\n    vstring += `-${version.prerelease}`;\n  }\n  return vstring;\n}\n\nexport class RegExpVersioningApi extends GenericVersioningApi<RegExpVersion> {\n  // config is expected to be overridden by a user-specified RegExp value\n  // sample values:\n  //\n  // * emulates the \"semver\" configuration:\n  //   RegExp('^(?<major>\\\\d+)\\\\.(?<minor>\\\\d+)\\\\.(?<patch>\\\\d+)(-(?<prerelease>.*))?$')\n  // * emulates the \"docker\" configuration:\n  //   RegExp('^(?<major>\\\\d+)\\\\.(?<minor>\\\\d+)\\\\.(?<patch>\\\\d+)(-(?<compatibility>.*))?$')\n  // * matches the versioning approach used by the Python images on DockerHub:\n  //   RegExp('^(?<major>\\\\d+)\\\\.(?<minor>\\\\d+)\\\\.(?<patch>\\\\d+)(?<prerelease>[^.-]+)?(-(?<compatibility>.*))?$');\n  // * matches the versioning approach used by the Bitnami images on DockerHub:\n  //   RegExp('^(?<major>\\\\d+)\\\\.(?<minor>\\\\d+)\\\\.(?<patch>\\\\d+)(:?-(?<compatibility>.*-r)(?<build>\\\\d+))?$');\n  private _config: RegExp = null;\n\n  constructor(_new_config: string) {\n    super();\n    const new_config = _new_config || '^(?<major>\\\\d+)?$';\n\n    // without at least one of {major, minor, patch} specified in the regex,\n    // this versioner will not work properly\n    if (\n      !new_config.includes('<major>') &&\n      !new_config.includes('<minor>') &&\n      !new_config.includes('<patch>')\n    ) {\n      const error = new Error(CONFIG_VALIDATION);\n      error.validationSource = new_config;\n      error.validationError =\n        'regex versioning needs at least one major, minor or patch group defined';\n      throw error;\n    }\n\n    // TODO: should we validate the user has not added extra unsupported\n    // capture groups? (#9717)\n    this._config = regEx(new_config);\n  }\n\n  // convenience method for passing a string into a Version given current config.\n  protected _parse(version: string): RegExpVersion | null {\n    const match = this._config.exec(version);\n    if (match === null) {\n      return null;\n    }\n\n    const groups = match.groups;\n    const release = [\n      typeof groups.major === 'undefined' ? 0 : Number(groups.major),\n      typeof groups.minor === 'undefined' ? 0 : Number(groups.minor),\n      typeof groups.patch === 'undefined' ? 0 : Number(groups.patch),\n    ];\n\n    if (groups.build) {\n      release.push(Number(groups.build));\n    }\n\n    return {\n      release,\n      prerelease: groups.prerelease,\n      compatibility: groups.compatibility,\n    };\n  }\n\n  override isCompatible(version: string, range: string): boolean {\n    return (\n      this._parse(version).compatibility === this._parse(range).compatibility\n    );\n  }\n\n  override isLessThanRange(version: string, range: string): boolean {\n    return ltr(asSemver(this._parse(version)), asSemver(this._parse(range)));\n  }\n\n  override getSatisfyingVersion(\n    versions: string[],\n    range: string\n  ): string | null {\n    return maxSatisfying(\n      versions.map((v) => asSemver(this._parse(v))),\n      asSemver(this._parse(range))\n    );\n  }\n\n  override minSatisfyingVersion(\n    versions: string[],\n    range: string\n  ): string | null {\n    return minSatisfying(\n      versions.map((v) => asSemver(this._parse(v))),\n      asSemver(this._parse(range))\n    );\n  }\n\n  override matches(version: string, range: string): boolean {\n    return satisfies(\n      asSemver(this._parse(version)),\n      asSemver(this._parse(range))\n    );\n  }\n}\n\nexport const api: VersioningApiConstructor = RegExpVersioningApi;\n\nexport default api;\n"]}