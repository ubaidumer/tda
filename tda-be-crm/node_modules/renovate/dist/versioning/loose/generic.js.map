{"version":3,"file":"generic.js","sourceRoot":"","sources":["../../../lib/versioning/loose/generic.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport type { NewValueConfig, VersioningApi } from '../types';\n\nexport interface GenericVersion {\n  release: number[];\n  /** prereleases are treated in the standard semver manner, if present */\n  prerelease?: string;\n  suffix?: string;\n}\nexport interface VersionParser {\n  (version: string): GenericVersion;\n}\n\nexport interface VersionComparator {\n  (version: string, other: string): number;\n}\n\n// since this file was meant for no range support, a range = version\n// parse should return null if version not valid\n// parse should return an object with property release, an array of version sections major.minor.patch\nexport const parser = (parse: VersionParser): Partial<VersioningApi> => {\n  function isValid(version: string): string {\n    if (!version) {\n      return null;\n    }\n    const parsed = parse(version);\n    return parsed ? version : null;\n  }\n  function getSection(version: string, index: number): number {\n    const parsed = parse(version);\n    return parsed && parsed.release.length > index\n      ? parsed.release[index]\n      : null;\n  }\n  function getMajor(version: string): number {\n    return getSection(version, 0);\n  }\n  function getMinor(version: string): number {\n    return getSection(version, 1);\n  }\n  function getPatch(version: string): number {\n    return getSection(version, 2);\n  }\n\n  function isStable(version: string): boolean {\n    const parsed = parse(version);\n    return parsed && !parsed.prerelease;\n  }\n\n  return {\n    // validation\n    isCompatible: isValid,\n    isSingleVersion: isValid,\n    isStable,\n    isValid,\n    isVersion: isValid,\n    // digestion of version\n    getMajor,\n    getMinor,\n    getPatch,\n  };\n};\n\n// this is the main reason this file was created\n// most operations below could be derived from a compare function\nexport const comparer = (\n  compare: VersionComparator\n): Partial<VersioningApi> => {\n  function equals(version: string, other: string): boolean {\n    return compare(version, other) === 0;\n  }\n\n  function isGreaterThan(version: string, other: string): boolean {\n    return compare(version, other) > 0;\n  }\n  function isLessThanRange(version: string, range: string): boolean {\n    return compare(version, range) < 0;\n  }\n\n  // we don't not have ranges, so versions has to be equal\n  function getSatisfyingVersion(versions: string[], range: string): string {\n    return versions.find((v) => equals(v, range)) || null;\n  }\n  function minSatisfyingVersion(versions: string[], range: string): string {\n    return versions.find((v) => equals(v, range)) || null;\n  }\n  function getNewValue(newValueConfig: NewValueConfig): string {\n    const { newVersion } = newValueConfig || {};\n    return newVersion;\n  }\n  function sortVersions(version: string, other: string): number {\n    return compare(version, other);\n  }\n\n  return {\n    equals,\n    isGreaterThan,\n    isLessThanRange,\n    matches: equals,\n    getSatisfyingVersion,\n    minSatisfyingVersion,\n    getNewValue,\n    sortVersions,\n  };\n};\n\n// helper functions to ease create other versioning schemas with little code\n// especially if those schemas do not support ranges\nexport const create = ({\n  parse,\n  compare,\n}: {\n  parse: VersionParser;\n  compare: VersionComparator;\n}): any => {\n  let schema: VersioningApi = {} as any;\n  if (parse) {\n    schema = { ...schema, ...parser(parse) };\n  }\n  if (compare) {\n    schema = { ...schema, ...comparer(compare) };\n  }\n  return schema;\n};\n\nexport abstract class GenericVersioningApi<\n  T extends GenericVersion = GenericVersion\n> implements VersioningApi\n{\n  private _getSection(version: string, index: number): number {\n    const parsed = this._parse(version);\n    return parsed && parsed.release.length > index\n      ? parsed.release[index]\n      : null;\n  }\n\n  protected _compare(version: string, other: string): number {\n    const left = this._parse(version);\n    const right = this._parse(other);\n\n    // istanbul ignore if\n    if (!(left && right)) {\n      return 1;\n    }\n\n    // support variable length compare\n    const length = Math.max(left.release.length, right.release.length);\n    for (let i = 0; i < length; i += 1) {\n      // 2.1 and 2.1.0 are equivalent\n      const part1 = left.release[i] ?? 0;\n      const part2 = right.release[i] ?? 0;\n      if (part1 !== part2) {\n        return part1 - part2;\n      }\n    }\n\n    if (\n      is.nonEmptyString(left.prerelease) &&\n      is.nonEmptyString(right.prerelease)\n    ) {\n      const pre = left.prerelease.localeCompare(right.prerelease);\n\n      if (pre !== 0) {\n        return pre;\n      }\n    } else if (is.nonEmptyString(left.prerelease)) {\n      return -1;\n    } else if (is.nonEmptyString(right.prerelease)) {\n      return 1;\n    }\n\n    return this._compareOther(left, right);\n  }\n\n  /*\n   * virtual\n   */\n\n  protected _compareOther(_left: T, _right: T): number {\n    return 0;\n  }\n\n  protected abstract _parse(version: string): T | null;\n\n  isValid(version: string): boolean {\n    return this._parse(version) !== null;\n  }\n\n  isCompatible(version: string, _range: string): boolean {\n    return this.isValid(version);\n  }\n\n  isStable(version: string): boolean {\n    const parsed = this._parse(version);\n    return parsed && !parsed.prerelease;\n  }\n\n  isSingleVersion(version: string): string | boolean {\n    return this.isValid(version);\n  }\n\n  isVersion(version: string): string | boolean {\n    return this.isValid(version);\n  }\n\n  getMajor(version: string): number | null {\n    return this._getSection(version, 0);\n  }\n\n  getMinor(version: string): number | null {\n    return this._getSection(version, 1);\n  }\n\n  getPatch(version: string): number | null {\n    return this._getSection(version, 2);\n  }\n\n  equals(version: string, other: string): boolean {\n    return this._compare(version, other) === 0;\n  }\n\n  isGreaterThan(version: string, other: string): boolean {\n    return this._compare(version, other) > 0;\n  }\n\n  isLessThanRange(version: string, range: string): boolean {\n    return this._compare(version, range) < 0;\n  }\n\n  getSatisfyingVersion(versions: string[], range: string): string | null {\n    return versions.find((v) => this.equals(v, range)) || null;\n  }\n\n  minSatisfyingVersion(versions: string[], range: string): string | null {\n    return versions.find((v) => this.equals(v, range)) || null;\n  }\n\n  getNewValue(newValueConfig: NewValueConfig): string {\n    const { newVersion } = newValueConfig || {};\n    return newVersion;\n  }\n\n  sortVersions(version: string, other: string): number {\n    return this._compare(version, other);\n  }\n\n  matches(version: string, range: string): boolean {\n    return this.equals(version, range);\n  }\n}\n"]}