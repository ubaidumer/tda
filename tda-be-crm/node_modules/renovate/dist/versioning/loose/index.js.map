{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/versioning/loose/index.ts"],"names":[],"mappings":";;;;AAAA,4CAAyC;AAEzC,gEAAqC;AAExB,QAAA,EAAE,GAAG,OAAO,CAAC;AACb,QAAA,WAAW,GAAG,OAAO,CAAC;AACtB,QAAA,IAAI,GAAG,EAAE,CAAC;AACV,QAAA,cAAc,GAAG,KAAK,CAAC;AAEpC,MAAM,cAAc,GAAG,IAAA,aAAK,EAAC,yBAAyB,CAAC,CAAC;AACxD,MAAM,iBAAiB,GAAG,IAAA,aAAK,EAAC,kBAAkB,CAAC,CAAC;AACpD,MAAM,cAAc,GAAG,IAAA,aAAK,EAAC,UAAU,CAAC,CAAC;AAEzC,SAAS,KAAK,CAAC,OAAe;IAC5B,IAAI,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;QACpE,OAAO,IAAI,CAAC;KACb;IACD,MAAM,OAAO,GAAG,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC7C,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,IAAI,CAAC;KACb;IACD,MAAM,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,GAAG,OAAO,CAAC;IACnC,MAAM,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAC9C,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;QACtB,OAAO,IAAI,CAAC;KACb;IACD,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,IAAI,EAAE,EAAE,CAAC;AAC3C,CAAC;AAED,SAAS,OAAO,CAAC,QAAgB,EAAE,QAAgB;IACjD,MAAM,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;IAChC,MAAM,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;IAChC,qBAAqB;IACrB,IAAI,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,EAAE;QACzB,OAAO,CAAC,CAAC;KACV;IACD,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACxE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;QAClC,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACjC,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACjC,iCAAiC;QACjC,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,OAAO,CAAC,CAAC,CAAC;SACX;QACD,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,OAAO,CAAC,CAAC;SACV;QACD,IAAI,KAAK,KAAK,KAAK,EAAE;YACnB,OAAO,KAAK,GAAG,KAAK,CAAC;SACtB;KACF;IACD,SAAS;IACT,OAAO,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AACtD,CAAC;AAEY,QAAA,GAAG,GAAkB,OAAO,CAAC,MAAM,CAAC;IAC/C,KAAK;IACL,OAAO;CACR,CAAC,CAAC;AAEH,kBAAe,WAAG,CAAC","sourcesContent":["import { regEx } from '../../util/regex';\nimport type { VersioningApi } from '../types';\nimport * as generic from './generic';\n\nexport const id = 'loose';\nexport const displayName = 'Loose';\nexport const urls = [];\nexport const supportsRanges = false;\n\nconst versionPattern = regEx(/^v?(\\d+(?:\\.\\d+)*)(.*)$/);\nconst commitHashPattern = regEx(/^[a-f0-9]{7,40}$/);\nconst numericPattern = regEx(/^[0-9]+$/);\n\nfunction parse(version: string): any {\n  if (commitHashPattern.test(version) && !numericPattern.test(version)) {\n    return null;\n  }\n  const matches = versionPattern.exec(version);\n  if (!matches) {\n    return null;\n  }\n  const [, prefix, suffix] = matches;\n  const release = prefix.split('.').map(Number);\n  if (release.length > 6) {\n    return null;\n  }\n  return { release, suffix: suffix || '' };\n}\n\nfunction compare(version1: string, version2: string): number {\n  const parsed1 = parse(version1);\n  const parsed2 = parse(version2);\n  // istanbul ignore if\n  if (!(parsed1 && parsed2)) {\n    return 1;\n  }\n  const length = Math.max(parsed1.release.length, parsed2.release.length);\n  for (let i = 0; i < length; i += 1) {\n    const part1 = parsed1.release[i];\n    const part2 = parsed2.release[i];\n    // shorter is smaller 2.1 < 2.1.0\n    if (part1 === undefined) {\n      return -1;\n    }\n    if (part2 === undefined) {\n      return 1;\n    }\n    if (part1 !== part2) {\n      return part1 - part2;\n    }\n  }\n  // equals\n  return parsed1.suffix.localeCompare(parsed2.suffix);\n}\n\nexport const api: VersioningApi = generic.create({\n  parse,\n  compare,\n});\n\nexport default api;\n"]}