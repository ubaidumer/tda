{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/versioning/gradle/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { regEx } from '../../util/regex';\nimport type { NewValueConfig, VersioningApi } from '../types';\nimport {\n  RangeBound,\n  TokenType,\n  compare,\n  isValid,\n  isVersion,\n  parseMavenBasedRange,\n  parsePrefixRange,\n  tokenize,\n} from './compare';\n\nexport const id = 'gradle';\nexport const displayName = 'Gradle';\nexport const urls = [\n  'https://docs.gradle.org/current/userguide/single_versions.html#version_ordering',\n];\nexport const supportsRanges = true;\nexport const supportedRangeStrategies = ['pin'];\n\nconst equals = (a: string, b: string): boolean => compare(a, b) === 0;\n\nconst getMajor = (version: string): number | null => {\n  if (isVersion(version)) {\n    const tokens = tokenize(version.replace(regEx(/^v/i), ''));\n    const majorToken = tokens?.[0];\n    if (majorToken && majorToken.type === TokenType.Number) {\n      return +majorToken.val;\n    }\n  }\n  return null;\n};\n\nconst getMinor = (version: string): number | null => {\n  if (isVersion(version)) {\n    const tokens = tokenize(version.replace(regEx(/^v/i), ''));\n    const majorToken = tokens[0];\n    const minorToken = tokens[1];\n    if (\n      majorToken &&\n      majorToken.type === TokenType.Number &&\n      minorToken &&\n      minorToken.type === TokenType.Number\n    ) {\n      return +minorToken.val;\n    }\n    return 0;\n  }\n  return null;\n};\n\nconst getPatch = (version: string): number | null => {\n  if (isVersion(version)) {\n    const tokens = tokenize(version.replace(regEx(/^v/i), ''));\n    const majorToken = tokens[0];\n    const minorToken = tokens[1];\n    const patchToken = tokens[2];\n    if (\n      majorToken &&\n      majorToken.type === TokenType.Number &&\n      minorToken &&\n      minorToken.type === TokenType.Number &&\n      patchToken &&\n      patchToken.type === TokenType.Number\n    ) {\n      return +patchToken.val;\n    }\n    return 0;\n  }\n  return null;\n};\n\nconst isGreaterThan = (a: string, b: string): boolean => compare(a, b) === 1;\n\nconst unstable = new Set([\n  'a',\n  'alpha',\n  'b',\n  'beta',\n  'm',\n  'mt',\n  'milestone',\n  'rc',\n  'cr',\n  'preview',\n  'snapshot',\n]);\n\nconst isStable = (version: string): boolean | null => {\n  if (isVersion(version)) {\n    const tokens = tokenize(version);\n    for (const token of tokens) {\n      if (token.type === TokenType.String) {\n        const val = token.val.toString().toLowerCase();\n        if (unstable.has(val)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  return null;\n};\n\nconst matches = (a: string, b: string): boolean => {\n  if (!a || !isVersion(a) || !b) {\n    return false;\n  }\n  if (isVersion(b)) {\n    return equals(a, b);\n  }\n\n  const prefixRange = parsePrefixRange(b);\n  if (prefixRange) {\n    const tokens = prefixRange.tokens;\n    if (tokens.length === 0) {\n      return true;\n    }\n    const versionTokens = tokenize(a);\n    const x = versionTokens\n      .slice(0, tokens.length)\n      .map(({ val }) => val)\n      .join('.');\n    const y = tokens.map(({ val }) => val).join('.');\n    return equals(x, y);\n  }\n\n  const mavenBasedRange = parseMavenBasedRange(b);\n  if (!mavenBasedRange) {\n    return null;\n  }\n\n  const { leftBound, leftVal, rightBound, rightVal } = mavenBasedRange;\n  let leftResult = true;\n  let rightResult = true;\n\n  if (leftVal) {\n    leftResult =\n      leftBound === RangeBound.Exclusive\n        ? compare(leftVal, a) === -1\n        : compare(leftVal, a) !== 1;\n  }\n\n  if (rightVal) {\n    rightResult =\n      rightBound === RangeBound.Exclusive\n        ? compare(a, rightVal) === -1\n        : compare(a, rightVal) !== 1;\n  }\n\n  return leftResult && rightResult;\n};\n\nconst getSatisfyingVersion = (versions: string[], range: string): string =>\n  versions.reduce((result, version) => {\n    if (matches(version, range)) {\n      if (!result) {\n        return version;\n      }\n      if (isGreaterThan(version, result)) {\n        return version;\n      }\n    }\n    return result;\n  }, null);\n\nconst minSatisfyingVersion = (versions: string[], range: string): string =>\n  versions.reduce((result, version) => {\n    if (matches(version, range)) {\n      if (!result) {\n        return version;\n      }\n      if (compare(version, result) === -1) {\n        return version;\n      }\n    }\n    return result;\n  }, null);\n\nfunction getNewValue({\n  currentValue,\n  rangeStrategy,\n  newVersion,\n}: NewValueConfig): string | null {\n  if (isVersion(currentValue) || rangeStrategy === 'pin') {\n    return newVersion;\n  }\n  return null;\n}\n\nexport const api: VersioningApi = {\n  equals,\n  getMajor,\n  getMinor,\n  getPatch,\n  isCompatible: isVersion,\n  isGreaterThan,\n  isSingleVersion: isVersion,\n  isStable,\n  isValid,\n  isVersion,\n  matches,\n  getSatisfyingVersion,\n  minSatisfyingVersion,\n  getNewValue,\n  sortVersions: compare,\n};\n\nexport default api;\n"]}