{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/versioning/hashicorp/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { regEx } from '../../util/regex';\nimport { api as npm } from '../npm';\nimport type { NewValueConfig, VersioningApi } from '../types';\n\nexport const id = 'hashicorp';\nexport const displayName = 'Hashicorp';\nexport const urls = [\n  'https://www.terraform.io/docs/configuration/terraform.html#specifying-a-required-terraform-version',\n];\nexport const supportsRanges = true;\nexport const supportedRangeStrategies = ['bump', 'extend', 'pin', 'replace'];\n\nfunction hashicorp2npm(input: string): string {\n  // The only case incompatible with semver is a \"short\" ~>, e.g. ~> 1.2\n  return input.replace(regEx(/~>(\\s*\\d+\\.\\d+$)/), '^$1').replace(',', '');\n}\n\nconst isLessThanRange = (version: string, range: string): boolean =>\n  npm.isLessThanRange(hashicorp2npm(version), hashicorp2npm(range));\n\nexport const isValid = (input: string): string | boolean =>\n  input && npm.isValid(hashicorp2npm(input));\n\nconst matches = (version: string, range: string): boolean =>\n  npm.matches(hashicorp2npm(version), hashicorp2npm(range));\n\nconst getSatisfyingVersion = (versions: string[], range: string): string =>\n  npm.getSatisfyingVersion(versions.map(hashicorp2npm), hashicorp2npm(range));\n\nconst minSatisfyingVersion = (versions: string[], range: string): string =>\n  npm.minSatisfyingVersion(versions.map(hashicorp2npm), hashicorp2npm(range));\n\nfunction getNewValue({\n  currentValue,\n  rangeStrategy,\n  currentVersion,\n  newVersion,\n}: NewValueConfig): string {\n  if (['replace', 'update-lockfile'].includes(rangeStrategy)) {\n    if (\n      regEx(/~>\\s*0\\.\\d+/).test(currentValue) &&\n      npm.getMajor(newVersion) === 0\n    ) {\n      const testFullVersion = regEx(/(~>\\s*0\\.)(\\d+)\\.\\d$/);\n      let replaceValue = '';\n      if (testFullVersion.test(currentValue)) {\n        replaceValue = `$<prefix>${npm.getMinor(newVersion)}.0`;\n      } else {\n        replaceValue = `$<prefix>${npm.getMinor(newVersion)}$<suffix>`;\n      }\n      return currentValue.replace(\n        regEx(`(?<prefix>~>\\\\s*0\\\\.)\\\\d+(?<suffix>.*)$`), // TODO #12071\n        replaceValue\n      );\n    }\n    // handle special ~> 1.2 case\n    if (regEx(/(~>\\s*)\\d+\\.\\d+$/).test(currentValue)) {\n      return currentValue.replace(\n        regEx(`(?<prefix>~>\\\\s*)\\\\d+\\\\.\\\\d+$`), // TODO #12071\n        `$<prefix>${npm.getMajor(newVersion)}.0`\n      );\n    }\n  }\n  return npm.getNewValue({\n    currentValue,\n    rangeStrategy,\n    currentVersion,\n    newVersion,\n  });\n}\n\nexport const api: VersioningApi = {\n  ...npm,\n  isLessThanRange,\n  isValid,\n  matches,\n  getSatisfyingVersion,\n  minSatisfyingVersion,\n  getNewValue,\n};\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nexport const { isVersion } = api;\n\nexport default api;\n"]}