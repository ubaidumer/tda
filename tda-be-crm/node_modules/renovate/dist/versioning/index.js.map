{"version":3,"file":"index.js","sourceRoot":"","sources":["../../lib/versioning/index.ts"],"names":[],"mappings":";;;;AAAA,sCAAmC;AACnC,6DAAgC;AAChC,qCAAsD;AAGtD,uDAAwB;AAEjB,MAAM,iBAAiB,GAAG,GAAa,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,aAAW,CAAC,IAAI,EAAE,CAAC,CAAC;AAAnE,QAAA,iBAAiB,qBAAkD;AAChF;;GAEG;AACI,MAAM,cAAc,GAAG,GAG5B,EAAE,CAAC,aAAW,CAAC;AAHJ,QAAA,cAAc,kBAGV;AAEjB,SAAgB,GAAG,CAAC,UAAkB;IACpC,IAAI,CAAC,UAAU,EAAE;QACf,eAAM,CAAC,KAAK,CAAC,+CAA+C,CAAC,CAAC;QAC9D,OAAO,aAAW,CAAC,GAAG,CAAC,QAAQ,CAAkB,CAAC;KACnD;IACD,IAAI,cAAsB,CAAC;IAC3B,IAAI,gBAAwB,CAAC;IAE7B,IAAI,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC5B,MAAM,YAAY,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC3C,cAAc,GAAG,YAAY,CAAC,KAAK,EAAE,CAAC;QACtC,gBAAgB,GAAG,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC3C;SAAM;QACL,cAAc,GAAG,UAAU,CAAC;KAC7B;IACD,MAAM,aAAa,GAAG,aAAW,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IACtD,IAAI,CAAC,aAAa,EAAE;QAClB,eAAM,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,EAAE,2CAA2C,CAAC,CAAC;QACzE,OAAO,aAAW,CAAC,GAAG,CAAC,QAAQ,CAAkB,CAAC;KACnD;IACD,IAAI,IAAA,mCAA0B,EAAC,aAAa,CAAC,EAAE;QAC7C,OAAO,IAAI,aAAa,CAAC,gBAAgB,CAAC,CAAC;KAC5C;IACD,OAAO,aAAa,CAAC;AACvB,CAAC;AAxBD,kBAwBC","sourcesContent":["import { logger } from '../logger';\nimport versionings from './api';\nimport { isVersioningApiConstructor } from './common';\nimport type { VersioningApi, VersioningApiConstructor } from './types';\n\nexport * from './types';\n\nexport const getVersioningList = (): string[] => Array.from(versionings.keys());\n/**\n * Get versioning map. Can be used to dynamically add new versioning type\n */\nexport const getVersionings = (): Map<\n  string,\n  VersioningApi | VersioningApiConstructor\n> => versionings;\n\nexport function get(versioning: string): VersioningApi {\n  if (!versioning) {\n    logger.trace('Missing versioning, using semver as fallback.');\n    return versionings.get('semver') as VersioningApi;\n  }\n  let versioningName: string;\n  let versioningConfig: string;\n\n  if (versioning.includes(':')) {\n    const versionSplit = versioning.split(':');\n    versioningName = versionSplit.shift();\n    versioningConfig = versionSplit.join(':');\n  } else {\n    versioningName = versioning;\n  }\n  const theVersioning = versionings.get(versioningName);\n  if (!theVersioning) {\n    logger.info({ versioning }, 'Unknown versioning - defaulting to semver');\n    return versionings.get('semver') as VersioningApi;\n  }\n  if (isVersioningApiConstructor(theVersioning)) {\n    return new theVersioning(versioningConfig);\n  }\n  return theVersioning;\n}\n"]}