"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.api = exports.getSatisfyingVersion = exports.isValid = exports.isVersion = exports.supportsRanges = exports.urls = exports.displayName = exports.id = void 0;
const tslib_1 = require("tslib");
const semver_1 = (0, tslib_1.__importDefault)(require("semver"));
const semver_stable_1 = (0, tslib_1.__importDefault)(require("semver-stable"));
const regex_1 = require("../../util/regex");
exports.id = 'semver-coerced';
exports.displayName = 'Coerced Semantic Versioning';
exports.urls = ['https://semver.org/'];
exports.supportsRanges = false;
const { is: isStable } = semver_stable_1.default;
function sortVersions(a, b) {
    return semver_1.default.compare(semver_1.default.coerce(a), semver_1.default.coerce(b));
}
function getMajor(a) {
    return semver_1.default.major(semver_1.default.coerce(a));
}
function getMinor(a) {
    return semver_1.default.minor(semver_1.default.coerce(a));
}
function getPatch(a) {
    return semver_1.default.patch(a);
}
function matches(version, range) {
    return semver_1.default.satisfies(semver_1.default.coerce(version), range);
}
function equals(a, b) {
    return semver_1.default.eq(semver_1.default.coerce(a), semver_1.default.coerce(b));
}
function isValid(version) {
    return semver_1.default.valid(semver_1.default.coerce(version));
}
function getSatisfyingVersion(versions, range) {
    const coercedVersions = versions.map((version) => {
        const coercedVersion = semver_1.default.coerce(version);
        return coercedVersion ? coercedVersion.version : null;
    });
    return semver_1.default.maxSatisfying(coercedVersions, range);
}
exports.getSatisfyingVersion = getSatisfyingVersion;
function minSatisfyingVersion(versions, range) {
    const coercedVersions = versions.map((version) => {
        const coercedVersion = semver_1.default.coerce(version);
        return coercedVersion ? coercedVersion.version : null;
    });
    return semver_1.default.minSatisfying(coercedVersions, range);
}
function isLessThanRange(version, range) {
    return semver_1.default.ltr(semver_1.default.coerce(version), range);
}
function isGreaterThan(version, other) {
    return semver_1.default.gt(semver_1.default.coerce(version), semver_1.default.coerce(other));
}
const startsWithNumberRegex = (0, regex_1.regEx)(`^\\d`);
function isSingleVersion(version) {
    // Since coercion accepts ranges as well as versions, we have to manually
    // check that the version string starts with either 'v' or a digit.
    if (!version.startsWith('v') && !startsWithNumberRegex.exec(version)) {
        return null;
    }
    return semver_1.default.valid(semver_1.default.coerce(version));
}
// If this is left as an alias, inputs like "17.04.0" throw errors
const isVersion = (input) => isValid(input);
exports.isVersion = isVersion;
exports.isValid = exports.isVersion;
function getNewValue({ newVersion }) {
    return newVersion;
}
exports.api = {
    equals,
    getMajor,
    getMinor,
    getPatch,
    isCompatible: exports.isVersion,
    isGreaterThan,
    isLessThanRange,
    isSingleVersion,
    isStable,
    isValid,
    isVersion: exports.isVersion,
    matches,
    getSatisfyingVersion,
    minSatisfyingVersion,
    getNewValue,
    sortVersions,
};
exports.default = exports.api;
//# sourceMappingURL=index.js.map