{"version":3,"file":"npmrc.js","sourceRoot":"","sources":["../../../lib/datasource/npm/npmrc.ts"],"names":[],"mappings":"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","sourcesContent":["import url from 'url';\nimport is from '@sindresorhus/is';\nimport ini from 'ini';\nimport registryAuthToken from 'registry-auth-token';\nimport getRegistryUrl from 'registry-auth-token/registry-url';\nimport { GlobalConfig } from '../../config/global';\nimport { logger } from '../../logger';\nimport type { OutgoingHttpHeaders } from '../../util/http/types';\nimport { maskToken } from '../../util/mask';\nimport { regEx } from '../../util/regex';\nimport { add } from '../../util/sanitize';\nimport type { Npmrc, PackageResolution } from './types';\n\nlet npmrc: Record<string, any> = {};\nlet npmrcRaw = '';\n\nexport function getNpmrc(): Npmrc | null {\n  return npmrc;\n}\n\nfunction envReplace(value: any, env = process.env): any {\n  // istanbul ignore if\n  if (!is.string(value)) {\n    return value;\n  }\n\n  const ENV_EXPR = regEx(/(\\\\*)\\$\\{([^}]+)\\}/g);\n\n  return value.replace(ENV_EXPR, (match, esc, envVarName) => {\n    if (env[envVarName] === undefined) {\n      logger.warn('Failed to replace env in config: ' + match);\n      throw new Error('env-replace');\n    }\n    return env[envVarName];\n  });\n}\n\nconst envRe = regEx(/(\\\\*)\\$\\{([^}]+)\\}/);\n// TODO: better add to host rules (#9588)\nfunction sanitize(key: string, val: string): void {\n  if (!val || envRe.test(val)) {\n    return;\n  }\n  if (key.endsWith('_authToken') || key.endsWith('_auth')) {\n    add(val);\n  } else if (key.endsWith(':_password')) {\n    add(val);\n    const password = Buffer.from(val, 'base64').toString();\n    add(password);\n    const username: string = npmrc[key.replace(':_password', ':username')];\n    add(Buffer.from(`${username}:${password}`).toString('base64'));\n  }\n}\n\nexport function setNpmrc(input?: string): void {\n  if (input) {\n    if (input === npmrcRaw) {\n      return;\n    }\n    const existingNpmrc = npmrc;\n    npmrcRaw = input;\n    logger.debug('Setting npmrc');\n    npmrc = ini.parse(input.replace(regEx(/\\\\n/g), '\\n'));\n    const { exposeAllEnv } = GlobalConfig.get();\n    for (const [key, val] of Object.entries(npmrc)) {\n      if (!exposeAllEnv) {\n        sanitize(key, val);\n      }\n      if (\n        !exposeAllEnv &&\n        key.endsWith('registry') &&\n        val &&\n        val.includes('localhost')\n      ) {\n        logger.debug(\n          { key, val },\n          'Detected localhost registry - rejecting npmrc file'\n        );\n        npmrc = existingNpmrc;\n        return;\n      }\n    }\n    if (!exposeAllEnv) {\n      return;\n    }\n    for (const key of Object.keys(npmrc)) {\n      npmrc[key] = envReplace(npmrc[key]);\n      sanitize(key, npmrc[key]);\n    }\n  } else if (npmrc) {\n    logger.debug('Resetting npmrc');\n    npmrc = {};\n    npmrcRaw = '';\n  }\n}\n\nexport function resolvePackage(packageName: string): PackageResolution {\n  const scope = packageName.split('/')[0];\n  let registryUrl: string;\n  try {\n    registryUrl = getRegistryUrl(scope, getNpmrc());\n  } catch (err) {\n    registryUrl = 'https://registry.npmjs.org/';\n  }\n  const packageUrl = url.resolve(\n    registryUrl,\n    encodeURIComponent(packageName).replace(regEx(/^%40/), '@')\n  );\n  const headers: OutgoingHttpHeaders = {};\n  let authInfo = registryAuthToken(registryUrl, { npmrc, recursive: true });\n  if (\n    !authInfo &&\n    npmrc &&\n    npmrc._authToken &&\n    registryUrl.replace(/\\/?$/, '/') === npmrc.registry?.replace(/\\/?$/, '/') // TODO #12070\n  ) {\n    authInfo = { type: 'Bearer', token: npmrc._authToken };\n  }\n\n  if (authInfo?.type && authInfo.token) {\n    headers.authorization = `${authInfo.type} ${authInfo.token}`;\n    logger.trace(\n      { token: maskToken(authInfo.token), npmName: packageName },\n      'Using auth (via npmrc) for npm lookup'\n    );\n  }\n  return { headers, packageUrl, registryUrl };\n}\n"]}