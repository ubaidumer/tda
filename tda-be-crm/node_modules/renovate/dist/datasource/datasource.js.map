{"version":3,"file":"datasource.js","sourceRoot":"","sources":["../../lib/datasource/datasource.ts"],"names":[],"mappings":";;;AAAA,6EAAwE;AACxE,uCAAoC;AASpC,MAAsB,UAAU;IAC9B,YAAsC,EAAU;QAAV,OAAE,GAAF,EAAE,CAAQ;QAMhD,0BAAqB,GAAG,IAAI,CAAC;QAQ7B,qBAAgB,GAA2C,OAAO,CAAC;QAbjE,IAAI,CAAC,IAAI,GAAG,IAAI,WAAI,CAAC,EAAE,CAAC,CAAC;IAC3B,CAAC;IAsBD,gEAAgE;IAChE,oBAAoB,CAAC,GAAc,IAAS,CAAC;IAEnC,mBAAmB,CAAC,GAAc;;QAC1C,kDAAkD;QAClD,IAAI,GAAG,YAAY,uCAAiB,EAAE;YACpC,MAAM,GAAG,CAAC;SACX;QACD,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAA,MAAA,GAAG,CAAC,QAAQ,0CAAE,UAAU,MAAK,SAAS,EAAE;YAC1C,IACE,CAAA,MAAA,GAAG,CAAC,QAAQ,0CAAE,UAAU,MAAK,GAAG;gBAChC,CAAC,CAAA,MAAA,GAAG,CAAC,QAAQ,0CAAE,UAAU,KAAI,GAAG,IAAI,CAAA,MAAA,GAAG,CAAC,QAAQ,0CAAE,UAAU,IAAG,GAAG,CAAC,EACnE;gBACA,MAAM,IAAI,uCAAiB,CAAC,GAAG,CAAC,CAAC;aAClC;SACF;QACD,MAAM,GAAG,CAAC;IACZ,CAAC;CACF;AA5CD,gCA4CC","sourcesContent":["import { ExternalHostError } from '../types/errors/external-host-error';\nimport { Http } from '../util/http';\nimport type { HttpError } from '../util/http/types';\nimport type {\n  DatasourceApi,\n  DigestConfig,\n  GetReleasesConfig,\n  ReleaseResult,\n} from './types';\n\nexport abstract class Datasource implements DatasourceApi {\n  protected constructor(public readonly id: string) {\n    this.http = new Http(id);\n  }\n\n  caching: boolean | undefined;\n\n  customRegistrySupport = true;\n\n  defaultConfig: Record<string, unknown> | undefined;\n\n  defaultRegistryUrls: string[] | undefined;\n\n  defaultVersioning: string | undefined;\n\n  registryStrategy: 'first' | 'hunt' | 'merge' | undefined = 'first';\n\n  protected http: Http;\n\n  abstract getReleases(\n    getReleasesConfig: GetReleasesConfig\n  ): Promise<ReleaseResult | null>;\n\n  getDigest?(config: DigestConfig, newValue?: string): Promise<string>;\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  handleSpecificErrors(err: HttpError): void {}\n\n  protected handleGenericErrors(err: HttpError): never {\n    // istanbul ignore if: not easy testable with nock\n    if (err instanceof ExternalHostError) {\n      throw err;\n    }\n    this.handleSpecificErrors(err);\n    if (err.response?.statusCode !== undefined) {\n      if (\n        err.response?.statusCode === 429 ||\n        (err.response?.statusCode >= 500 && err.response?.statusCode < 600)\n      ) {\n        throw new ExternalHostError(err);\n      }\n    }\n    throw err;\n  }\n}\n"]}