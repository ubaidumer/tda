{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/terraform-module/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport { cache } from '../../util/cache/package/decorator';\nimport type { HttpError } from '../../util/http/types';\nimport { regEx } from '../../util/regex';\nimport * as hashicorpVersioning from '../../versioning/hashicorp';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport { TerraformDatasource } from './base';\nimport type { RegistryRepository, TerraformRelease } from './types';\n\nexport class TerraformModuleDatasource extends TerraformDatasource {\n  static override readonly id = 'terraform-module';\n\n  constructor() {\n    super(TerraformModuleDatasource.id);\n  }\n\n  override readonly defaultRegistryUrls = ['https://registry.terraform.io'];\n\n  override readonly defaultVersioning = hashicorpVersioning.id;\n\n  /**\n   * This function will fetch a package from the specified Terraform registry and return all semver versions.\n   *  - `sourceUrl` is supported of \"source\" field is set\n   *  - `homepage` is set to the Terraform registry's page if it's on the official main registry\n   */\n  @cache({\n    namespace: `datasource-${TerraformModuleDatasource.id}`,\n    key: (getReleasesConfig: GetReleasesConfig) =>\n      TerraformModuleDatasource.getCacheKey(getReleasesConfig),\n  })\n  async getReleases({\n    lookupName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const { registry, repository } =\n      TerraformModuleDatasource.getRegistryRepository(lookupName, registryUrl);\n    logger.trace(\n      { registry, terraformRepository: repository },\n      'terraform-module.getReleases()'\n    );\n\n    let res: TerraformRelease;\n    let pkgUrl: string;\n\n    try {\n      const serviceDiscovery = await this.getTerraformServiceDiscoveryResult(\n        registryUrl\n      );\n      pkgUrl = `${registry}${serviceDiscovery['modules.v1']}${repository}`;\n      res = (await this.http.getJson<TerraformRelease>(pkgUrl)).body;\n      const returnedName = res.namespace + '/' + res.name + '/' + res.provider;\n      if (returnedName !== repository) {\n        logger.warn({ pkgUrl }, 'Terraform registry result mismatch');\n        return null;\n      }\n    } catch (err) {\n      this.handleGenericErrors(err);\n    }\n\n    // Simplify response before caching and returning\n    const dep: ReleaseResult = {\n      releases: null,\n    };\n    if (res.source) {\n      dep.sourceUrl = res.source;\n    }\n    dep.releases = res.versions.map((version) => ({\n      version,\n    }));\n    if (pkgUrl.startsWith('https://registry.terraform.io/')) {\n      dep.homepage = `https://registry.terraform.io/modules/${repository}`;\n    }\n    // set published date for latest release\n    const latestVersion = dep.releases.find(\n      (release) => res.version === release.version\n    );\n    if (latestVersion) {\n      latestVersion.releaseTimestamp = res.published_at;\n    }\n\n    logger.trace({ dep }, 'dep');\n    return dep;\n  }\n\n  override handleSpecificErrors(err: HttpError): void {\n    const failureCodes = ['EAI_AGAIN'];\n    // istanbul ignore if\n    if (failureCodes.includes(err.code)) {\n      throw new ExternalHostError(err);\n    }\n  }\n\n  private static getRegistryRepository(\n    lookupName: string,\n    registryUrl: string\n  ): RegistryRepository {\n    let registry: string;\n    const split = lookupName.split('/');\n    if (split.length > 3 && split[0].includes('.')) {\n      [registry] = split;\n      split.shift();\n    } else {\n      registry = registryUrl;\n    }\n    if (!regEx(/^https?:\\/\\//).test(registry)) {\n      registry = `https://${registry}`;\n    }\n    const repository = split.join('/');\n    return {\n      registry,\n      repository,\n    };\n  }\n\n  private static getCacheKey({\n    lookupName,\n    registryUrl,\n  }: GetReleasesConfig): string {\n    const { registry, repository } =\n      TerraformModuleDatasource.getRegistryRepository(lookupName, registryUrl);\n    return `${registry}/${repository}`;\n  }\n}\n"]}