{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/packagist/index.ts"],"names":[],"mappings":"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","sourcesContent":["import URL from 'url';\nimport pAll from 'p-all';\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport * as memCache from '../../util/cache/memory';\nimport * as packageCache from '../../util/cache/package';\nimport * as hostRules from '../../util/host-rules';\nimport { Http, HttpOptions } from '../../util/http';\nimport { regEx } from '../../util/regex';\nimport * as composerVersioning from '../../versioning/composer';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport type {\n  AllPackages,\n  PackageMeta,\n  PackagistFile,\n  RegistryFile,\n  RegistryMeta,\n} from './types';\n\nexport const id = 'packagist';\nexport const customRegistrySupport = true;\nexport const defaultRegistryUrls = ['https://packagist.org'];\nexport const defaultVersioning = composerVersioning.id;\nexport const registryStrategy = 'hunt';\n\nconst http = new Http(id);\n\n// We calculate auth at this datasource layer so that we can know whether it's safe to cache or not\nfunction getHostOpts(url: string): HttpOptions {\n  let opts: HttpOptions = {};\n  const { username, password } = hostRules.find({\n    hostType: id,\n    url,\n  });\n  if (username && password) {\n    opts = { ...opts, username, password };\n  }\n  return opts;\n}\n\nasync function getRegistryMeta(regUrl: string): Promise<RegistryMeta | null> {\n  const url = URL.resolve(regUrl.replace(/\\/?$/, '/'), 'packages.json'); // TODO #12070\n  const opts = getHostOpts(url);\n  const res = (await http.getJson<PackageMeta>(url, opts)).body;\n  const meta: RegistryMeta = {\n    providerPackages: {},\n  };\n  meta.packages = res.packages;\n  if (res.includes) {\n    meta.includesFiles = [];\n    for (const [name, val] of Object.entries(res.includes)) {\n      const file = {\n        key: name.replace(val.sha256, '%hash%'),\n        sha256: val.sha256,\n      };\n      meta.includesFiles.push(file);\n    }\n  }\n  if (res['providers-url']) {\n    meta.providersUrl = res['providers-url'];\n  }\n  if (res['providers-lazy-url']) {\n    meta.providersLazyUrl = res['providers-lazy-url'];\n  }\n  if (res['provider-includes']) {\n    meta.files = [];\n    for (const [key, val] of Object.entries(res['provider-includes'])) {\n      const file = {\n        key,\n        sha256: val.sha256,\n      };\n      meta.files.push(file);\n    }\n  }\n  if (res.providers) {\n    for (const [key, val] of Object.entries(res.providers)) {\n      meta.providerPackages[key] = val.sha256;\n    }\n  }\n  return meta;\n}\n\nasync function getPackagistFile(\n  regUrl: string,\n  file: RegistryFile\n): Promise<PackagistFile> {\n  const { key, sha256 } = file;\n  const fileName = key.replace('%hash%', sha256);\n  const opts = getHostOpts(regUrl);\n  if (opts.password || opts.headers?.authorization) {\n    return (await http.getJson<PackagistFile>(regUrl + '/' + fileName, opts))\n      .body;\n  }\n  const cacheNamespace = 'datasource-packagist-files';\n  const cacheKey = regUrl + key;\n  // Check the persistent cache for public registries\n  const cachedResult = await packageCache.get(cacheNamespace, cacheKey);\n  // istanbul ignore if\n  if (cachedResult && cachedResult.sha256 === sha256) {\n    return cachedResult.res as Promise<PackagistFile>;\n  }\n  const res = (await http.getJson<PackagistFile>(regUrl + '/' + fileName, opts))\n    .body;\n  const cacheMinutes = 1440; // 1 day\n  await packageCache.set(\n    cacheNamespace,\n    cacheKey,\n    { res, sha256 },\n    cacheMinutes\n  );\n  return res;\n}\n\nfunction extractDepReleases(versions: RegistryFile): ReleaseResult {\n  const dep: ReleaseResult = { releases: null };\n  // istanbul ignore if\n  if (!versions) {\n    dep.releases = [];\n    return dep;\n  }\n  dep.releases = Object.keys(versions).map((version) => {\n    const release = versions[version];\n    dep.homepage = release.homepage || dep.homepage;\n    if (release.source?.url) {\n      dep.sourceUrl = release.source.url;\n    }\n    return {\n      version: version.replace(regEx(/^v/), ''),\n      gitRef: version,\n      releaseTimestamp: release.time,\n    };\n  });\n  return dep;\n}\n\nasync function getAllPackages(regUrl: string): Promise<AllPackages | null> {\n  const registryMeta = await getRegistryMeta(regUrl);\n  const {\n    packages,\n    providersUrl,\n    providersLazyUrl,\n    files,\n    includesFiles,\n    providerPackages,\n  } = registryMeta;\n  if (files) {\n    const queue = files.map(\n      (file) => (): Promise<PackagistFile> => getPackagistFile(regUrl, file)\n    );\n    const resolvedFiles = await pAll(queue, { concurrency: 5 });\n    for (const res of resolvedFiles) {\n      for (const [name, val] of Object.entries(res.providers)) {\n        providerPackages[name] = val.sha256;\n      }\n    }\n  }\n  const includesPackages: Record<string, ReleaseResult> = {};\n  if (includesFiles) {\n    for (const file of includesFiles) {\n      const res = await getPackagistFile(regUrl, file);\n      if (res.packages) {\n        for (const [key, val] of Object.entries(res.packages)) {\n          const dep = extractDepReleases(val);\n          includesPackages[key] = dep;\n        }\n      }\n    }\n  }\n  const allPackages: AllPackages = {\n    packages,\n    providersUrl,\n    providersLazyUrl,\n    providerPackages,\n    includesPackages,\n  };\n  return allPackages;\n}\n\nfunction getAllCachedPackages(regUrl: string): Promise<AllPackages | null> {\n  const cacheKey = `packagist-${regUrl}`;\n  const cachedResult = memCache.get<Promise<AllPackages | null>>(cacheKey);\n  // istanbul ignore if\n  if (cachedResult !== undefined) {\n    return cachedResult;\n  }\n  const promisedRes = getAllPackages(regUrl);\n  memCache.set(cacheKey, promisedRes);\n  return promisedRes;\n}\n\nasync function packagistOrgLookup(name: string): Promise<ReleaseResult> {\n  const cacheNamespace = 'datasource-packagist-org';\n  const cachedResult = await packageCache.get<ReleaseResult>(\n    cacheNamespace,\n    name\n  );\n  // istanbul ignore if\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let dep: ReleaseResult = null;\n  const regUrl = 'https://packagist.org';\n  const pkgUrl = URL.resolve(regUrl, `/p/${name}.json`);\n  // TODO: fix types (#9610)\n  const res = (await http.getJson<any>(pkgUrl)).body.packages[name];\n  if (res) {\n    dep = extractDepReleases(res);\n    logger.trace({ dep }, 'dep');\n  }\n  const cacheMinutes = 10;\n  await packageCache.set(cacheNamespace, name, dep, cacheMinutes);\n  return dep;\n}\n\nasync function packageLookup(\n  regUrl: string,\n  name: string\n): Promise<ReleaseResult | null> {\n  try {\n    if (regUrl === 'https://packagist.org') {\n      const packagistResult = await packagistOrgLookup(name);\n      return packagistResult;\n    }\n    const allPackages = await getAllCachedPackages(regUrl);\n    const {\n      packages,\n      providersUrl,\n      providersLazyUrl,\n      providerPackages,\n      includesPackages,\n    } = allPackages;\n    if (packages?.[name]) {\n      const dep = extractDepReleases(packages[name]);\n      return dep;\n    }\n    if (includesPackages?.[name]) {\n      return includesPackages[name];\n    }\n    let pkgUrl;\n    if (providerPackages?.[name]) {\n      pkgUrl = URL.resolve(\n        regUrl,\n        providersUrl\n          .replace('%package%', name)\n          .replace('%hash%', providerPackages[name])\n      );\n    } else if (providersLazyUrl) {\n      pkgUrl = URL.resolve(regUrl, providersLazyUrl.replace('%package%', name));\n    } else {\n      return null;\n    }\n    const opts = getHostOpts(regUrl);\n    // TODO: fix types (#9610)\n    const versions = (await http.getJson<any>(pkgUrl, opts)).body.packages[\n      name\n    ];\n    const dep = extractDepReleases(versions);\n    logger.trace({ dep }, 'dep');\n    return dep;\n  } catch (err) /* istanbul ignore next */ {\n    if (err.host === 'packagist.org') {\n      if (err.code === 'ECONNRESET' || err.code === 'ETIMEDOUT') {\n        throw new ExternalHostError(err);\n      }\n      if (err.statusCode && err.statusCode >= 500 && err.statusCode < 600) {\n        throw new ExternalHostError(err);\n      }\n    }\n    throw err;\n  }\n}\n\nexport function getReleases({\n  lookupName,\n  registryUrl,\n}: GetReleasesConfig): Promise<ReleaseResult> {\n  logger.trace(`getReleases(${lookupName})`);\n  return packageLookup(registryUrl, lookupName);\n}\n"]}