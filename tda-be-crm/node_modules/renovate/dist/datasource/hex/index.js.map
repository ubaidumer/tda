{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/hex/index.ts"],"names":[],"mappings":";;;;AAAA,yCAAsC;AACtC,kEAA2D;AAE3D,iFAAsD;AACtD,8CAA2C;AAI3C,MAAa,aAAc,SAAQ,uBAAU;IAG3C;QACE,KAAK,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;QAGR,wBAAmB,GAAG,CAAC,iBAAiB,CAAC,CAAC;QAE1C,0BAAqB,GAAG,KAAK,CAAC;QAE9B,sBAAiB,GAAG,aAAa,CAAC,EAAE,CAAC;IANvD,CAAC;IAYD,KAAK,CAAC,WAAW,CAAC,EAChB,UAAU,EACV,WAAW,GACO;;QAClB,uCAAuC;QACvC,mFAAmF;QACnF,kCAAkC;QAClC,mDAAmD;QACnD,yDAAyD;QACzD,MAAM,CAAC,cAAc,EAAE,gBAAgB,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACjE,MAAM,qBAAqB,GAAG,gBAAgB;YAC5C,CAAC,CAAC,SAAS,gBAAgB,GAAG;YAC9B,CAAC,CAAC,EAAE,CAAC;QACP,MAAM,MAAM,GAAG,GAAG,WAAW,OAAO,qBAAqB,YAAY,cAAc,EAAE,CAAC;QAEtF,IAAI,QAAkC,CAAC;QACvC,IAAI;YACF,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAa,MAAM,CAAC,CAAC;SACxD;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;SAC/B;QAED,MAAM,UAAU,GAAe,QAAQ,CAAC,IAAI,CAAC;QAE7C,IAAI,CAAC,UAAU,EAAE;YACf,eAAM,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,UAAU,EAAE,EAAE,uBAAuB,CAAC,CAAC;YACxE,OAAO,IAAI,CAAC;SACb;QAED,MAAM,EAAE,QAAQ,GAAG,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,UAAU,CAAC;QAE/D,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YACzB,eAAM,CAAC,KAAK,CAAC,yBAAyB,cAAc,KAAK,MAAM,GAAG,CAAC,CAAC,CAAC,kBAAkB;YACvF,OAAO,IAAI,CAAC;SACb;QAED,MAAM,MAAM,GAAkB;YAC5B,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,EAAE,EAAE,CAClD,WAAW;gBACT,CAAC,CAAC;oBACE,OAAO;oBACP,gBAAgB,EAAE,WAAW;iBAC9B;gBACH,CAAC,CAAC,EAAE,OAAO,EAAE,CAChB;SACF,CAAC;QAEF,IAAI,QAAQ,EAAE;YACZ,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC5B;QAED,IAAI,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK,0CAAE,MAAM,EAAE;YACvB,MAAM,CAAC,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;SACjD;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;;AAxEe,gBAAE,GAAG,KAAK,CAAC;AAgB3B;IAJC,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,aAAa,CAAC,EAAE,EAAE;QAC3C,GAAG,EAAE,CAAC,EAAE,UAAU,EAAqB,EAAE,EAAE,CAAC,UAAU;KACvD,CAAC;gDAyDD;AAzEH,sCA0EC","sourcesContent":["import { logger } from '../../logger';\nimport { cache } from '../../util/cache/package/decorator';\nimport type { HttpResponse } from '../../util/http';\nimport * as hexVersioning from '../../versioning/hex';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport type { HexRelease } from './types';\n\nexport class HexDatasource extends Datasource {\n  static readonly id = 'hex';\n\n  constructor() {\n    super(HexDatasource.id);\n  }\n\n  override readonly defaultRegistryUrls = ['https://hex.pm/'];\n\n  override readonly customRegistrySupport = false;\n\n  override readonly defaultVersioning = hexVersioning.id;\n\n  @cache({\n    namespace: `datasource-${HexDatasource.id}`,\n    key: ({ lookupName }: GetReleasesConfig) => lookupName,\n  })\n  async getReleases({\n    lookupName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    // Get dependency name from lookupName.\n    // If the dependency is private lookupName contains organization name as following:\n    // hexPackageName:organizationName\n    // hexPackageName is used to pass it in hex dep url\n    // organizationName is used for accessing to private deps\n    const [hexPackageName, organizationName] = lookupName.split(':');\n    const organizationUrlPrefix = organizationName\n      ? `repos/${organizationName}/`\n      : '';\n    const hexUrl = `${registryUrl}api/${organizationUrlPrefix}packages/${hexPackageName}`;\n\n    let response: HttpResponse<HexRelease>;\n    try {\n      response = await this.http.getJson<HexRelease>(hexUrl);\n    } catch (err) {\n      this.handleGenericErrors(err);\n    }\n\n    const hexRelease: HexRelease = response.body;\n\n    if (!hexRelease) {\n      logger.warn({ datasource: 'hex', lookupName }, `Invalid response body`);\n      return null;\n    }\n\n    const { releases = [], html_url: homepage, meta } = hexRelease;\n\n    if (releases.length === 0) {\n      logger.debug(`No versions found for ${hexPackageName} (${hexUrl})`); // prettier-ignore\n      return null;\n    }\n\n    const result: ReleaseResult = {\n      releases: releases.map(({ version, inserted_at }) =>\n        inserted_at\n          ? {\n              version,\n              releaseTimestamp: inserted_at,\n            }\n          : { version }\n      ),\n    };\n\n    if (homepage) {\n      result.homepage = homepage;\n    }\n\n    if (meta?.links?.Github) {\n      result.sourceUrl = hexRelease.meta.links.Github;\n    }\n\n    return result;\n  }\n}\n"]}