{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../lib/datasource/github-releases/common.ts"],"names":[],"mappings":";;;AAAA,mDAAoD;AACpD,wCAAqD;AAGrD,MAAM,oBAAoB,GAAG,qBAAqB,CAAC;AACtC,QAAA,EAAE,GAAG,iBAAiB,CAAC;AAEvB,QAAA,cAAc,GAAG,4BAA4B,CAAC;AAC9C,QAAA,IAAI,GAAG,IAAI,mBAAU,CAAC,UAAE,CAAC,CAAC;AAEvC,SAAgB,gBAAgB,CAAC,WAAmB;IAClD,qDAAqD;IACrD,OAAO,IAAA,yBAAmB,EAAC,WAAW,aAAX,WAAW,cAAX,WAAW,GAAI,oBAAoB,CAAC,CAAC;AAClE,CAAC;AAHD,4CAGC;AAED,SAAgB,aAAa,CAAC,WAAmB;IAC/C,MAAM,aAAa,GAAG,gBAAgB,CAAC,WAAW,CAAC,CAAC;IACpD,OAAO,aAAa,KAAK,oBAAoB;QAC3C,CAAC,CAAC,yBAAyB;QAC3B,CAAC,CAAC,GAAG,aAAa,SAAS,CAAC;AAChC,CAAC;AALD,sCAKC;AAED,SAAgB,YAAY,CAAC,UAAkB,EAAE,WAAoB;IACnE,MAAM,aAAa,GAAG,gBAAgB,CAAC,WAAW,CAAC,CAAC;IACpD,OAAO,GAAG,aAAa,GAAG,UAAU,EAAE,CAAC;AACzC,CAAC;AAHD,oCAGC;AAEM,KAAK,UAAU,gBAAgB,CACpC,UAAkB,EAClB,IAAY,EACZ,OAAe;IAEf,MAAM,GAAG,GAAG,GAAG,UAAU,SAAS,IAAI,kBAAkB,OAAO,EAAE,CAAC;IAClE,MAAM,GAAG,GAAG,MAAM,YAAI,CAAC,OAAO,CAAgB,GAAG,CAAC,CAAC;IACnD,OAAO,GAAG,CAAC,IAAI,CAAC;AAClB,CAAC;AARD,4CAQC","sourcesContent":["import { GithubHttp } from '../../util/http/github';\nimport { ensureTrailingSlash } from '../../util/url';\nimport type { GithubRelease } from './types';\n\nconst defaultSourceUrlBase = 'https://github.com/';\nexport const id = 'github-releases';\n\nexport const cacheNamespace = 'datasource-github-releases';\nexport const http = new GithubHttp(id);\n\nexport function getSourceUrlBase(registryUrl: string): string {\n  // default to GitHub.com if no GHE host is specified.\n  return ensureTrailingSlash(registryUrl ?? defaultSourceUrlBase);\n}\n\nexport function getApiBaseUrl(registryUrl: string): string {\n  const sourceUrlBase = getSourceUrlBase(registryUrl);\n  return sourceUrlBase === defaultSourceUrlBase\n    ? `https://api.github.com/`\n    : `${sourceUrlBase}api/v3/`;\n}\n\nexport function getSourceUrl(lookupName: string, registryUrl?: string): string {\n  const sourceUrlBase = getSourceUrlBase(registryUrl);\n  return `${sourceUrlBase}${lookupName}`;\n}\n\nexport async function getGithubRelease(\n  apiBaseUrl: string,\n  repo: string,\n  version: string\n): Promise<GithubRelease> {\n  const url = `${apiBaseUrl}repos/${repo}/releases/tags/${version}`;\n  const res = await http.getJson<GithubRelease>(url);\n  return res.body;\n}\n"]}