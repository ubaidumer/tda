import type { DigestConfig, GetReleasesConfig, ReleaseResult } from '../types';
import { id } from './common';
export { id };
export declare const customRegistrySupport = true;
export declare const defaultRegistryUrls: string[];
export declare const registryStrategy = "first";
/**
 * github.getReleases
 *
 * This function can be used to fetch releases with a customisable versioning (e.g. semver) and with releases.
 *
 * This function will:
 *  - Fetch all releases
 *  - Sanitize the versions if desired (e.g. strip out leading 'v')
 *  - Return a dependency object containing sourceUrl string and releases array
 */
export declare function getReleases({ lookupName: repo, registryUrl, }: GetReleasesConfig): Promise<ReleaseResult | null>;
/**
 * github.getDigest
 *
 * The `newValue` supplied here should be a valid tag for the GitHub release.
 * Requires `currentValue` and `currentDigest`.
 *
 * There may be many assets attached to the release. This function will:
 *  - Identify the asset pinned by `currentDigest` in the `currentValue` release
 *     - Download small release assets, parse as checksum manifests (e.g. `SHASUMS.txt`).
 *     - Download individual assets until `currentDigest` is encountered. This is limited to sha256 and sha512.
 *  - Map the hashed asset to `newValue` and return the updated digest as a string
 */
export declare function getDigest({ lookupName: repo, currentValue, currentDigest, registryUrl }: DigestConfig, newValue?: string): Promise<string | null>;
