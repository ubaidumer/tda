{"version":3,"file":"digest.js","sourceRoot":"","sources":["../../../lib/datasource/github-releases/digest.ts"],"names":[],"mappings":"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","sourcesContent":["import hasha from 'hasha';\nimport * as packageCache from '../../util/cache/package';\nimport { regEx } from '../../util/regex';\nimport { cacheNamespace, http } from './common';\nimport type { DigestAsset, GithubRelease, GithubReleaseAsset } from './types';\n\nasync function findDigestFile(\n  release: GithubRelease,\n  digest: string\n): Promise<DigestAsset | null> {\n  const smallAssets = release.assets.filter(\n    (a: GithubReleaseAsset) => a.size < 5 * 1024\n  );\n  for (const asset of smallAssets) {\n    const res = await http.get(asset.browser_download_url);\n    for (const line of res.body.split('\\n')) {\n      const [lineDigest, lineFn] = line.split(regEx(/\\s+/), 2); // TODO #12071\n      if (lineDigest === digest) {\n        return {\n          assetName: asset.name,\n          digestedFileName: lineFn,\n          currentVersion: release.tag_name,\n          currentDigest: lineDigest,\n        };\n      }\n    }\n  }\n  return null;\n}\n\nfunction inferHashAlg(digest: string): string {\n  switch (digest.length) {\n    case 64:\n      return 'sha256';\n    default:\n    case 96:\n      return 'sha512';\n  }\n}\n\nfunction getAssetDigestCacheKey(\n  downloadUrl: string,\n  algorithm: string\n): string {\n  const type = 'assetDigest';\n  return `${downloadUrl}:${algorithm}:${type}`;\n}\n\nasync function downloadAndDigest(\n  asset: GithubReleaseAsset,\n  algorithm: string\n): Promise<string> {\n  const downloadUrl = asset.browser_download_url;\n  const cacheKey = getAssetDigestCacheKey(downloadUrl, algorithm);\n  const cachedResult = await packageCache.get<string>(cacheNamespace, cacheKey);\n  // istanbul ignore if\n  if (cachedResult) {\n    return cachedResult;\n  }\n\n  const res = http.stream(downloadUrl);\n  const digest = await hasha.fromStream(res, { algorithm });\n\n  const cacheMinutes = 1440;\n  await packageCache.set(cacheNamespace, cacheKey, digest, cacheMinutes);\n  return digest;\n}\n\nasync function findAssetWithDigest(\n  release: GithubRelease,\n  digest: string\n): Promise<DigestAsset | null> {\n  const algorithm = inferHashAlg(digest);\n  const assetsBySize = release.assets.sort(\n    (a: GithubReleaseAsset, b: GithubReleaseAsset) => {\n      if (a.size < b.size) {\n        return -1;\n      }\n      if (a.size > b.size) {\n        return 1;\n      }\n      return 0;\n    }\n  );\n\n  for (const asset of assetsBySize) {\n    const assetDigest = await downloadAndDigest(asset, algorithm);\n    if (assetDigest === digest) {\n      return {\n        assetName: asset.name,\n        currentVersion: release.tag_name,\n        currentDigest: assetDigest,\n      };\n    }\n  }\n  return null;\n}\n\n/** Identify the asset associated with a known digest. */\nexport async function findDigestAsset(\n  release: GithubRelease,\n  digest: string\n): Promise<DigestAsset> {\n  const digestFile = await findDigestFile(release, digest);\n  if (digestFile) {\n    return digestFile;\n  }\n\n  const asset = await findAssetWithDigest(release, digest);\n  return asset;\n}\n\n/** Given a digest asset, find the equivalent digest in a different release. */\nexport async function mapDigestAssetToRelease(\n  digestAsset: DigestAsset,\n  release: GithubRelease\n): Promise<string | null> {\n  const current = digestAsset.currentVersion.replace(regEx(/^v/), '');\n  const next = release.tag_name.replace(regEx(/^v/), '');\n  const releaseChecksumAssetName = digestAsset.assetName.replace(current, next);\n  const releaseAsset = release.assets.find(\n    (a: GithubReleaseAsset) => a.name === releaseChecksumAssetName\n  );\n  if (!releaseAsset) {\n    return null;\n  }\n  if (digestAsset.digestedFileName) {\n    const releaseFilename = digestAsset.digestedFileName.replace(current, next);\n    const res = await http.get(releaseAsset.browser_download_url);\n    for (const line of res.body.split('\\n')) {\n      const [lineDigest, lineFn] = line.split(regEx(/\\s+/), 2);\n      if (lineFn === releaseFilename) {\n        return lineDigest;\n      }\n    }\n  } else {\n    const algorithm = inferHashAlg(digestAsset.currentDigest);\n    const newDigest = await downloadAndDigest(releaseAsset, algorithm);\n    return newDigest;\n  }\n  return null;\n}\n"]}