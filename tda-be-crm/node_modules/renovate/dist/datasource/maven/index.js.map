{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/maven/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { DateTime } from 'luxon';\nimport pAll from 'p-all';\nimport { XmlDocument } from 'xmldoc';\nimport { logger } from '../../logger';\nimport * as packageCache from '../../util/cache/package';\nimport { regEx } from '../../util/regex';\nimport mavenVersion from '../../versioning/maven';\nimport * as mavenVersioning from '../../versioning/maven';\nimport { compare } from '../../versioning/maven/compare';\nimport type { GetReleasesConfig, Release, ReleaseResult } from '../types';\nimport { MAVEN_REPO } from './common';\nimport type { MavenDependency, ReleaseMap } from './types';\nimport {\n  checkHttpResource,\n  downloadHttpProtocol,\n  downloadMavenXml,\n  getDependencyInfo,\n  getDependencyParts,\n  getMavenUrl,\n} from './util';\n\nexport { id } from './common';\n\nexport const customRegistrySupport = true;\nexport const defaultRegistryUrls = [MAVEN_REPO];\nexport const defaultVersioning = mavenVersioning.id;\nexport const registryStrategy = 'merge';\n\nfunction isStableVersion(x: string): boolean {\n  return mavenVersion.isStable(x);\n}\n\nfunction getLatestSuitableVersion(releases: Release[]): string | null {\n  // istanbul ignore if\n  if (!releases?.length) {\n    return null;\n  }\n  const allVersions = releases.map(({ version }) => version);\n  const stableVersions = allVersions.filter(isStableVersion);\n  const versions = stableVersions.length ? stableVersions : allVersions;\n  return versions.reduce((latestVersion, version) =>\n    compare(version, latestVersion) === 1 ? version : latestVersion\n  );\n}\n\nfunction extractVersions(metadata: XmlDocument): string[] {\n  const versions = metadata.descendantWithPath('versioning.versions');\n  const elements = versions?.childrenNamed('version');\n  if (!elements) {\n    return [];\n  }\n  return elements.map((el) => el.val);\n}\n\nasync function fetchReleasesFromMetadata(\n  dependency: MavenDependency,\n  repoUrl: string\n): Promise<ReleaseMap> {\n  const metadataUrl = getMavenUrl(dependency, repoUrl, 'maven-metadata.xml');\n\n  const cacheNamespace = 'datasource-maven:metadata-xml';\n  const cacheKey = metadataUrl.toString();\n  const cachedVersions = await packageCache.get<ReleaseMap>(\n    cacheNamespace,\n    cacheKey\n  );\n  /* istanbul ignore if */\n  if (cachedVersions) {\n    return cachedVersions;\n  }\n\n  const { authorization, xml: mavenMetadata } = await downloadMavenXml(\n    metadataUrl\n  );\n  if (!mavenMetadata) {\n    return {};\n  }\n\n  const versions = extractVersions(mavenMetadata);\n  const releaseMap = versions.reduce(\n    (acc, version) => ({ ...acc, [version]: null }),\n    {}\n  );\n  if (!authorization) {\n    await packageCache.set(cacheNamespace, cacheKey, releaseMap, 30);\n  }\n  return releaseMap;\n}\n\nconst mavenCentralHtmlVersionRegex = regEx(\n  '^<a href=\"(?<version>[^\"]+)\\\\/\" title=\"(?:[^\"]+)\\\\/\">(?:[^\"]+)\\\\/<\\\\/a>\\\\s+(?<releaseTimestamp>\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d \\\\d\\\\d:\\\\d\\\\d)\\\\s+-$',\n  'i'\n);\n\nasync function addReleasesFromIndexPage(\n  inputReleaseMap: ReleaseMap,\n  dependency: MavenDependency,\n  repoUrl: string\n): Promise<ReleaseMap> {\n  const cacheNs = 'datasource-maven:index-html-releases';\n  const cacheKey = `${repoUrl}${dependency.dependencyUrl}`;\n  let workingReleaseMap = await packageCache.get<ReleaseMap>(cacheNs, cacheKey);\n  if (!workingReleaseMap) {\n    workingReleaseMap = {};\n    let retryEarlier = false;\n    try {\n      if (repoUrl.startsWith(MAVEN_REPO)) {\n        const indexUrl = getMavenUrl(dependency, repoUrl, 'index.html');\n        const res = await downloadHttpProtocol(indexUrl);\n        const { body = '' } = res;\n        for (const line of body.split('\\n')) {\n          const match = line.trim().match(mavenCentralHtmlVersionRegex);\n          if (match) {\n            const { version, releaseTimestamp: timestamp } =\n              match?.groups || {};\n            if (version && timestamp) {\n              const date = DateTime.fromFormat(timestamp, 'yyyy-MM-dd HH:mm', {\n                zone: 'UTC',\n              });\n              if (date.isValid) {\n                const releaseTimestamp = date.toISO();\n                workingReleaseMap[version] = { version, releaseTimestamp };\n              }\n            }\n          }\n        }\n      }\n    } catch (err) /* istanbul ignore next */ {\n      retryEarlier = true;\n      logger.debug(\n        { dependency, err },\n        'Failed to get releases from index.html'\n      );\n    }\n    const cacheTTL = retryEarlier ? 60 : 24 * 60;\n    await packageCache.set(cacheNs, cacheKey, workingReleaseMap, cacheTTL);\n  }\n\n  const releaseMap = { ...inputReleaseMap };\n  for (const version of Object.keys(releaseMap)) {\n    releaseMap[version] ||= workingReleaseMap[version] ?? null;\n  }\n\n  return releaseMap;\n}\n\nfunction isSnapshotVersion(version: string): boolean {\n  if (version.endsWith('-SNAPSHOT')) {\n    return true;\n  }\n  return false;\n}\n\nfunction extractSnapshotVersion(metadata: XmlDocument): string | null {\n  // Parse the maven-metadata.xml for the snapshot version and determine\n  // the fixed version of the latest deployed snapshot.\n  // The metadata descriptor can be found at\n  // https://maven.apache.org/ref/3.3.3/maven-repository-metadata/repository-metadata.html\n  //\n  // Basically, we need to replace -SNAPSHOT with the artifact timestanp & build number,\n  // so for example 1.0.0-SNAPSHOT will become 1.0.0-<timestamp>-<buildNumber>\n  const version = metadata\n    .descendantWithPath('version')\n    ?.val?.replace('-SNAPSHOT', '');\n\n  const snapshot = metadata.descendantWithPath('versioning.snapshot');\n  const timestamp = snapshot?.childNamed('timestamp')?.val;\n  const build = snapshot?.childNamed('buildNumber')?.val;\n\n  // If we weren't able to parse out the required 3 version elements,\n  // return null because we can't determine the fixed version of the latest snapshot.\n  if (!version || !timestamp || !build) {\n    return null;\n  }\n  return `${version}-${timestamp}-${build}`;\n}\n\nasync function getSnapshotFullVersion(\n  version: string,\n  dependency: MavenDependency,\n  repoUrl: string\n): Promise<string | null> {\n  // To determine what actual files are available for the snapshot, first we have to fetch and parse\n  // the metadata located at http://<repo>/<group>/<artifact>/<version-SNAPSHOT>/maven-metadata.xml\n  const metadataUrl = getMavenUrl(\n    dependency,\n    repoUrl,\n    `${version}/maven-metadata.xml`\n  );\n\n  const { xml: mavenMetadata } = await downloadMavenXml(metadataUrl);\n  if (!mavenMetadata) {\n    return null;\n  }\n\n  return extractSnapshotVersion(mavenMetadata);\n}\n\nasync function createUrlForDependencyPom(\n  version: string,\n  dependency: MavenDependency,\n  repoUrl: string\n): Promise<string> {\n  if (isSnapshotVersion(version)) {\n    // By default, Maven snapshots are deployed to the repository with fixed file names.\n    // Resolve the full, actual pom file name for the version.\n    const fullVersion = await getSnapshotFullVersion(\n      version,\n      dependency,\n      repoUrl\n    );\n\n    // If we were able to resolve the version, use that, otherwise fall back to using -SNAPSHOT\n    if (fullVersion !== null) {\n      return `${version}/${dependency.name}-${fullVersion}.pom`;\n    }\n  }\n\n  return `${version}/${dependency.name}-${version}.pom`;\n}\n\nasync function addReleasesUsingHeadRequests(\n  inputReleaseMap: ReleaseMap,\n  dependency: MavenDependency,\n  repoUrl: string\n): Promise<ReleaseMap> {\n  const releaseMap = { ...inputReleaseMap };\n\n  if (process.env.RENOVATE_EXPERIMENTAL_NO_MAVEN_POM_CHECK) {\n    return releaseMap;\n  }\n\n  const cacheNs = 'datasource-maven:head-requests';\n  const cacheKey = `${repoUrl}${dependency.dependencyUrl}`;\n  let workingReleaseMap: ReleaseMap = await packageCache.get<ReleaseMap>(\n    cacheNs,\n    cacheKey\n  );\n\n  if (!workingReleaseMap) {\n    workingReleaseMap = {};\n\n    const unknownVersions = Object.entries(releaseMap)\n      .filter(([version, release]) => {\n        const isDiscoveredOutside = !!release;\n        const isDiscoveredInsideAndCached = !is.undefined(\n          workingReleaseMap[version]\n        );\n        const isDiscovered = isDiscoveredOutside || isDiscoveredInsideAndCached;\n        return !isDiscovered;\n      })\n      .map(([k]) => k);\n\n    if (unknownVersions.length) {\n      let retryEarlier = false;\n      const queue = unknownVersions.map(\n        (version) => async (): Promise<void> => {\n          const pomUrl = await createUrlForDependencyPom(\n            version,\n            dependency,\n            repoUrl\n          );\n          const artifactUrl = getMavenUrl(dependency, repoUrl, pomUrl);\n          const release: Release = { version };\n\n          const res = await checkHttpResource(artifactUrl);\n\n          if (res === 'error') {\n            retryEarlier = true;\n          }\n\n          if (is.date(res)) {\n            release.releaseTimestamp = res.toISOString();\n          }\n\n          if (res !== 'not-found' && res !== 'error') {\n            workingReleaseMap[version] = release;\n          }\n        }\n      );\n\n      await pAll(queue, { concurrency: 5 });\n      const cacheTTL = retryEarlier ? 60 : 24 * 60;\n      await packageCache.set(cacheNs, cacheKey, workingReleaseMap, cacheTTL);\n    }\n  }\n\n  for (const version of Object.keys(releaseMap)) {\n    releaseMap[version] ||= workingReleaseMap[version] ?? null;\n  }\n\n  return releaseMap;\n}\n\nfunction getReleasesFromMap(releaseMap: ReleaseMap): Release[] {\n  const releases = Object.values(releaseMap).filter(Boolean);\n  if (releases.length) {\n    return releases;\n  }\n  return Object.keys(releaseMap).map((version) => ({ version }));\n}\n\nexport async function getReleases({\n  lookupName,\n  registryUrl,\n}: GetReleasesConfig): Promise<ReleaseResult | null> {\n  const dependency = getDependencyParts(lookupName);\n  const repoUrl = registryUrl.replace(/\\/?$/, '/'); // TODO #12071\n\n  logger.debug(`Looking up ${dependency.display} in repository ${repoUrl}`);\n\n  let releaseMap = await fetchReleasesFromMetadata(dependency, repoUrl);\n  releaseMap = await addReleasesFromIndexPage(releaseMap, dependency, repoUrl);\n  releaseMap = await addReleasesUsingHeadRequests(\n    releaseMap,\n    dependency,\n    repoUrl\n  );\n  const releases = getReleasesFromMap(releaseMap);\n  if (!releases?.length) {\n    return null;\n  }\n\n  logger.debug(\n    `Found ${releases.length} new releases for ${dependency.display} in repository ${repoUrl}`\n  );\n\n  const latestSuitableVersion = getLatestSuitableVersion(releases);\n  const dependencyInfo =\n    latestSuitableVersion &&\n    (await getDependencyInfo(dependency, repoUrl, latestSuitableVersion));\n\n  return { ...dependency, ...dependencyInfo, releases };\n}\n"]}