{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/pod/index.ts"],"names":[],"mappings":"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","sourcesContent":["import crypto from 'crypto';\nimport { HOST_DISABLED } from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport * as packageCache from '../../util/cache/package';\nimport { Http } from '../../util/http';\nimport { GithubHttp } from '../../util/http/github';\nimport type { HttpError } from '../../util/http/types';\nimport { regEx } from '../../util/regex';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\n\nexport const id = 'pod';\n\nexport const customRegistrySupport = true;\nexport const defaultRegistryUrls = ['https://cdn.cocoapods.org'];\nexport const registryStrategy = 'hunt';\n\nconst cacheNamespace = `datasource-${id}`;\nconst cacheMinutes = 30;\n\nconst githubHttp = new GithubHttp(id);\nconst http = new Http(id);\n\nfunction shardParts(lookupName: string): string[] {\n  return crypto\n    .createHash('md5')\n    .update(lookupName)\n    .digest('hex')\n    .slice(0, 3)\n    .split('');\n}\n\nfunction releasesGithubUrl(\n  lookupName: string,\n  opts: { account: string; repo: string; useShard: boolean }\n): string {\n  const { useShard, account, repo } = opts;\n  const prefix = 'https://api.github.com/repos';\n  const shard = shardParts(lookupName).join('/');\n  const suffix = useShard ? `${shard}/${lookupName}` : lookupName;\n  return `${prefix}/${account}/${repo}/contents/Specs/${suffix}`;\n}\n\nfunction handleError(lookupName: string, err: HttpError): void {\n  const errorData = { lookupName, err };\n\n  const statusCode = err.response?.statusCode;\n  if (statusCode === 429 || (statusCode >= 500 && statusCode < 600)) {\n    logger.warn({ lookupName, err }, `CocoaPods registry failure`);\n    throw new ExternalHostError(err);\n  }\n\n  if (statusCode === 401) {\n    logger.debug(errorData, 'Authorization error');\n  } else if (statusCode === 404) {\n    logger.debug(errorData, 'Package lookup error');\n  } else if (err.message === HOST_DISABLED) {\n    // istanbul ignore next\n    logger.trace(errorData, 'Host disabled');\n  } else {\n    logger.warn(errorData, 'CocoaPods lookup failure: Unknown error');\n  }\n}\n\nasync function requestCDN(\n  url: string,\n  lookupName: string\n): Promise<string | null> {\n  try {\n    const resp = await http.get(url);\n    if (resp?.body) {\n      return resp.body;\n    }\n  } catch (err) {\n    handleError(lookupName, err);\n  }\n\n  return null;\n}\n\nasync function requestGithub<T = unknown>(\n  url: string,\n  lookupName: string\n): Promise<T | null> {\n  try {\n    const resp = await githubHttp.getJson<T>(url);\n    if (resp?.body) {\n      return resp.body;\n    }\n  } catch (err) {\n    handleError(lookupName, err);\n  }\n\n  return null;\n}\n\nconst githubRegex = regEx(\n  /^https:\\/\\/github\\.com\\/(?<account>[^/]+)\\/(?<repo>[^/]+?)(\\.git|\\/.*)?$/\n);\n\nasync function getReleasesFromGithub(\n  lookupName: string,\n  registryUrl: string,\n  useShard = false\n): Promise<ReleaseResult | null> {\n  const match = githubRegex.exec(registryUrl);\n  const { account, repo } = match?.groups || {};\n  const opts = { account, repo, useShard };\n  const url = releasesGithubUrl(lookupName, opts);\n  const resp = await requestGithub<{ name: string }[]>(url, lookupName);\n  if (resp) {\n    const releases = resp.map(({ name }) => ({ version: name }));\n    return { releases };\n  }\n\n  if (!useShard) {\n    return getReleasesFromGithub(lookupName, registryUrl, true);\n  }\n\n  return null;\n}\n\nfunction releasesCDNUrl(lookupName: string, registryUrl: string): string {\n  const shard = shardParts(lookupName).join('_');\n  return `${registryUrl}/all_pods_versions_${shard}.txt`;\n}\n\nasync function getReleasesFromCDN(\n  lookupName: string,\n  registryUrl: string\n): Promise<ReleaseResult | null> {\n  const url = releasesCDNUrl(lookupName, registryUrl);\n  const resp = await requestCDN(url, lookupName);\n  if (resp) {\n    const lines = resp.split('\\n');\n    for (let idx = 0; idx < lines.length; idx += 1) {\n      const line = lines[idx];\n      const [name, ...versions] = line.split('/');\n      if (name === lookupName.replace(regEx(/\\/.*$/), '')) {\n        // TODO #12071\n        const releases = versions.map((version) => ({ version }));\n        return { releases };\n      }\n    }\n  }\n  return null;\n}\n\nfunction isDefaultRepo(url: string): boolean {\n  const match = githubRegex.exec(url);\n  if (match) {\n    const { account, repo } = match.groups || {};\n    return (\n      account.toLowerCase() === 'cocoapods' && repo.toLowerCase() === 'specs'\n    ); // https://github.com/CocoaPods/Specs.git\n  }\n  return false;\n}\n\nexport async function getReleases({\n  lookupName,\n  registryUrl,\n}: GetReleasesConfig): Promise<ReleaseResult | null> {\n  const podName = lookupName.replace(regEx(/\\/.*$/), '');\n\n  const cachedResult = await packageCache.get<ReleaseResult>(\n    cacheNamespace,\n    registryUrl + podName\n  );\n\n  // istanbul ignore if\n  if (cachedResult !== undefined) {\n    logger.trace(`CocoaPods: Return cached result for ${podName}`);\n    return cachedResult;\n  }\n\n  let baseUrl = registryUrl.replace(regEx(/\\/+$/), '');\n\n  // In order to not abuse github API limits, query CDN instead\n  if (isDefaultRepo(baseUrl)) {\n    [baseUrl] = defaultRegistryUrls;\n  }\n\n  let result: ReleaseResult | null = null;\n  if (githubRegex.exec(baseUrl)) {\n    result = await getReleasesFromGithub(podName, baseUrl);\n  } else {\n    result = await getReleasesFromCDN(podName, baseUrl);\n  }\n\n  await packageCache.set(cacheNamespace, podName, result, cacheMinutes);\n\n  return result;\n}\n"]}