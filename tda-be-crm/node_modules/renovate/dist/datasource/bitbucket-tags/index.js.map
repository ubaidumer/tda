{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/bitbucket-tags/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as utils from '../../platform/bitbucket/utils';\nimport { cache } from '../../util/cache/package/decorator';\nimport { BitbucketHttp } from '../../util/http/bitbucket';\nimport { ensureTrailingSlash } from '../../util/url';\nimport { Datasource } from '../datasource';\nimport type { DigestConfig, GetReleasesConfig, ReleaseResult } from '../types';\nimport { BitbucketCommit, BitbucketTag } from './types';\n\nexport class BitBucketTagsDatasource extends Datasource {\n  bitbucketHttp = new BitbucketHttp();\n\n  static readonly id = 'bitbucket-tags';\n\n  static readonly customRegistrySupport = true;\n\n  static readonly registryStrategy = 'first';\n\n  static readonly defaultRegistryUrls = ['https://bitbucket.org'];\n\n  static readonly cacheNamespace = `datasource-${BitBucketTagsDatasource.id}`;\n\n  constructor() {\n    super(BitBucketTagsDatasource.id);\n  }\n\n  static getRegistryURL(registryUrl: string): string {\n    // fallback to default API endpoint if custom not provided\n    return registryUrl ?? this.defaultRegistryUrls[0];\n  }\n\n  static getCacheKey(registryUrl: string, repo: string, type: string): string {\n    return `${BitBucketTagsDatasource.getRegistryURL(\n      registryUrl\n    )}:${repo}:${type}`;\n  }\n\n  static getSourceUrl(lookupName: string, registryUrl?: string): string {\n    const url = BitBucketTagsDatasource.getRegistryURL(registryUrl);\n    const normalizedUrl = ensureTrailingSlash(url);\n    return `${normalizedUrl}${lookupName}`;\n  }\n\n  // getReleases fetches list of tags for the repository\n  @cache({\n    namespace: BitBucketTagsDatasource.cacheNamespace,\n    key: ({ registryUrl, lookupName }: GetReleasesConfig) =>\n      BitBucketTagsDatasource.getCacheKey(registryUrl, lookupName, 'tags'),\n  })\n  async getReleases({\n    registryUrl,\n    lookupName: repo,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const url = `/2.0/repositories/${repo}/refs/tags`;\n\n    const bitbucketTags = (\n      await this.bitbucketHttp.getJson<utils.PagedResult<BitbucketTag>>(url)\n    ).body;\n\n    const dependency: ReleaseResult = {\n      sourceUrl: BitBucketTagsDatasource.getSourceUrl(repo, registryUrl),\n      registryUrl: BitBucketTagsDatasource.getRegistryURL(registryUrl),\n      releases: null,\n    };\n    dependency.releases = bitbucketTags.values.map(({ name, target }) => ({\n      version: name,\n      gitRef: name,\n      releaseTimestamp: target?.date,\n    }));\n\n    return dependency;\n  }\n\n  // getTagCommit fetched the commit has for specified tag\n  @cache({\n    namespace: BitBucketTagsDatasource.cacheNamespace,\n    key: (registryUrl, repo, tag: string) =>\n      BitBucketTagsDatasource.getCacheKey(registryUrl, repo, `tag-${tag}`),\n  })\n  async getTagCommit(\n    registryUrl: string,\n    repo: string,\n    tag: string\n  ): Promise<string | null> {\n    const url = `/2.0/repositories/${repo}/refs/tags/${tag}`;\n\n    const bitbucketTag = (await this.bitbucketHttp.getJson<BitbucketTag>(url))\n      .body;\n\n    return bitbucketTag.target.hash;\n  }\n\n  @cache({\n    namespace: BitBucketTagsDatasource.cacheNamespace,\n    key: (registryUrl: string, repo: string) =>\n      BitBucketTagsDatasource.getCacheKey(registryUrl, repo, 'mainbranch'),\n    ttlMinutes: 60,\n  })\n  async getMainBranch(repo: string): Promise<string> {\n    return (\n      await this.bitbucketHttp.getJson<utils.RepoInfoBody>(\n        `/2.0/repositories/${repo}`\n      )\n    ).body.mainbranch.name;\n  }\n\n  // getDigest fetched the latest commit for repository main branch\n  // however, if newValue is provided, then getTagCommit is called\n  @cache({\n    namespace: BitBucketTagsDatasource.cacheNamespace,\n    key: ({ registryUrl, lookupName }: DigestConfig) =>\n      BitBucketTagsDatasource.getCacheKey(registryUrl, lookupName, 'digest'),\n  })\n  override async getDigest(\n    { lookupName: repo, registryUrl }: DigestConfig,\n    newValue?: string\n  ): Promise<string | null> {\n    if (newValue?.length) {\n      return this.getTagCommit(registryUrl, repo, newValue);\n    }\n\n    const mainBranch = await this.getMainBranch(repo);\n\n    const url = `/2.0/repositories/${repo}/commits/${mainBranch}`;\n    const bitbucketCommits = (\n      await this.bitbucketHttp.getJson<utils.PagedResult<BitbucketCommit>>(url)\n    ).body;\n\n    if (bitbucketCommits.values.length === 0) {\n      return null;\n    }\n\n    return bitbucketCommits.values[0].hash;\n  }\n}\n"]}