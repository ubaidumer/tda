"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultConfig = exports.getDigest = exports.supportsDigests = exports.getPkgReleases = exports.getDefaultVersioning = exports.getDatasourceList = exports.getDatasources = exports.isGetPkgReleasesConfig = void 0;
const tslib_1 = require("tslib");
const is_1 = (0, tslib_1.__importDefault)(require("@sindresorhus/is"));
const dequal_1 = require("dequal");
const error_messages_1 = require("../constants/error-messages");
const logger_1 = require("../logger");
const external_host_error_1 = require("../types/errors/external-host-error");
const memCache = (0, tslib_1.__importStar)(require("../util/cache/memory"));
const packageCache = (0, tslib_1.__importStar)(require("../util/cache/package"));
const clone_1 = require("../util/clone");
const regex_1 = require("../util/regex");
const url_1 = require("../util/url");
const allVersioning = (0, tslib_1.__importStar)(require("../versioning"));
const api_1 = (0, tslib_1.__importDefault)(require("./api"));
const metadata_1 = require("./metadata");
(0, tslib_1.__exportStar)(require("./types"), exports);
var common_1 = require("./common");
Object.defineProperty(exports, "isGetPkgReleasesConfig", { enumerable: true, get: function () { return common_1.isGetPkgReleasesConfig; } });
const getDatasources = () => api_1.default;
exports.getDatasources = getDatasources;
const getDatasourceList = () => Array.from(api_1.default.keys());
exports.getDatasourceList = getDatasourceList;
const cacheNamespace = 'datasource-releases';
function getDatasourceFor(datasource) {
    return api_1.default.get(datasource);
}
// TODO: fix error Type
function logError(datasource, lookupName, err) {
    const { statusCode, code: errCode, url } = err;
    if (statusCode === 404) {
        logger_1.logger.debug({ datasource, lookupName, url }, 'Datasource 404');
    }
    else if (statusCode === 401 || statusCode === 403) {
        logger_1.logger.debug({ datasource, lookupName, url }, 'Datasource unauthorized');
    }
    else if (errCode) {
        logger_1.logger.debug({ datasource, lookupName, url, errCode }, 'Datasource connection error');
    }
    else {
        logger_1.logger.debug({ datasource, lookupName, err }, 'Datasource unknown error');
    }
}
async function getRegistryReleases(datasource, config, registryUrl) {
    var _a;
    const cacheKey = `${datasource.id} ${registryUrl} ${config.lookupName}`;
    if (datasource.caching) {
        const cachedResult = await packageCache.get(cacheNamespace, cacheKey);
        // istanbul ignore if
        if (cachedResult) {
            logger_1.logger.trace({ cacheKey }, 'Returning cached datasource response');
            return cachedResult;
        }
    }
    const res = await datasource.getReleases({ ...config, registryUrl });
    if (res === null || res === void 0 ? void 0 : res.releases.length) {
        (_a = res.registryUrl) !== null && _a !== void 0 ? _a : (res.registryUrl = registryUrl);
    }
    // cache non-null responses unless marked as private
    if (datasource.caching && res && !res.isPrivate) {
        logger_1.logger.trace({ cacheKey }, 'Caching datasource response');
        const cacheMinutes = 15;
        await packageCache.set(cacheNamespace, cacheKey, res, cacheMinutes);
    }
    return res;
}
function firstRegistry(config, datasource, registryUrls) {
    if (registryUrls.length > 1) {
        logger_1.logger.warn({ datasource: datasource.id, depName: config.depName, registryUrls }, 'Excess registryUrls found for datasource lookup - using first configured only');
    }
    const registryUrl = registryUrls[0];
    return getRegistryReleases(datasource, config, registryUrl);
}
async function huntRegistries(config, datasource, registryUrls) {
    let res;
    let caughtError;
    for (const registryUrl of registryUrls) {
        try {
            res = await getRegistryReleases(datasource, config, registryUrl);
            if (res) {
                break;
            }
        }
        catch (err) {
            if (err instanceof external_host_error_1.ExternalHostError) {
                throw err;
            }
            // We'll always save the last-thrown error
            caughtError = err;
            logger_1.logger.trace({ err }, 'datasource hunt failure');
        }
    }
    if (res) {
        return res;
    }
    if (caughtError) {
        throw caughtError;
    }
    return null;
}
async function mergeRegistries(config, datasource, registryUrls) {
    var _a;
    let combinedRes;
    let caughtError;
    for (const registryUrl of registryUrls) {
        try {
            const res = await getRegistryReleases(datasource, config, registryUrl);
            if (res) {
                if (combinedRes) {
                    for (const existingRelease of combinedRes.releases || []) {
                        existingRelease.registryUrl = combinedRes.registryUrl;
                    }
                    for (const additionalRelease of res.releases || []) {
                        additionalRelease.registryUrl = res.registryUrl;
                    }
                    combinedRes = { ...res, ...combinedRes };
                    delete combinedRes.registryUrl;
                    combinedRes.releases = [...combinedRes.releases, ...res.releases];
                }
                else {
                    combinedRes = res;
                }
            }
        }
        catch (err) {
            if (err instanceof external_host_error_1.ExternalHostError) {
                throw err;
            }
            // We'll always save the last-thrown error
            caughtError = err;
            logger_1.logger.trace({ err }, 'datasource merge failure');
        }
    }
    // De-duplicate releases
    if ((_a = combinedRes === null || combinedRes === void 0 ? void 0 : combinedRes.releases) === null || _a === void 0 ? void 0 : _a.length) {
        const seenVersions = new Set();
        combinedRes.releases = combinedRes.releases.filter((release) => {
            if (seenVersions.has(release.version)) {
                return false;
            }
            seenVersions.add(release.version);
            return true;
        });
    }
    if (combinedRes) {
        return combinedRes;
    }
    if (caughtError) {
        throw caughtError;
    }
    return null;
}
function resolveRegistryUrls(datasource, extractedUrls) {
    const { defaultRegistryUrls = [] } = datasource;
    if (!datasource.customRegistrySupport) {
        if (is_1.default.nonEmptyArray(extractedUrls)) {
            logger_1.logger.warn({ datasource: datasource.id, registryUrls: extractedUrls }, 'Custom registries are not allowed for this datasource and will be ignored');
        }
        return defaultRegistryUrls;
    }
    const customUrls = extractedUrls === null || extractedUrls === void 0 ? void 0 : extractedUrls.filter(Boolean);
    let registryUrls;
    if (is_1.default.nonEmptyArray(customUrls)) {
        registryUrls = [...customUrls];
    }
    else {
        registryUrls = [...defaultRegistryUrls];
    }
    return registryUrls.filter(Boolean).map(url_1.trimTrailingSlash);
}
function getDefaultVersioning(datasourceName) {
    const datasource = getDatasourceFor(datasourceName);
    // istanbul ignore if: wrong regex manager config?
    if (!datasource) {
        logger_1.logger.warn({ datasourceName }, 'Missing datasource!');
    }
    return (datasource === null || datasource === void 0 ? void 0 : datasource.defaultVersioning) || 'semver';
}
exports.getDefaultVersioning = getDefaultVersioning;
function applyReplacements(config) {
    if (config.replacementName && config.replacementVersion) {
        return {
            replacementName: config.replacementName,
            replacementVersion: config.replacementVersion,
        };
    }
    return undefined;
}
async function fetchReleases(config) {
    var _a;
    const { datasource: datasourceName } = config;
    if (!datasourceName || getDatasourceFor(datasourceName) === undefined) {
        logger_1.logger.warn('Unknown datasource: ' + datasourceName);
        return null;
    }
    const datasource = getDatasourceFor(datasourceName);
    const registryUrls = resolveRegistryUrls(datasource, config.registryUrls);
    let dep = null;
    const registryStrategy = datasource.registryStrategy || 'hunt';
    try {
        if (is_1.default.nonEmptyArray(registryUrls)) {
            if (registryStrategy === 'first') {
                dep = await firstRegistry(config, datasource, registryUrls);
            }
            else if (registryStrategy === 'hunt') {
                dep = await huntRegistries(config, datasource, registryUrls);
            }
            else if (registryStrategy === 'merge') {
                dep = await mergeRegistries(config, datasource, registryUrls);
            }
        }
        else {
            dep = await datasource.getReleases(config);
        }
    }
    catch (err) {
        if (err.message === error_messages_1.HOST_DISABLED || ((_a = err.err) === null || _a === void 0 ? void 0 : _a.message) === error_messages_1.HOST_DISABLED) {
            return null;
        }
        if (err instanceof external_host_error_1.ExternalHostError) {
            throw err;
        }
        logError(datasource.id, config.lookupName, err);
    }
    if (!dep || (0, dequal_1.dequal)(dep, { releases: [] })) {
        return null;
    }
    (0, metadata_1.addMetaData)(dep, datasourceName, config.lookupName);
    dep = { ...dep, ...applyReplacements(config) };
    return dep;
}
function getRawReleases(config) {
    const { datasource, lookupName, registryUrls } = config;
    const cacheKey = `${cacheNamespace}${datasource}${lookupName}${String(registryUrls)}`;
    // By returning a Promise and reusing it, we should only fetch each package at most once
    const cachedResult = memCache.get(cacheKey);
    // istanbul ignore if
    if (cachedResult !== undefined) {
        return cachedResult;
    }
    const promisedRes = fetchReleases(config);
    memCache.set(cacheKey, promisedRes);
    return promisedRes;
}
async function getPkgReleases(config) {
    if (!config.datasource) {
        logger_1.logger.warn('No datasource found');
        return null;
    }
    const lookupName = config.lookupName || config.depName;
    if (!lookupName) {
        logger_1.logger.error({ config }, 'Datasource getReleases without lookupName');
        return null;
    }
    let res;
    try {
        res = (0, clone_1.clone)(await getRawReleases({
            ...config,
            lookupName,
        }));
    }
    catch (e) /* istanbul ignore next */ {
        if (e instanceof external_host_error_1.ExternalHostError) {
            e.hostType = config.datasource;
            e.lookupName = lookupName;
        }
        throw e;
    }
    if (!res) {
        return res;
    }
    if (config.extractVersion) {
        const extractVersionRegEx = (0, regex_1.regEx)(config.extractVersion);
        res.releases = res.releases
            .map((release) => {
            var _a, _b;
            const version = (_b = (_a = extractVersionRegEx.exec(release.version)) === null || _a === void 0 ? void 0 : _a.groups) === null || _b === void 0 ? void 0 : _b.version;
            if (version) {
                return { ...release, version }; // overwrite version
            }
            return null; // filter out any we can't extract
        })
            .filter(Boolean);
    }
    // Use the datasource's default versioning if none is configured
    const versioning = config.versioning || getDefaultVersioning(config.datasource);
    const version = allVersioning.get(versioning);
    // Filter and sort valid versions
    res.releases = res.releases
        .filter((release) => version.isVersion(release.version))
        .sort((a, b) => version.sortVersions(a.version, b.version));
    // Filter versions for uniqueness
    res.releases = res.releases.filter((filterRelease, filterIndex) => res.releases.findIndex((findRelease) => findRelease.version === filterRelease.version) === filterIndex);
    // Filter releases for compatibility
    for (const [constraintName, constraintValue] of Object.entries(config.constraints || {})) {
        // Currently we only support if the constraint is a plain version
        // TODO: Support range/range compatibility filtering #8476
        if (version.isVersion(constraintValue)) {
            res.releases = res.releases.filter((release) => {
                var _a;
                if (!is_1.default.nonEmptyArray((_a = release.constraints) === null || _a === void 0 ? void 0 : _a[constraintName])) {
                    // A release with no constraints is OK
                    return true;
                }
                return release.constraints[constraintName].some(
                // If any of the release's constraints match, then it's OK
                (releaseConstraint) => !releaseConstraint ||
                    version.matches(constraintValue, releaseConstraint));
            });
        }
    }
    // Strip constraints from releases result
    res.releases.forEach((release) => {
        delete release.constraints;
    });
    return res;
}
exports.getPkgReleases = getPkgReleases;
function supportsDigests(config) {
    return 'getDigest' in getDatasourceFor(config.datasource);
}
exports.supportsDigests = supportsDigests;
function getDigest(config, value) {
    const datasource = getDatasourceFor(config.datasource);
    const lookupName = config.lookupName || config.depName;
    const registryUrls = resolveRegistryUrls(datasource, config.registryUrls);
    const digestConfig = {
        registryUrl: registryUrls[0],
        currentValue: config.currentValue,
        currentDigest: config.currentDigest,
        lookupName,
    };
    return datasource.getDigest(digestConfig, value);
}
exports.getDigest = getDigest;
function getDefaultConfig(datasource) {
    const loadedDatasource = getDatasourceFor(datasource);
    return Promise.resolve((loadedDatasource === null || loadedDatasource === void 0 ? void 0 : loadedDatasource.defaultConfig) || Object.create({}));
}
exports.getDefaultConfig = getDefaultConfig;
//# sourceMappingURL=index.js.map