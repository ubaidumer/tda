{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/dart/index.ts"],"names":[],"mappings":";;;AACA,8CAA2C;AAI3C,MAAa,cAAe,SAAQ,uBAAU;IAG5C;QACE,KAAK,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;QAGT,0BAAqB,GAAG,KAAK,CAAC;QAE9B,wBAAmB,GAAG,CAAC,2BAA2B,CAAC,CAAC;IAJtE,CAAC;IAMD,KAAK,CAAC,WAAW,CAAC,EAChB,UAAU,EACV,WAAW,GACO;QAClB,IAAI,MAAM,GAAkB,IAAI,CAAC;QACjC,MAAM,MAAM,GAAG,GAAG,WAAW,gBAAgB,UAAU,EAAE,CAAC;QAE1D,IAAI,GAAG,GAA6B,IAAI,CAAC;QACzC,IAAI;YACF,GAAG,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAa,MAAM,CAAC,CAAC;SACnD;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;SAC/B;QAED,MAAM,IAAI,GAAG,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,IAAI,CAAC;QACvB,IAAI,IAAI,EAAE;YACR,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;YAClC,IAAI,QAAQ,IAAI,MAAM,EAAE;gBACtB,MAAM,GAAG;oBACP,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;wBACvD,OAAO;wBACP,gBAAgB,EAAE,SAAS;qBAC5B,CAAC,CAAC;iBACJ,CAAC;gBAEF,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;gBAC/B,IAAI,OAAO,EAAE;oBACX,IAAI,OAAO,CAAC,QAAQ,EAAE;wBACpB,MAAM,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;qBACpC;oBAED,IAAI,OAAO,CAAC,UAAU,EAAE;wBACtB,MAAM,CAAC,SAAS,GAAG,OAAO,CAAC,UAAU,CAAC;qBACvC;iBACF;aACF;SACF;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;;AAjDH,wCAkDC;AAjDiB,iBAAE,GAAG,MAAM,CAAC","sourcesContent":["import { HttpResponse } from '../../util/http';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport type { DartResult } from './types';\n\nexport class DartDatasource extends Datasource {\n  static readonly id = 'dart';\n\n  constructor() {\n    super(DartDatasource.id);\n  }\n\n  override readonly customRegistrySupport = false;\n\n  override readonly defaultRegistryUrls = ['https://pub.dartlang.org/'];\n\n  async getReleases({\n    lookupName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    let result: ReleaseResult = null;\n    const pkgUrl = `${registryUrl}api/packages/${lookupName}`;\n\n    let raw: HttpResponse<DartResult> = null;\n    try {\n      raw = await this.http.getJson<DartResult>(pkgUrl);\n    } catch (err) {\n      this.handleGenericErrors(err);\n    }\n\n    const body = raw?.body;\n    if (body) {\n      const { versions, latest } = body;\n      if (versions && latest) {\n        result = {\n          releases: body.versions.map(({ version, published }) => ({\n            version,\n            releaseTimestamp: published,\n          })),\n        };\n\n        const pubspec = latest.pubspec;\n        if (pubspec) {\n          if (pubspec.homepage) {\n            result.homepage = pubspec.homepage;\n          }\n\n          if (pubspec.repository) {\n            result.sourceUrl = pubspec.repository;\n          }\n        }\n      }\n    }\n    return result;\n  }\n}\n"]}