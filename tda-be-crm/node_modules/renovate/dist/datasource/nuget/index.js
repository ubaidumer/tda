"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReleases = exports.parseRegistryUrl = exports.registryStrategy = exports.defaultVersioning = exports.defaultRegistryUrls = exports.customRegistrySupport = exports.id = void 0;
const tslib_1 = require("tslib");
const url_1 = (0, tslib_1.__importDefault)(require("url"));
const logger_1 = require("../../logger");
const regex_1 = require("../../util/regex");
const nugetVersioning = (0, tslib_1.__importStar)(require("../../versioning/nuget"));
const v2 = (0, tslib_1.__importStar)(require("./v2"));
const v3 = (0, tslib_1.__importStar)(require("./v3"));
var common_1 = require("./common");
Object.defineProperty(exports, "id", { enumerable: true, get: function () { return common_1.id; } });
exports.customRegistrySupport = true;
exports.defaultRegistryUrls = [v3.getDefaultFeed()];
exports.defaultVersioning = nugetVersioning.id;
exports.registryStrategy = 'merge';
function parseRegistryUrl(registryUrl) {
    try {
        const parsedUrl = url_1.default.parse(registryUrl);
        let protocolVersion = 2;
        const protocolVersionRegExp = (0, regex_1.regEx)(/#protocolVersion=(2|3)/);
        const protocolVersionMatch = protocolVersionRegExp.exec(parsedUrl.hash);
        if (protocolVersionMatch) {
            parsedUrl.hash = '';
            protocolVersion = Number.parseInt(protocolVersionMatch[1], 10);
        }
        else if (parsedUrl.pathname.endsWith('.json')) {
            protocolVersion = 3;
        }
        return { feedUrl: url_1.default.format(parsedUrl), protocolVersion };
    }
    catch (err) {
        logger_1.logger.debug({ err }, `nuget registry failure: can't parse ${registryUrl}`);
        return { feedUrl: registryUrl, protocolVersion: null };
    }
}
exports.parseRegistryUrl = parseRegistryUrl;
async function getReleases({ lookupName, registryUrl, }) {
    logger_1.logger.trace(`nuget.getReleases(${lookupName})`);
    const { feedUrl, protocolVersion } = parseRegistryUrl(registryUrl);
    if (protocolVersion === 2) {
        return v2.getReleases(feedUrl, lookupName);
    }
    if (protocolVersion === 3) {
        const queryUrl = await v3.getResourceUrl(feedUrl);
        if (queryUrl) {
            return v3.getReleases(feedUrl, queryUrl, lookupName);
        }
    }
    return null;
}
exports.getReleases = getReleases;
//# sourceMappingURL=index.js.map