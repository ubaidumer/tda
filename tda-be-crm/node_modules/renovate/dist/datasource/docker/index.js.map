{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/docker/index.ts"],"names":[],"mappings":"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","sourcesContent":["import URL from 'url';\nimport parseLinkHeader from 'parse-link-header';\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport * as packageCache from '../../util/cache/package';\nimport { hasKey } from '../../util/object';\nimport { regEx } from '../../util/regex';\nimport { ensurePathPrefix } from '../../util/url';\nimport {\n  api as dockerVersioning,\n  id as dockerVersioningId,\n} from '../../versioning/docker';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport {\n  defaultRegistryUrls,\n  ecrRegex,\n  extractDigestFromResponseBody,\n  getAuthHeaders,\n  getLabels,\n  getManifestResponse,\n  getRegistryRepository,\n  http,\n  id,\n} from './common';\nimport { getTagsQuayRegistry } from './quay';\n\n// TODO: add got typings when available (#9646)\n\nexport { id };\nexport const customRegistrySupport = true;\nexport { defaultRegistryUrls };\nexport const defaultVersioning = dockerVersioningId;\nexport const registryStrategy = 'first';\n\nexport const defaultConfig = {\n  commitMessageTopic: '{{{depName}}} Docker tag',\n  commitMessageExtra:\n    'to v{{#if isMajor}}{{{newMajor}}}{{else}}{{{newVersion}}}{{/if}}',\n  digest: {\n    branchTopic: '{{{depNameSanitized}}}-{{{currentValue}}}',\n    commitMessageExtra: 'to {{newDigestShort}}',\n    commitMessageTopic:\n      '{{{depName}}}{{#if currentValue}}:{{{currentValue}}}{{/if}} Docker digest',\n    group: {\n      commitMessageTopic: '{{{groupName}}}',\n      commitMessageExtra: '',\n    },\n  },\n  pin: {\n    commitMessageExtra: '',\n    groupName: 'Docker digests',\n    group: {\n      commitMessageTopic: '{{{groupName}}}',\n      branchTopic: 'digests-pin',\n    },\n  },\n  group: {\n    commitMessageTopic: '{{{groupName}}} Docker tags',\n  },\n};\n\nasync function getDockerApiTags(\n  registryHost: string,\n  dockerRepository: string\n): Promise<string[] | null> {\n  let tags: string[] = [];\n  // AWS ECR limits the maximum number of results to 1000\n  // See https://docs.aws.amazon.com/AmazonECR/latest/APIReference/API_DescribeRepositories.html#ECR-DescribeRepositories-request-maxResults\n  const limit = ecrRegex.test(registryHost) ? 1000 : 10000;\n  let url = `${registryHost}/${dockerRepository}/tags/list?n=${limit}`;\n  url = ensurePathPrefix(url, '/v2');\n  const headers = await getAuthHeaders(registryHost, dockerRepository);\n  if (!headers) {\n    logger.debug('Failed to get authHeaders for getTags lookup');\n    return null;\n  }\n  let page = 1;\n  do {\n    const res = await http.getJson<{ tags: string[] }>(url, {\n      headers,\n      noAuth: true,\n    });\n    tags = tags.concat(res.body.tags);\n    const linkHeader = parseLinkHeader(res.headers.link as string);\n    url = linkHeader?.next ? URL.resolve(url, linkHeader.next.url) : null;\n    page += 1;\n  } while (url && page < 20);\n  return tags;\n}\n\nasync function getTags(\n  registryHost: string,\n  dockerRepository: string\n): Promise<string[] | null> {\n  try {\n    const cacheNamespace = 'datasource-docker-tags';\n    const cacheKey = `${registryHost}:${dockerRepository}`;\n    const cachedResult = await packageCache.get<string[]>(\n      cacheNamespace,\n      cacheKey\n    );\n    // istanbul ignore if\n    if (cachedResult !== undefined) {\n      return cachedResult;\n    }\n\n    const isQuay = regEx(/^https:\\/\\/quay\\.io(?::[1-9][0-9]{0,4})?$/i).test(\n      registryHost\n    );\n    let tags: string[] | null;\n    if (isQuay) {\n      tags = await getTagsQuayRegistry(registryHost, dockerRepository);\n    } else {\n      tags = await getDockerApiTags(registryHost, dockerRepository);\n    }\n    const cacheMinutes = 30;\n    await packageCache.set(cacheNamespace, cacheKey, tags, cacheMinutes);\n    return tags;\n  } catch (err) /* istanbul ignore next */ {\n    if (err instanceof ExternalHostError) {\n      throw err;\n    }\n    if (err.statusCode === 404 && !dockerRepository.includes('/')) {\n      logger.debug(\n        `Retrying Tags for ${registryHost}/${dockerRepository} using library/ prefix`\n      );\n      return getTags(registryHost, 'library/' + dockerRepository);\n    }\n    // prettier-ignore\n    if (err.statusCode === 429 && registryHost.endsWith('docker.io')) { // lgtm [js/incomplete-url-substring-sanitization]\n      logger.warn(\n        { registryHost, dockerRepository, err },\n        'docker registry failure: too many requests'\n      );\n      throw new ExternalHostError(err);\n    }\n    // prettier-ignore\n    if (err.statusCode === 401 && registryHost.endsWith('docker.io')) { // lgtm [js/incomplete-url-substring-sanitization]\n      logger.warn(\n        { registryHost, dockerRepository, err },\n        'docker registry failure: unauthorized'\n      );\n      throw new ExternalHostError(err);\n    }\n    if (err.statusCode >= 500 && err.statusCode < 600) {\n      logger.warn(\n        { registryHost, dockerRepository, err },\n        'docker registry failure: internal error'\n      );\n      throw new ExternalHostError(err);\n    }\n    throw err;\n  }\n}\n\nfunction findLatestStable(tags: string[]): string {\n  const versions = tags\n    .filter((v) => dockerVersioning.isValid(v) && dockerVersioning.isStable(v))\n    .sort((a, b) => dockerVersioning.sortVersions(a, b));\n\n  return versions.pop() ?? tags.slice(-1).pop();\n}\n\n/**\n * docker.getDigest\n *\n * The `newValue` supplied here should be a valid tag for the docker image.\n *\n * This function will:\n *  - Look up a sha256 digest for a tag on its registry\n *  - Return the digest as a string\n */\nexport async function getDigest(\n  { registryUrl, lookupName }: GetReleasesConfig,\n  newValue?: string\n): Promise<string | null> {\n  const { registryHost, dockerRepository } = getRegistryRepository(\n    lookupName,\n    registryUrl\n  );\n  logger.debug(`getDigest(${registryHost}, ${dockerRepository}, ${newValue})`);\n  const newTag = newValue || 'latest';\n  const cacheNamespace = 'datasource-docker-digest';\n  const cacheKey = `${registryHost}:${dockerRepository}:${newTag}`;\n  let digest: string = null;\n  try {\n    const cachedResult = await packageCache.get<string>(\n      cacheNamespace,\n      cacheKey\n    );\n    // istanbul ignore if\n    if (cachedResult !== undefined) {\n      return cachedResult;\n    }\n    let manifestResponse = await getManifestResponse(\n      registryHost,\n      dockerRepository,\n      newTag,\n      'head'\n    );\n    if (manifestResponse) {\n      if (hasKey('docker-content-digest', manifestResponse.headers)) {\n        digest = manifestResponse.headers['docker-content-digest'] || null;\n      } else {\n        logger.debug(\n          { registryHost },\n          'Missing docker content digest header, pulling full manifest'\n        );\n        manifestResponse = await getManifestResponse(\n          registryHost,\n          dockerRepository,\n          newTag\n        );\n        digest = extractDigestFromResponseBody(manifestResponse);\n      }\n      logger.debug({ digest }, 'Got docker digest');\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (err instanceof ExternalHostError) {\n      throw err;\n    }\n    logger.debug(\n      {\n        err,\n        lookupName,\n        newTag,\n      },\n      'Unknown Error looking up docker image digest'\n    );\n  }\n  const cacheMinutes = 30;\n  await packageCache.set(cacheNamespace, cacheKey, digest, cacheMinutes);\n  return digest;\n}\n\n/**\n * docker.getReleases\n *\n * A docker image usually looks something like this: somehost.io/owner/repo:8.1.0-alpine\n * In the above:\n *  - 'somehost.io' is the registry\n *  - 'owner/repo' is the package name\n *  - '8.1.0-alpine' is the tag\n *\n * This function will filter only tags that contain a semver version\n */\nexport async function getReleases({\n  lookupName,\n  registryUrl,\n}: GetReleasesConfig): Promise<ReleaseResult | null> {\n  const { registryHost, dockerRepository } = getRegistryRepository(\n    lookupName,\n    registryUrl\n  );\n  const tags = await getTags(registryHost, dockerRepository);\n  if (!tags) {\n    return null;\n  }\n  const releases = tags.map((version) => ({ version }));\n  const ret: ReleaseResult = {\n    registryUrl: registryHost,\n    releases,\n  };\n\n  const latestTag = tags.includes('latest') ? 'latest' : findLatestStable(tags);\n  const labels = await getLabels(registryHost, dockerRepository, latestTag);\n  if (labels && 'org.opencontainers.image.source' in labels) {\n    ret.sourceUrl = labels['org.opencontainers.image.source'];\n  }\n  return ret;\n}\n"]}