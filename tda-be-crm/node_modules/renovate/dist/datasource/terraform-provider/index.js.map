{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/terraform-provider/index.ts"],"names":[],"mappings":"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","sourcesContent":["import pMap from 'p-map';\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport { cache } from '../../util/cache/package/decorator';\nimport { regEx } from '../../util/regex';\nimport { parseUrl } from '../../util/url';\nimport * as hashicorpVersioning from '../../versioning/hashicorp';\nimport { TerraformDatasource } from '../terraform-module/base';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport type {\n  TerraformBuild,\n  TerraformProvider,\n  TerraformProviderReleaseBackend,\n  TerraformRegistryBuildResponse,\n  TerraformRegistryVersions,\n  VersionDetailResponse,\n} from './types';\n\nexport class TerraformProviderDatasource extends TerraformDatasource {\n  static override readonly id = 'terraform-provider';\n\n  static readonly defaultRegistryUrls = [\n    'https://registry.terraform.io',\n    'https://releases.hashicorp.com',\n  ];\n\n  static repositoryRegex = regEx(/^hashicorp\\/(?<lookupName>\\S+)$/);\n\n  constructor() {\n    super(TerraformProviderDatasource.id);\n  }\n\n  override readonly defaultRegistryUrls =\n    TerraformProviderDatasource.defaultRegistryUrls;\n\n  override readonly defaultVersioning = hashicorpVersioning.id;\n\n  override readonly registryStrategy = 'hunt';\n\n  @cache({\n    namespace: `datasource-${TerraformProviderDatasource.id}`,\n    key: (getReleasesConfig: GetReleasesConfig) =>\n      `${\n        getReleasesConfig.registryUrl\n      }/${TerraformProviderDatasource.getRepository(getReleasesConfig)}`,\n  })\n  async getReleases({\n    lookupName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    logger.debug({ lookupName }, 'terraform-provider.getDependencies()');\n    let dep: ReleaseResult = null;\n    const registryHost = parseUrl(registryUrl).host;\n    if (registryHost === 'releases.hashicorp.com') {\n      dep = await this.queryReleaseBackend(lookupName, registryUrl);\n    } else {\n      const repository = TerraformProviderDatasource.getRepository({\n        lookupName,\n      });\n      dep = await this.queryRegistry(registryUrl, repository);\n    }\n\n    return dep;\n  }\n\n  private static getRepository({ lookupName }: GetReleasesConfig): string {\n    return lookupName.includes('/') ? lookupName : `hashicorp/${lookupName}`;\n  }\n\n  private async queryRegistry(\n    registryURL: string,\n    repository: string\n  ): Promise<ReleaseResult> {\n    const serviceDiscovery = await this.getTerraformServiceDiscoveryResult(\n      registryURL\n    );\n    const backendURL = `${registryURL}${serviceDiscovery['providers.v1']}${repository}`;\n    const res = (await this.http.getJson<TerraformProvider>(backendURL)).body;\n    const dep: ReleaseResult = {\n      releases: null,\n    };\n    if (res.source) {\n      dep.sourceUrl = res.source;\n    }\n    dep.releases = res.versions.map((version) => ({\n      version,\n    }));\n    // set published date for latest release\n    const latestVersion = dep.releases.find(\n      (release) => res.version === release.version\n    );\n    // istanbul ignore else\n    if (latestVersion) {\n      latestVersion.releaseTimestamp = res.published_at;\n    }\n    dep.homepage = `${registryURL}/providers/${repository}`;\n    logger.trace({ dep }, 'dep');\n    return dep;\n  }\n\n  // TODO: add long term cache (#9590)\n  private async queryReleaseBackend(\n    lookupName: string,\n    registryURL: string\n  ): Promise<ReleaseResult> {\n    const backendLookUpName = `terraform-provider-${lookupName}`;\n    const backendURL = registryURL + `/index.json`;\n    const res = (\n      await this.http.getJson<TerraformProviderReleaseBackend>(backendURL)\n    ).body;\n\n    if (!res[backendLookUpName]) {\n      return null;\n    }\n\n    const dep: ReleaseResult = {\n      releases: null,\n      sourceUrl: `https://github.com/terraform-providers/${backendLookUpName}`,\n    };\n    dep.releases = Object.keys(res[backendLookUpName].versions).map(\n      (version) => ({\n        version,\n      })\n    );\n    logger.trace({ dep }, 'dep');\n    return dep;\n  }\n\n  @cache({\n    namespace: `datasource-${TerraformProviderDatasource.id}-builds`,\n    key: (registryURL: string, repository: string, version: string) =>\n      `${registryURL}/${repository}/${version}`,\n  })\n  async getBuilds(\n    registryURL: string,\n    repository: string,\n    version: string\n  ): Promise<TerraformBuild[]> {\n    if (registryURL === TerraformProviderDatasource.defaultRegistryUrls[1]) {\n      // check if registryURL === secondary backend\n      const repositoryRegexResult =\n        TerraformProviderDatasource.repositoryRegex.exec(repository);\n      if (!repositoryRegexResult) {\n        // non hashicorp builds are not supported with releases.hashicorp.com\n        return null;\n      }\n      const lookupName = repositoryRegexResult.groups.lookupName;\n      const backendLookUpName = `terraform-provider-${lookupName}`;\n      let versionReleaseBackend: VersionDetailResponse;\n      try {\n        versionReleaseBackend = await this.getReleaseBackendIndex(\n          backendLookUpName,\n          version\n        );\n      } catch (err) {\n        /* istanbul ignore next */\n        if (err instanceof ExternalHostError) {\n          throw err;\n        }\n        logger.debug(\n          { err, backendLookUpName, version },\n          `Failed to retrieve builds for ${backendLookUpName} ${version}`\n        );\n        return null;\n      }\n      return versionReleaseBackend.builds;\n    }\n\n    // check public or private Terraform registry\n    const serviceDiscovery = await this.getTerraformServiceDiscoveryResult(\n      registryURL\n    );\n    if (!serviceDiscovery) {\n      logger.trace(`Failed to retrieve service discovery from ${registryURL}`);\n      return null;\n    }\n    const backendURL = `${registryURL}${serviceDiscovery['providers.v1']}${repository}`;\n    const versionsResponse = (\n      await this.http.getJson<TerraformRegistryVersions>(\n        `${backendURL}/versions`\n      )\n    ).body;\n    if (!versionsResponse.versions) {\n      logger.trace(`Failed to retrieve version list for ${backendURL}`);\n      return null;\n    }\n    const builds = versionsResponse.versions.find(\n      (value) => value.version === version\n    );\n    if (!builds) {\n      logger.trace(\n        `No builds found for ${repository}:${version} on ${registryURL}`\n      );\n      return null;\n    }\n    const result = await pMap(\n      builds.platforms,\n      async (platform) => {\n        const buildURL = `${backendURL}/${version}/download/${platform.os}/${platform.arch}`;\n        try {\n          const res = (\n            await this.http.getJson<TerraformRegistryBuildResponse>(buildURL)\n          ).body;\n          const newBuild: TerraformBuild = {\n            name: repository,\n            url: res.download_url,\n            version,\n            ...res,\n          };\n          return newBuild;\n        } catch (err) {\n          /* istanbul ignore next */\n          if (err instanceof ExternalHostError) {\n            throw err;\n          }\n          logger.debug({ err, url: buildURL }, 'Failed to retrieve build');\n          return null;\n        }\n      },\n      { concurrency: 4 }\n    );\n\n    // if any of the requests to build details have failed, return null\n    if (result.some((value) => Boolean(value) === false)) {\n      return null;\n    }\n\n    return result;\n  }\n\n  @cache({\n    namespace: `datasource-${TerraformProviderDatasource.id}-releaseBackendIndex`,\n    key: (backendLookUpName: string, version: string) =>\n      `${backendLookUpName}/${version}`,\n  })\n  async getReleaseBackendIndex(\n    backendLookUpName: string,\n    version: string\n  ): Promise<VersionDetailResponse> {\n    return (\n      await this.http.getJson<VersionDetailResponse>(\n        `${TerraformProviderDatasource.defaultRegistryUrls[1]}/${backendLookUpName}/${version}/index.json`\n      )\n    ).body;\n  }\n}\n"]}