"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JenkinsPluginsDatasource = void 0;
const tslib_1 = require("tslib");
const logger_1 = require("../../logger");
const decorator_1 = require("../../util/cache/package/decorator");
const clone_1 = require("../../util/clone");
const datasource_1 = require("../datasource");
class JenkinsPluginsDatasource extends datasource_1.Datasource {
    constructor() {
        super(JenkinsPluginsDatasource.id);
        this.defaultRegistryUrls = ['https://updates.jenkins.io'];
        this.registryStrategy = 'hunt';
    }
    async getReleases({ lookupName, }) {
        const plugins = await this.getJenkinsPluginInfo();
        const plugin = plugins[lookupName];
        if (!plugin) {
            return null;
        }
        const result = (0, clone_1.clone)(plugin);
        const versions = await this.getJenkinsPluginVersions();
        const releases = versions[lookupName];
        result.releases = releases ? (0, clone_1.clone)(releases) : [];
        return result;
    }
    async getJenkinsPluginInfo() {
        var _a;
        const { plugins } = await this.getJenkinsUpdateCenterResponse(JenkinsPluginsDatasource.packageInfoUrl);
        const info = {};
        for (const name of Object.keys(plugins !== null && plugins !== void 0 ? plugins : [])) {
            info[name] = {
                releases: [],
                sourceUrl: (_a = plugins[name]) === null || _a === void 0 ? void 0 : _a.scm,
            };
        }
        return info;
    }
    async getJenkinsPluginVersions() {
        const { plugins } = await this.getJenkinsUpdateCenterResponse(JenkinsPluginsDatasource.packageVersionsUrl);
        const versions = {};
        for (const name of Object.keys(plugins !== null && plugins !== void 0 ? plugins : [])) {
            versions[name] = Object.keys(plugins[name]).map((version) => {
                var _a, _b;
                return ({
                    version,
                    downloadUrl: (_a = plugins[name][version]) === null || _a === void 0 ? void 0 : _a.url,
                    releaseTimestamp: ((_b = plugins[name][version]) === null || _b === void 0 ? void 0 : _b.buildDate)
                        ? new Date(`${plugins[name][version].buildDate} UTC`)
                        : null,
                });
            });
        }
        return versions;
    }
    async getJenkinsUpdateCenterResponse(url) {
        let response;
        try {
            logger_1.logger.debug(`jenkins-plugins: Fetching Jenkins plugins from ${url}`);
            const startTime = Date.now();
            response = (await this.http.getJson(url)).body;
            const durationMs = Math.round(Date.now() - startTime);
            logger_1.logger.debug({ durationMs }, `jenkins-plugins: Fetched Jenkins plugins from ${url}`);
        }
        catch (err) /* istanbul ignore next */ {
            this.handleGenericErrors(err);
        }
        return response;
    }
}
JenkinsPluginsDatasource.id = 'jenkins-plugins';
JenkinsPluginsDatasource.packageInfoUrl = 'https://updates.jenkins.io/current/update-center.actual.json';
JenkinsPluginsDatasource.packageVersionsUrl = 'https://updates.jenkins.io/current/plugin-versions.json';
(0, tslib_1.__decorate)([
    (0, decorator_1.cache)({
        namespace: JenkinsPluginsDatasource.id,
        key: 'info',
        ttlMinutes: 1440,
    })
], JenkinsPluginsDatasource.prototype, "getJenkinsPluginInfo", null);
(0, tslib_1.__decorate)([
    (0, decorator_1.cache)({ namespace: JenkinsPluginsDatasource.id, key: 'versions' })
], JenkinsPluginsDatasource.prototype, "getJenkinsPluginVersions", null);
exports.JenkinsPluginsDatasource = JenkinsPluginsDatasource;
//# sourceMappingURL=index.js.map