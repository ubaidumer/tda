"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitTagsDatasource = void 0;
const tslib_1 = require("tslib");
const decorator_1 = require("../../util/cache/package/decorator");
const regex_1 = require("../../util/regex");
const semver = (0, tslib_1.__importStar)(require("../../versioning/semver"));
const datasource_1 = require("../datasource");
const base_1 = require("../git-refs/base");
class GitTagsDatasource extends datasource_1.Datasource {
    constructor() {
        super(GitTagsDatasource.id);
        this.customRegistrySupport = false;
    }
    async getReleases({ lookupName, }) {
        const rawRefs = await base_1.GitDatasource.getRawRefs({ lookupName }, this.id);
        if (rawRefs === null) {
            return null;
        }
        const releases = rawRefs
            .filter((ref) => ref.type === 'tags')
            .filter((ref) => semver.isVersion(ref.value))
            .map((ref) => ({
            version: ref.value,
            gitRef: ref.value,
            newDigest: ref.hash,
        }));
        const sourceUrl = lookupName
            .replace((0, regex_1.regEx)(/\.git$/), '')
            .replace((0, regex_1.regEx)(/\/$/), '');
        const result = {
            sourceUrl,
            releases,
        };
        return result;
    }
    async getDigest({ lookupName }, newValue) {
        const rawRefs = await base_1.GitDatasource.getRawRefs({ lookupName }, this.id);
        const findValue = newValue || 'HEAD';
        const ref = rawRefs.find((rawRef) => rawRef.value === findValue);
        if (ref) {
            return ref.hash;
        }
        return null;
    }
}
GitTagsDatasource.id = 'git-tags';
(0, tslib_1.__decorate)([
    (0, decorator_1.cache)({
        namespace: `datasource-${GitTagsDatasource.id}`,
        key: ({ lookupName }) => lookupName,
    })
], GitTagsDatasource.prototype, "getReleases", null);
exports.GitTagsDatasource = GitTagsDatasource;
//# sourceMappingURL=index.js.map