{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/github-tags/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../logger';\nimport * as packageCache from '../../util/cache/package';\nimport { GithubHttp } from '../../util/http/github';\nimport * as githubReleases from '../github-releases';\nimport { getApiBaseUrl, getSourceUrl } from '../github-releases/common';\nimport type { DigestConfig, GetReleasesConfig, ReleaseResult } from '../types';\nimport type { GitHubTag, TagResponse } from './types';\n\nexport const id = 'github-tags';\nexport const customRegistrySupport = true;\nexport const defaultRegistryUrls = ['https://github.com'];\nexport const registryStrategy = 'first';\n\nconst http = new GithubHttp(id);\n\nconst cacheNamespace = 'datasource-github-tags';\n\nfunction getCacheKey(registryUrl: string, repo: string, type: string): string {\n  return `${registryUrl}:${repo}:${type}`;\n}\n\nasync function getTagCommit(\n  registryUrl: string,\n  githubRepo: string,\n  tag: string\n): Promise<string | null> {\n  const cachedResult = await packageCache.get<string>(\n    cacheNamespace,\n    getCacheKey(registryUrl, githubRepo, `tag-${tag}`)\n  );\n  // istanbul ignore if\n  if (cachedResult) {\n    return cachedResult;\n  }\n\n  const apiBaseUrl = getApiBaseUrl(registryUrl);\n  let digest: string;\n  try {\n    const url = `${apiBaseUrl}repos/${githubRepo}/git/refs/tags/${tag}`;\n    const res = (await http.getJson<TagResponse>(url)).body.object;\n    if (res.type === 'commit') {\n      digest = res.sha;\n    } else if (res.type === 'tag') {\n      digest = (await http.getJson<TagResponse>(res.url)).body.object.sha;\n    } else {\n      logger.warn({ res }, 'Unknown git tag refs type');\n    }\n  } catch (err) {\n    logger.debug(\n      { githubRepo, err },\n      'Error getting tag commit from GitHub repo'\n    );\n  }\n  if (!digest) {\n    return null;\n  }\n  const cacheMinutes = 120;\n  await packageCache.set(\n    cacheNamespace,\n    getCacheKey(registryUrl, githubRepo, `tag-${tag}`),\n    digest,\n    cacheMinutes\n  );\n  return digest;\n}\n\n/**\n * github.getDigest\n *\n * The `newValue` supplied here should be a valid tag for the docker image.\n *\n * This function will simply return the latest commit hash for the configured repository.\n */\nexport async function getDigest(\n  { lookupName: repo, registryUrl }: Partial<DigestConfig>,\n  newValue?: string\n): Promise<string | null> {\n  if (newValue?.length) {\n    return getTagCommit(registryUrl, repo, newValue);\n  }\n  const cachedResult = await packageCache.get<string>(\n    cacheNamespace,\n    getCacheKey(registryUrl, repo, 'commit')\n  );\n  // istanbul ignore if\n  if (cachedResult) {\n    return cachedResult;\n  }\n  const apiBaseUrl = getApiBaseUrl(registryUrl);\n  let digest: string;\n  try {\n    const url = `${apiBaseUrl}repos/${repo}/commits?per_page=1`;\n    const res = await http.getJson<{ sha: string }[]>(url);\n    digest = res.body[0].sha;\n  } catch (err) {\n    logger.debug(\n      { githubRepo: repo, err, registryUrl },\n      'Error getting latest commit from GitHub repo'\n    );\n  }\n  if (!digest) {\n    return null;\n  }\n  const cacheMinutes = 10;\n  await packageCache.set(\n    cacheNamespace,\n    getCacheKey(registryUrl, repo, 'commit'),\n    digest,\n    cacheMinutes\n  );\n  return digest;\n}\n\nasync function getTags({\n  registryUrl,\n  lookupName: repo,\n}: GetReleasesConfig): Promise<ReleaseResult | null> {\n  const cachedResult = await packageCache.get<ReleaseResult>(\n    cacheNamespace,\n    getCacheKey(registryUrl, repo, 'tags')\n  );\n  // istanbul ignore if\n  if (cachedResult) {\n    return cachedResult;\n  }\n\n  const apiBaseUrl = getApiBaseUrl(registryUrl);\n  // tag\n  const url = `${apiBaseUrl}repos/${repo}/tags?per_page=100`;\n\n  const versions = (\n    await http.getJson<GitHubTag[]>(url, {\n      paginate: true,\n    })\n  ).body.map((o) => o.name);\n  const dependency: ReleaseResult = {\n    sourceUrl: getSourceUrl(repo, registryUrl),\n    releases: null,\n  };\n  dependency.releases = versions.map((version) => ({\n    version,\n    gitRef: version,\n  }));\n  const cacheMinutes = 10;\n  await packageCache.set(\n    cacheNamespace,\n    getCacheKey(registryUrl, repo, 'tags'),\n    dependency,\n    cacheMinutes\n  );\n  return dependency;\n}\n\nexport async function getReleases(\n  config: GetReleasesConfig\n): Promise<ReleaseResult | null> {\n  const tagsResult = await getTags(config);\n\n  try {\n    // Fetch additional data from releases endpoint when possible\n    const releasesResult = await githubReleases.getReleases(config);\n    const releaseByVersion = {};\n    releasesResult?.releases?.forEach((release) => {\n      const key = release.version;\n      const value = { ...release };\n      delete value.version;\n      releaseByVersion[key] = value;\n    });\n\n    const mergedReleases = [];\n    tagsResult.releases.forEach((tag) => {\n      const release = releaseByVersion[tag.version];\n      mergedReleases.push({ ...release, ...tag });\n    });\n\n    tagsResult.releases = mergedReleases;\n  } catch (e) {\n    // no-op\n  }\n\n  return tagsResult;\n}\n"]}