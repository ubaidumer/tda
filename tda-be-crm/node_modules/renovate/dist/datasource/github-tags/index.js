"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReleases = exports.getDigest = exports.registryStrategy = exports.defaultRegistryUrls = exports.customRegistrySupport = exports.id = void 0;
const tslib_1 = require("tslib");
const logger_1 = require("../../logger");
const packageCache = (0, tslib_1.__importStar)(require("../../util/cache/package"));
const github_1 = require("../../util/http/github");
const githubReleases = (0, tslib_1.__importStar)(require("../github-releases"));
const common_1 = require("../github-releases/common");
exports.id = 'github-tags';
exports.customRegistrySupport = true;
exports.defaultRegistryUrls = ['https://github.com'];
exports.registryStrategy = 'first';
const http = new github_1.GithubHttp(exports.id);
const cacheNamespace = 'datasource-github-tags';
function getCacheKey(registryUrl, repo, type) {
    return `${registryUrl}:${repo}:${type}`;
}
async function getTagCommit(registryUrl, githubRepo, tag) {
    const cachedResult = await packageCache.get(cacheNamespace, getCacheKey(registryUrl, githubRepo, `tag-${tag}`));
    // istanbul ignore if
    if (cachedResult) {
        return cachedResult;
    }
    const apiBaseUrl = (0, common_1.getApiBaseUrl)(registryUrl);
    let digest;
    try {
        const url = `${apiBaseUrl}repos/${githubRepo}/git/refs/tags/${tag}`;
        const res = (await http.getJson(url)).body.object;
        if (res.type === 'commit') {
            digest = res.sha;
        }
        else if (res.type === 'tag') {
            digest = (await http.getJson(res.url)).body.object.sha;
        }
        else {
            logger_1.logger.warn({ res }, 'Unknown git tag refs type');
        }
    }
    catch (err) {
        logger_1.logger.debug({ githubRepo, err }, 'Error getting tag commit from GitHub repo');
    }
    if (!digest) {
        return null;
    }
    const cacheMinutes = 120;
    await packageCache.set(cacheNamespace, getCacheKey(registryUrl, githubRepo, `tag-${tag}`), digest, cacheMinutes);
    return digest;
}
/**
 * github.getDigest
 *
 * The `newValue` supplied here should be a valid tag for the docker image.
 *
 * This function will simply return the latest commit hash for the configured repository.
 */
async function getDigest({ lookupName: repo, registryUrl }, newValue) {
    if (newValue === null || newValue === void 0 ? void 0 : newValue.length) {
        return getTagCommit(registryUrl, repo, newValue);
    }
    const cachedResult = await packageCache.get(cacheNamespace, getCacheKey(registryUrl, repo, 'commit'));
    // istanbul ignore if
    if (cachedResult) {
        return cachedResult;
    }
    const apiBaseUrl = (0, common_1.getApiBaseUrl)(registryUrl);
    let digest;
    try {
        const url = `${apiBaseUrl}repos/${repo}/commits?per_page=1`;
        const res = await http.getJson(url);
        digest = res.body[0].sha;
    }
    catch (err) {
        logger_1.logger.debug({ githubRepo: repo, err, registryUrl }, 'Error getting latest commit from GitHub repo');
    }
    if (!digest) {
        return null;
    }
    const cacheMinutes = 10;
    await packageCache.set(cacheNamespace, getCacheKey(registryUrl, repo, 'commit'), digest, cacheMinutes);
    return digest;
}
exports.getDigest = getDigest;
async function getTags({ registryUrl, lookupName: repo, }) {
    const cachedResult = await packageCache.get(cacheNamespace, getCacheKey(registryUrl, repo, 'tags'));
    // istanbul ignore if
    if (cachedResult) {
        return cachedResult;
    }
    const apiBaseUrl = (0, common_1.getApiBaseUrl)(registryUrl);
    // tag
    const url = `${apiBaseUrl}repos/${repo}/tags?per_page=100`;
    const versions = (await http.getJson(url, {
        paginate: true,
    })).body.map((o) => o.name);
    const dependency = {
        sourceUrl: (0, common_1.getSourceUrl)(repo, registryUrl),
        releases: null,
    };
    dependency.releases = versions.map((version) => ({
        version,
        gitRef: version,
    }));
    const cacheMinutes = 10;
    await packageCache.set(cacheNamespace, getCacheKey(registryUrl, repo, 'tags'), dependency, cacheMinutes);
    return dependency;
}
async function getReleases(config) {
    var _a;
    const tagsResult = await getTags(config);
    try {
        // Fetch additional data from releases endpoint when possible
        const releasesResult = await githubReleases.getReleases(config);
        const releaseByVersion = {};
        (_a = releasesResult === null || releasesResult === void 0 ? void 0 : releasesResult.releases) === null || _a === void 0 ? void 0 : _a.forEach((release) => {
            const key = release.version;
            const value = { ...release };
            delete value.version;
            releaseByVersion[key] = value;
        });
        const mergedReleases = [];
        tagsResult.releases.forEach((tag) => {
            const release = releaseByVersion[tag.version];
            mergedReleases.push({ ...release, ...tag });
        });
        tagsResult.releases = mergedReleases;
    }
    catch (e) {
        // no-op
    }
    return tagsResult;
}
exports.getReleases = getReleases;
//# sourceMappingURL=index.js.map