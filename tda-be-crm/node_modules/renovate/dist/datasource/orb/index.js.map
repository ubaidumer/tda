{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/orb/index.ts"],"names":[],"mappings":";;;;AAAA,yCAAsC;AACtC,kEAA2D;AAC3D,8CAA2C;AAI3C,MAAM,KAAK,GAAG;;;;;;;;;;;CAWb,CAAC;AAEF,MAAa,aAAc,SAAQ,uBAAU;IAG3C;QACE,KAAK,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;QAGR,0BAAqB,GAAG,KAAK,CAAC;QAE9B,wBAAmB,GAAG,CAAC,uBAAuB,CAAC,CAAC;IAJlE,CAAC;IAUD,KAAK,CAAC,WAAW,CAAC,EAChB,UAAU,EACV,WAAW,GACO;;QAClB,MAAM,GAAG,GAAG,GAAG,WAAW,kBAAkB,CAAC;QAC7C,MAAM,IAAI,GAAG;YACX,KAAK;YACL,SAAS,EAAE,EAAE,UAAU,EAAE;SAC1B,CAAC;QACF,MAAM,GAAG,GAAe,CACtB,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAgC,GAAG,EAAE;YAC3D,IAAI;SACL,CAAC,CACH,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;QAChB,IAAI,CAAC,GAAG,EAAE;YACR,eAAM,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,EAAE,uBAAuB,CAAC,CAAC;YACtD,OAAO,IAAI,CAAC;SACb;QACD,iDAAiD;QACjD,MAAM,GAAG,GAAkB;YACzB,QAAQ,EAAE,IAAI;SACf,CAAC;QACF,IAAI,MAAA,GAAG,CAAC,OAAO,0CAAE,MAAM,EAAE;YACvB,GAAG,CAAC,QAAQ,GAAG,GAAG,CAAC,OAAO,CAAC;SAC5B;QACD,GAAG,CAAC,QAAQ;YACV,GAAG,CAAC,QAAQ,IAAI,2CAA2C,UAAU,EAAE,CAAC;QAC1E,GAAG,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;YAC3D,OAAO;YACP,gBAAgB,EAAE,SAAS,IAAI,IAAI;SACpC,CAAC,CAAC,CAAC;QAEJ,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;QAC7B,OAAO,GAAG,CAAC;IACb,CAAC;;AAhDe,gBAAE,GAAG,KAAK,CAAC;AAc3B;IAJC,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,aAAa,CAAC,EAAE,EAAE;QAC3C,GAAG,EAAE,CAAC,EAAE,UAAU,EAAqB,EAAE,EAAE,CAAC,UAAU;KACvD,CAAC;gDAmCD;AAjDH,sCAkDC","sourcesContent":["import { logger } from '../../logger';\nimport { cache } from '../../util/cache/package/decorator';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport type { OrbRelease } from './types';\n\nconst query = `\nquery($lookupName: String!) {\n  orb(name: $lookupName) {\n    name,\n    homeUrl,\n    versions {\n      version,\n      createdAt\n    }\n  }\n}\n`;\n\nexport class OrbDatasource extends Datasource {\n  static readonly id = 'orb';\n\n  constructor() {\n    super(OrbDatasource.id);\n  }\n\n  override readonly customRegistrySupport = false;\n\n  override readonly defaultRegistryUrls = ['https://circleci.com/'];\n\n  @cache({\n    namespace: `datasource-${OrbDatasource.id}`,\n    key: ({ lookupName }: GetReleasesConfig) => lookupName,\n  })\n  async getReleases({\n    lookupName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const url = `${registryUrl}graphql-unstable`;\n    const body = {\n      query,\n      variables: { lookupName },\n    };\n    const res: OrbRelease = (\n      await this.http.postJson<{ data: { orb: OrbRelease } }>(url, {\n        body,\n      })\n    ).body.data.orb;\n    if (!res) {\n      logger.debug({ lookupName }, 'Failed to look up orb');\n      return null;\n    }\n    // Simplify response before caching and returning\n    const dep: ReleaseResult = {\n      releases: null,\n    };\n    if (res.homeUrl?.length) {\n      dep.homepage = res.homeUrl;\n    }\n    dep.homepage =\n      dep.homepage || `https://circleci.com/developer/orbs/orb/${lookupName}`;\n    dep.releases = res.versions.map(({ version, createdAt }) => ({\n      version,\n      releaseTimestamp: createdAt || null,\n    }));\n\n    logger.trace({ dep }, 'dep');\n    return dep;\n  }\n}\n"]}