"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDatasource = void 0;
const tslib_1 = require("tslib");
const url_1 = (0, tslib_1.__importDefault)(require("url"));
const logger_1 = require("../../logger");
const hostRules = (0, tslib_1.__importStar)(require("../../util/host-rules"));
const regex_1 = require("../../util/regex");
const url_2 = require("../../util/url");
const github = (0, tslib_1.__importStar)(require("../github-tags"));
const gitlab = (0, tslib_1.__importStar)(require("../gitlab-tags"));
const common_1 = require("./common");
const gitlabHttpsRegExp = (0, regex_1.regEx)(/^(?<httpsRegExpUrl>https:\/\/[^/]*gitlab\.[^/]*)\/(?<httpsRegExpName>.+?)[/]?$/);
const gitlabRegExp = (0, regex_1.regEx)(/^(?<regExpUrl>gitlab\.[^/]*)\/(?<regExpPath>.+?)[/]?$/);
async function goGetDatasource(goModule) {
    var _a, _b, _c, _d, _e, _f;
    const pkgUrl = `https://${goModule}?go-get=1`;
    const res = (await common_1.http.get(pkgUrl)).body;
    const sourceMatch = (0, regex_1.regEx)(`<meta\\s+name="go-source"\\s+content="([^\\s]+)\\s+([^\\s]+)`).exec(res);
    if (sourceMatch) {
        const [, prefix, goSourceUrl] = sourceMatch;
        if (!goModule.startsWith(prefix)) {
            logger_1.logger.trace({ goModule }, 'go-source header prefix not match');
            return null;
        }
        logger_1.logger.debug({ goModule, goSourceUrl }, 'Go lookup source url');
        if (goSourceUrl === null || goSourceUrl === void 0 ? void 0 : goSourceUrl.startsWith('https://github.com/')) {
            return {
                datasource: github.id,
                lookupName: goSourceUrl
                    .replace('https://github.com/', '')
                    .replace((0, regex_1.regEx)(/\/$/), ''),
            };
        }
        const gitlabUrl = (_b = (_a = gitlabHttpsRegExp.exec(goSourceUrl)) === null || _a === void 0 ? void 0 : _a.groups) === null || _b === void 0 ? void 0 : _b.httpsRegExpUrl;
        const gitlabUrlName = (_d = (_c = gitlabHttpsRegExp.exec(goSourceUrl)) === null || _c === void 0 ? void 0 : _c.groups) === null || _d === void 0 ? void 0 : _d.httpsRegExpName;
        const gitlabModuleName = (_f = (_e = gitlabRegExp.exec(goModule)) === null || _e === void 0 ? void 0 : _e.groups) === null || _f === void 0 ? void 0 : _f.regExpPath;
        if (gitlabUrl && gitlabUrlName) {
            if (gitlabModuleName === null || gitlabModuleName === void 0 ? void 0 : gitlabModuleName.startsWith(gitlabUrlName)) {
                return {
                    datasource: gitlab.id,
                    registryUrl: gitlabUrl,
                    lookupName: gitlabModuleName,
                };
            }
            return {
                datasource: gitlab.id,
                registryUrl: gitlabUrl,
                lookupName: gitlabUrlName,
            };
        }
        const opts = hostRules.find({
            hostType: "gitlab" /* Gitlab */,
            url: goSourceUrl,
        });
        if (opts.token) {
            // get server base url from import url
            const parsedUrl = url_1.default.parse(goSourceUrl);
            // split the go module from the URL: host/go/module -> go/module
            const split = goModule.split('/');
            const lookupName = split[1] + '/' + split[2];
            const registryUrl = `${parsedUrl.protocol}//${parsedUrl.host}`;
            return {
                datasource: gitlab.id,
                registryUrl,
                lookupName,
            };
        }
    }
    else {
        // GitHub Enterprise only returns a go-import meta
        const importMatch = (0, regex_1.regEx)(`<meta\\s+name="go-import"\\s+content="([^\\s]+)\\s+([^\\s]+)\\s+([^\\s]+)">`).exec(res);
        if (importMatch) {
            const [, prefix, , goImportURL] = importMatch;
            if (!goModule.startsWith(prefix)) {
                logger_1.logger.trace({ goModule }, 'go-import header prefix not match');
                return null;
            }
            logger_1.logger.debug({ goModule, goImportURL }, 'Go lookup import url');
            // get server base url from import url
            const parsedUrl = url_1.default.parse(goImportURL);
            // split the go module from the URL: host/go/module -> go/module
            const lookupName = (0, url_2.trimTrailingSlash)(parsedUrl.pathname)
                .replace((0, regex_1.regEx)(/\.git$/), '')
                .split('/')
                .slice(-2)
                .join('/');
            return {
                datasource: github.id,
                registryUrl: `${parsedUrl.protocol}//${parsedUrl.host}`,
                lookupName,
            };
        }
        logger_1.logger.trace({ goModule }, 'No go-source or go-import header found');
    }
    return null;
}
async function getDatasource(goModule) {
    if (goModule.startsWith('gopkg.in/')) {
        const [pkg] = goModule.replace('gopkg.in/', '').split('.');
        const lookupName = pkg.includes('/') ? pkg : `go-${pkg}/${pkg}`;
        return { datasource: github.id, lookupName };
    }
    if (goModule.startsWith('github.com/')) {
        const split = goModule.split('/');
        const lookupName = split[1] + '/' + split[2];
        return {
            datasource: github.id,
            lookupName,
        };
    }
    if (goModule.startsWith('bitbucket.org/')) {
        const split = goModule.split('/');
        const lookupName = split[1] + '/' + split[2];
        return {
            datasource: common_1.bitbucket.id,
            lookupName,
        };
    }
    const goGetResult = await goGetDatasource(goModule);
    return goGetResult;
}
exports.getDatasource = getDatasource;
//# sourceMappingURL=get-datasource.js.map