"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDigest = void 0;
const tslib_1 = require("tslib");
const github = (0, tslib_1.__importStar)(require("../github-tags"));
const common_1 = require("./common");
const get_datasource_1 = require("./get-datasource");
/**
 * go.getDigest
 *
 * This datasource resolves a go module URL into its source repository
 *  and then fetches the digest it if it is on GitHub.
 *
 * This function will:
 *  - Determine the source URL for the module
 *  - Call the respective getDigest in github to retrieve the commit hash
 */
async function getDigest({ lookupName }, value) {
    const source = await (0, get_datasource_1.getDatasource)(lookupName);
    if (!source) {
        return null;
    }
    // ignore v0.0.0- pseudo versions that are used Go Modules - look up default branch instead
    const tag = value && !value.startsWith('v0.0.0-2') ? value : undefined;
    switch (source.datasource) {
        case github.id: {
            return github.getDigest(source, tag);
        }
        case common_1.bitbucket.id: {
            return common_1.bitbucket.getDigest(source, tag);
        }
        /* istanbul ignore next: can never happen, makes lint happy */
        default: {
            return null;
        }
    }
}
exports.getDigest = getDigest;
//# sourceMappingURL=digest.js.map