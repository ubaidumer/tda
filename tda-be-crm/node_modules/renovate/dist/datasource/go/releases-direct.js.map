{"version":3,"file":"releases-direct.js","sourceRoot":"","sources":["../../../lib/datasource/go/releases-direct.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../logger';\nimport { regEx } from '../../util/regex';\nimport * as github from '../github-tags';\nimport * as gitlab from '../gitlab-tags';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport { bitbucket, getSourceUrl } from './common';\nimport { getDatasource } from './get-datasource';\n\n/**\n * go.getReleases\n *\n * This datasource resolves a go module URL into its source repository\n *  and then fetch it if it is on GitHub.\n *\n * This function will:\n *  - Determine the source URL for the module\n *  - Call the respective getReleases in github/gitlab to retrieve the tags\n *  - Filter module tags according to the module path\n */\nexport async function getReleases(\n  config: GetReleasesConfig\n): Promise<ReleaseResult | null> {\n  const { lookupName } = config;\n\n  let res: ReleaseResult = null;\n\n  logger.trace(`go.getReleases(${lookupName})`);\n  const source = await getDatasource(lookupName);\n\n  if (!source) {\n    logger.info(\n      { lookupName },\n      'Unsupported go host - cannot look up versions'\n    );\n    return null;\n  }\n\n  switch (source.datasource) {\n    case github.id: {\n      res = await github.getReleases(source);\n      break;\n    }\n    case gitlab.id: {\n      res = await gitlab.getReleases(source);\n      break;\n    }\n    case bitbucket.id: {\n      res = await bitbucket.getReleases(source);\n      break;\n    }\n    /* istanbul ignore next: can never happen, makes lint happy */\n    default: {\n      return null;\n    }\n  }\n\n  // istanbul ignore if\n  if (!res) {\n    return null;\n  }\n\n  const sourceUrl = getSourceUrl(source);\n\n  /**\n   * github.com/org/mod/submodule should be tagged as submodule/va.b.c\n   * and that tag should be used instead of just va.b.c, although for compatibility\n   * the old behaviour stays the same.\n   */\n  const nameParts = lookupName.replace(regEx(/\\/v\\d+$/), '').split('/');\n  logger.trace({ nameParts, releases: res.releases }, 'go.getReleases');\n\n  // If it has more than 3 parts it's a submodule or subgroup (gitlab only)\n  if (nameParts.length > 3) {\n    const prefix = nameParts.slice(3, nameParts.length).join('/');\n    logger.trace(`go.getReleases.prefix:${prefix}`);\n\n    // Filter the releases so that we only get the ones that are for this submodule\n    // Also trim the submodule prefix from the version number\n    const submodReleases = res.releases\n      .filter((release) => release.version?.startsWith(prefix))\n      .map((release) => {\n        const r2 = release;\n        r2.version = r2.version.replace(`${prefix}/`, '');\n        return r2;\n      });\n    logger.trace({ submodReleases }, 'go.getReleases');\n\n    // If not from gitlab -> no subgroups -> must be submodule\n    // If from gitlab and directory one level above has tags -> has to be submodule, since groups can't have tags\n    // If not, it's simply a repo in a subfolder, and the normal tags are used.\n    if (\n      !(source.datasource === gitlab.id) ||\n      (source.datasource === gitlab.id && submodReleases.length)\n    ) {\n      return {\n        sourceUrl,\n        releases: submodReleases,\n      };\n    }\n  }\n\n  if (res.releases) {\n    res.releases = res.releases.filter((release) =>\n      release.version?.startsWith('v')\n    );\n  }\n\n  return { ...res, sourceUrl };\n}\n"]}