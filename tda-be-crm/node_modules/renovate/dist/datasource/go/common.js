"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSourceUrl = exports.GoproxyFallback = exports.bitbucket = exports.http = exports.id = void 0;
const http_1 = require("../../util/http");
const bitbucket_tags_1 = require("../bitbucket-tags");
const common_1 = require("../github-releases/common");
const github_tags_1 = require("../github-tags");
const gitlab_tags_1 = require("../gitlab-tags");
const util_1 = require("../gitlab-tags/util");
exports.id = 'go';
exports.http = new http_1.Http(exports.id);
exports.bitbucket = new bitbucket_tags_1.BitBucketTagsDatasource();
var GoproxyFallback;
(function (GoproxyFallback) {
    GoproxyFallback["WhenNotFoundOrGone"] = ",";
    GoproxyFallback["Always"] = "|";
})(GoproxyFallback = exports.GoproxyFallback || (exports.GoproxyFallback = {}));
function getSourceUrl(dataSource) {
    if (dataSource) {
        const { datasource, registryUrl, lookupName } = dataSource;
        if (datasource === github_tags_1.id) {
            return (0, common_1.getSourceUrl)(lookupName, registryUrl);
        }
        if (datasource === gitlab_tags_1.id) {
            return (0, util_1.getSourceUrl)(lookupName, registryUrl);
        }
        if (datasource === exports.bitbucket.id) {
            return bitbucket_tags_1.BitBucketTagsDatasource.getSourceUrl(lookupName, registryUrl);
        }
    }
    // istanbul ignore next
    return undefined;
}
exports.getSourceUrl = getSourceUrl;
//# sourceMappingURL=common.js.map