import type { GetReleasesConfig, Release, ReleaseResult } from '../types';
import type { GoproxyItem } from './types';
/**
 * Parse `GOPROXY` to the sequence of url + fallback strategy tags.
 *
 * @example
 * parseGoproxy('foo.example.com|bar.example.com,baz.example.com')
 * // [
 * //   { url: 'foo.example.com', fallback: '|' },
 * //   { url: 'bar.example.com', fallback: ',' },
 * //   { url: 'baz.example.com', fallback: '|' },
 * // ]
 *
 * @see https://golang.org/ref/mod#goproxy-protocol
 */
export declare function parseGoproxy(input?: string): GoproxyItem[];
export declare function parseNoproxy(input?: unknown): RegExp | null;
/**
 * Avoid ambiguity when serving from case-insensitive file systems.
 *
 * @see https://golang.org/ref/mod#goproxy-protocol
 */
export declare function encodeCase(input: string): string;
export declare function listVersions(baseUrl: string, lookupName: string): Promise<string[]>;
export declare function versionInfo(baseUrl: string, lookupName: string, version: string): Promise<Release>;
export declare function getReleases(config: GetReleasesConfig): Promise<ReleaseResult | null>;
