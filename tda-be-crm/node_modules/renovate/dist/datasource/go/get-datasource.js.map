{"version":3,"file":"get-datasource.js","sourceRoot":"","sources":["../../../lib/datasource/go/get-datasource.ts"],"names":[],"mappings":"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","sourcesContent":["import URL from 'url';\nimport { PlatformId } from '../../constants';\nimport { logger } from '../../logger';\nimport * as hostRules from '../../util/host-rules';\nimport { regEx } from '../../util/regex';\nimport { trimTrailingSlash } from '../../util/url';\nimport * as github from '../github-tags';\nimport * as gitlab from '../gitlab-tags';\nimport { bitbucket, http } from './common';\nimport type { DataSource } from './types';\n\nconst gitlabHttpsRegExp = regEx(\n  /^(?<httpsRegExpUrl>https:\\/\\/[^/]*gitlab\\.[^/]*)\\/(?<httpsRegExpName>.+?)[/]?$/\n);\nconst gitlabRegExp = regEx(\n  /^(?<regExpUrl>gitlab\\.[^/]*)\\/(?<regExpPath>.+?)[/]?$/\n);\n\nasync function goGetDatasource(goModule: string): Promise<DataSource | null> {\n  const pkgUrl = `https://${goModule}?go-get=1`;\n  const res = (await http.get(pkgUrl)).body;\n  const sourceMatch = regEx(\n    `<meta\\\\s+name=\"go-source\"\\\\s+content=\"([^\\\\s]+)\\\\s+([^\\\\s]+)`\n  ).exec(res);\n  if (sourceMatch) {\n    const [, prefix, goSourceUrl] = sourceMatch;\n    if (!goModule.startsWith(prefix)) {\n      logger.trace({ goModule }, 'go-source header prefix not match');\n      return null;\n    }\n    logger.debug({ goModule, goSourceUrl }, 'Go lookup source url');\n    if (goSourceUrl?.startsWith('https://github.com/')) {\n      return {\n        datasource: github.id,\n        lookupName: goSourceUrl\n          .replace('https://github.com/', '')\n          .replace(regEx(/\\/$/), ''),\n      };\n    }\n    const gitlabUrl =\n      gitlabHttpsRegExp.exec(goSourceUrl)?.groups?.httpsRegExpUrl;\n    const gitlabUrlName =\n      gitlabHttpsRegExp.exec(goSourceUrl)?.groups?.httpsRegExpName;\n    const gitlabModuleName = gitlabRegExp.exec(goModule)?.groups?.regExpPath;\n\n    if (gitlabUrl && gitlabUrlName) {\n      if (gitlabModuleName?.startsWith(gitlabUrlName)) {\n        return {\n          datasource: gitlab.id,\n          registryUrl: gitlabUrl,\n          lookupName: gitlabModuleName,\n        };\n      }\n      return {\n        datasource: gitlab.id,\n        registryUrl: gitlabUrl,\n        lookupName: gitlabUrlName,\n      };\n    }\n\n    const opts = hostRules.find({\n      hostType: PlatformId.Gitlab,\n      url: goSourceUrl,\n    });\n    if (opts.token) {\n      // get server base url from import url\n      const parsedUrl = URL.parse(goSourceUrl);\n\n      // split the go module from the URL: host/go/module -> go/module\n      const split = goModule.split('/');\n      const lookupName = split[1] + '/' + split[2];\n\n      const registryUrl = `${parsedUrl.protocol}//${parsedUrl.host}`;\n\n      return {\n        datasource: gitlab.id,\n        registryUrl,\n        lookupName,\n      };\n    }\n  } else {\n    // GitHub Enterprise only returns a go-import meta\n    const importMatch = regEx(\n      `<meta\\\\s+name=\"go-import\"\\\\s+content=\"([^\\\\s]+)\\\\s+([^\\\\s]+)\\\\s+([^\\\\s]+)\">`\n    ).exec(res);\n    if (importMatch) {\n      const [, prefix, , goImportURL] = importMatch;\n      if (!goModule.startsWith(prefix)) {\n        logger.trace({ goModule }, 'go-import header prefix not match');\n        return null;\n      }\n      logger.debug({ goModule, goImportURL }, 'Go lookup import url');\n\n      // get server base url from import url\n      const parsedUrl = URL.parse(goImportURL);\n\n      // split the go module from the URL: host/go/module -> go/module\n      const lookupName = trimTrailingSlash(parsedUrl.pathname)\n        .replace(regEx(/\\.git$/), '')\n        .split('/')\n        .slice(-2)\n        .join('/');\n\n      return {\n        datasource: github.id,\n        registryUrl: `${parsedUrl.protocol}//${parsedUrl.host}`,\n        lookupName,\n      };\n    }\n\n    logger.trace({ goModule }, 'No go-source or go-import header found');\n  }\n  return null;\n}\n\nexport async function getDatasource(\n  goModule: string\n): Promise<DataSource | null> {\n  if (goModule.startsWith('gopkg.in/')) {\n    const [pkg] = goModule.replace('gopkg.in/', '').split('.');\n    const lookupName = pkg.includes('/') ? pkg : `go-${pkg}/${pkg}`;\n    return { datasource: github.id, lookupName };\n  }\n\n  if (goModule.startsWith('github.com/')) {\n    const split = goModule.split('/');\n    const lookupName = split[1] + '/' + split[2];\n    return {\n      datasource: github.id,\n      lookupName,\n    };\n  }\n\n  if (goModule.startsWith('bitbucket.org/')) {\n    const split = goModule.split('/');\n    const lookupName = split[1] + '/' + split[2];\n    return {\n      datasource: bitbucket.id,\n      lookupName,\n    };\n  }\n\n  const goGetResult = await goGetDatasource(goModule);\n  return goGetResult;\n}\n"]}