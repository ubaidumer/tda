{"version":3,"file":"digest.js","sourceRoot":"","sources":["../../../lib/datasource/go/digest.ts"],"names":[],"mappings":";;;;AAAA,oEAAyC;AAEzC,qCAAqC;AACrC,qDAAiD;AAEjD;;;;;;;;;GASG;AACI,KAAK,UAAU,SAAS,CAC7B,EAAE,UAAU,EAAyB,EACrC,KAAc;IAEd,MAAM,MAAM,GAAG,MAAM,IAAA,8BAAa,EAAC,UAAU,CAAC,CAAC;IAC/C,IAAI,CAAC,MAAM,EAAE;QACX,OAAO,IAAI,CAAC;KACb;IAED,2FAA2F;IAC3F,MAAM,GAAG,GAAG,KAAK,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC;IAEvE,QAAQ,MAAM,CAAC,UAAU,EAAE;QACzB,KAAK,MAAM,CAAC,EAAE,CAAC,CAAC;YACd,OAAO,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;SACtC;QACD,KAAK,kBAAS,CAAC,EAAE,CAAC,CAAC;YACjB,OAAO,kBAAS,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;SACzC;QACD,8DAA8D;QAC9D,OAAO,CAAC,CAAC;YACP,OAAO,IAAI,CAAC;SACb;KACF;AACH,CAAC;AAxBD,8BAwBC","sourcesContent":["import * as github from '../github-tags';\nimport type { DigestConfig } from '../types';\nimport { bitbucket } from './common';\nimport { getDatasource } from './get-datasource';\n\n/**\n * go.getDigest\n *\n * This datasource resolves a go module URL into its source repository\n *  and then fetches the digest it if it is on GitHub.\n *\n * This function will:\n *  - Determine the source URL for the module\n *  - Call the respective getDigest in github to retrieve the commit hash\n */\nexport async function getDigest(\n  { lookupName }: Partial<DigestConfig>,\n  value?: string\n): Promise<string | null> {\n  const source = await getDatasource(lookupName);\n  if (!source) {\n    return null;\n  }\n\n  // ignore v0.0.0- pseudo versions that are used Go Modules - look up default branch instead\n  const tag = value && !value.startsWith('v0.0.0-2') ? value : undefined;\n\n  switch (source.datasource) {\n    case github.id: {\n      return github.getDigest(source, tag);\n    }\n    case bitbucket.id: {\n      return bitbucket.getDigest(source, tag);\n    }\n    /* istanbul ignore next: can never happen, makes lint happy */\n    default: {\n      return null;\n    }\n  }\n}\n"]}