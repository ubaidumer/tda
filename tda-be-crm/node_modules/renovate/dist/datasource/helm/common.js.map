{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../lib/datasource/helm/common.ts"],"names":[],"mappings":";;;AAAA,4CAAyC;AAGzC,MAAM,SAAS,GAAG,IAAA,aAAK,EAAC,2BAA2B,CAAC,CAAC;AACrD,MAAM,SAAS,GAAG,IAAA,aAAK,EACrB,+DAA+D,CAChE,CAAC;AACF,MAAM,aAAa,GAAG,IAAA,aAAK,EACzB,oDAAoD,CACrD,CAAC;AAEF,SAAgB,aAAa,CAAC,OAAoB;;IAChD,2BAA2B;IAC3B,IAAI,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAChD,IAAI,KAAK,EAAE;QACT,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;KACjB;IAED,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACrC,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,CAAC,IAAI,CAAC,EAAE;QACtC,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC;KACzB;IAED,IAAI,CAAC,CAAA,MAAA,OAAO,CAAC,OAAO,0CAAE,MAAM,CAAA,EAAE;QAC5B,OAAO,SAAS,CAAC;KAClB;IAED,KAAK,MAAM,GAAG,IAAI,OAAO,CAAC,OAAO,EAAE;QACjC,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC5B,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,CAAC,IAAI,CAAC,EAAE;YACtC,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC;SACzB;KACF;IAED,WAAW;IACX,OAAO,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC;AAzBD,sCAyBC","sourcesContent":["import { regEx } from '../../util/regex';\nimport type { HelmRelease } from './types';\n\nconst chartRepo = regEx(/charts?|helm|helm-charts/i);\nconst githubUrl = regEx(\n  /^(?<url>https:\\/\\/github\\.com\\/[^/]+\\/(?<repo>[^/]+))(?:\\/|$)/\n);\nconst githubRelease = regEx(\n  /^(https:\\/\\/github\\.com\\/[^/]+\\/[^/]+)\\/releases\\//\n);\n\nexport function findSourceUrl(release: HelmRelease): string {\n  // it's a github release :)\n  let match = githubRelease.exec(release.urls[0]);\n  if (match) {\n    return match[1];\n  }\n\n  match = githubUrl.exec(release.home);\n  if (chartRepo.test(match?.groups.repo)) {\n    return match.groups.url;\n  }\n\n  if (!release.sources?.length) {\n    return undefined;\n  }\n\n  for (const url of release.sources) {\n    match = githubUrl.exec(url);\n    if (chartRepo.test(match?.groups.repo)) {\n      return match.groups.url;\n    }\n  }\n\n  // fallback\n  return release.sources[0];\n}\n"]}