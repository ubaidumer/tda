"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReleases = exports.registryStrategy = exports.defaultRegistryUrls = exports.customRegistrySupport = exports.id = void 0;
const tslib_1 = require("tslib");
const packageCache = (0, tslib_1.__importStar)(require("../../util/cache/package"));
const gitlab_1 = require("../../util/http/gitlab");
const url_1 = require("../../util/url");
const util_1 = require("./util");
exports.id = 'gitlab-tags';
const gitlabApi = new gitlab_1.GitlabHttp(exports.id);
exports.customRegistrySupport = true;
exports.defaultRegistryUrls = [util_1.defaultRegistryUrl];
exports.registryStrategy = 'first';
const cacheNamespace = 'datasource-gitlab';
function getCacheKey(depHost, repo) {
    const type = 'tags';
    return `${depHost}:${repo}:${type}`;
}
async function getReleases({ registryUrl, lookupName: repo, }) {
    const depHost = (0, util_1.getDepHost)(registryUrl);
    const cachedResult = await packageCache.get(cacheNamespace, getCacheKey(depHost, repo));
    // istanbul ignore if
    if (cachedResult) {
        return cachedResult;
    }
    const urlEncodedRepo = encodeURIComponent(repo);
    // tag
    const url = (0, url_1.joinUrlParts)(depHost, `api/v4/projects`, urlEncodedRepo, `repository/tags?per_page=100`);
    const gitlabTags = (await gitlabApi.getJson(url, {
        paginate: true,
    })).body;
    const dependency = {
        sourceUrl: (0, util_1.getSourceUrl)(repo, registryUrl),
        releases: null,
    };
    dependency.releases = gitlabTags.map(({ name, commit }) => ({
        version: name,
        gitRef: name,
        releaseTimestamp: commit === null || commit === void 0 ? void 0 : commit.created_at,
    }));
    const cacheMinutes = 10;
    await packageCache.set(cacheNamespace, getCacheKey(depHost, repo), dependency, cacheMinutes);
    return dependency;
}
exports.getReleases = getReleases;
//# sourceMappingURL=index.js.map