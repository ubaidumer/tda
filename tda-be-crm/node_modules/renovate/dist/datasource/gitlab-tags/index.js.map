{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/gitlab-tags/index.ts"],"names":[],"mappings":";;;;AAAA,oFAAyD;AACzD,mDAAoD;AACpD,wCAA8C;AAG9C,iCAAsE;AAEzD,QAAA,EAAE,GAAG,aAAa,CAAC;AAChC,MAAM,SAAS,GAAG,IAAI,mBAAU,CAAC,UAAE,CAAC,CAAC;AAExB,QAAA,qBAAqB,GAAG,IAAI,CAAC;AAC7B,QAAA,mBAAmB,GAAG,CAAC,yBAAkB,CAAC,CAAC;AAC3C,QAAA,gBAAgB,GAAG,OAAO,CAAC;AAExC,MAAM,cAAc,GAAG,mBAAmB,CAAC;AAE3C,SAAS,WAAW,CAAC,OAAe,EAAE,IAAY;IAChD,MAAM,IAAI,GAAG,MAAM,CAAC;IACpB,OAAO,GAAG,OAAO,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;AACtC,CAAC;AAEM,KAAK,UAAU,WAAW,CAAC,EAChC,WAAW,EACX,UAAU,EAAE,IAAI,GACE;IAClB,MAAM,OAAO,GAAG,IAAA,iBAAU,EAAC,WAAW,CAAC,CAAC;IAExC,MAAM,YAAY,GAAG,MAAM,YAAY,CAAC,GAAG,CACzC,cAAc,EACd,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAC3B,CAAC;IACF,qBAAqB;IACrB,IAAI,YAAY,EAAE;QAChB,OAAO,YAAY,CAAC;KACrB;IAED,MAAM,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAEhD,MAAM;IACN,MAAM,GAAG,GAAG,IAAA,kBAAY,EACtB,OAAO,EACP,iBAAiB,EACjB,cAAc,EACd,8BAA8B,CAC/B,CAAC;IAEF,MAAM,UAAU,GAAG,CACjB,MAAM,SAAS,CAAC,OAAO,CAAc,GAAG,EAAE;QACxC,QAAQ,EAAE,IAAI;KACf,CAAC,CACH,CAAC,IAAI,CAAC;IAEP,MAAM,UAAU,GAAkB;QAChC,SAAS,EAAE,IAAA,mBAAY,EAAC,IAAI,EAAE,WAAW,CAAC;QAC1C,QAAQ,EAAE,IAAI;KACf,CAAC;IACF,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC;QAC1D,OAAO,EAAE,IAAI;QACb,MAAM,EAAE,IAAI;QACZ,gBAAgB,EAAE,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,UAAU;KACrC,CAAC,CAAC,CAAC;IAEJ,MAAM,YAAY,GAAG,EAAE,CAAC;IACxB,MAAM,YAAY,CAAC,GAAG,CACpB,cAAc,EACd,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,EAC1B,UAAU,EACV,YAAY,CACb,CAAC;IACF,OAAO,UAAU,CAAC;AACpB,CAAC;AAjDD,kCAiDC","sourcesContent":["import * as packageCache from '../../util/cache/package';\nimport { GitlabHttp } from '../../util/http/gitlab';\nimport { joinUrlParts } from '../../util/url';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport type { GitlabTag } from './types';\nimport { defaultRegistryUrl, getDepHost, getSourceUrl } from './util';\n\nexport const id = 'gitlab-tags';\nconst gitlabApi = new GitlabHttp(id);\n\nexport const customRegistrySupport = true;\nexport const defaultRegistryUrls = [defaultRegistryUrl];\nexport const registryStrategy = 'first';\n\nconst cacheNamespace = 'datasource-gitlab';\n\nfunction getCacheKey(depHost: string, repo: string): string {\n  const type = 'tags';\n  return `${depHost}:${repo}:${type}`;\n}\n\nexport async function getReleases({\n  registryUrl,\n  lookupName: repo,\n}: GetReleasesConfig): Promise<ReleaseResult | null> {\n  const depHost = getDepHost(registryUrl);\n\n  const cachedResult = await packageCache.get<ReleaseResult>(\n    cacheNamespace,\n    getCacheKey(depHost, repo)\n  );\n  // istanbul ignore if\n  if (cachedResult) {\n    return cachedResult;\n  }\n\n  const urlEncodedRepo = encodeURIComponent(repo);\n\n  // tag\n  const url = joinUrlParts(\n    depHost,\n    `api/v4/projects`,\n    urlEncodedRepo,\n    `repository/tags?per_page=100`\n  );\n\n  const gitlabTags = (\n    await gitlabApi.getJson<GitlabTag[]>(url, {\n      paginate: true,\n    })\n  ).body;\n\n  const dependency: ReleaseResult = {\n    sourceUrl: getSourceUrl(repo, registryUrl),\n    releases: null,\n  };\n  dependency.releases = gitlabTags.map(({ name, commit }) => ({\n    version: name,\n    gitRef: name,\n    releaseTimestamp: commit?.created_at,\n  }));\n\n  const cacheMinutes = 10;\n  await packageCache.set(\n    cacheNamespace,\n    getCacheKey(depHost, repo),\n    dependency,\n    cacheMinutes\n  );\n  return dependency;\n}\n"]}