{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/adoptium-java/index.ts"],"names":[],"mappings":";;;;AAAA,yCAAsC;AACtC,gFAA2E;AAC3E,kEAA2D;AAC3D,iDAAkD;AAClD,8CAA2C;AAE3C,qCAKkB;AAGlB,MAAa,sBAAuB,SAAQ,uBAAU;IAGpD;QACE,KAAK,CAAC,mBAAU,CAAC,CAAC;QAGF,0BAAqB,GAAG,KAAK,CAAC;QAE9B,wBAAmB,GAAG,CAAC,2BAAkB,CAAC,CAAC;QAE3C,YAAO,GAAG,IAAI,CAAC;IANjC,CAAC;IAaD,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,EACX,UAAU,GACQ;;QAClB,IAAI,IAAI,GAAG,CAAC,CAAC;QACb,MAAM,SAAS,GAAG,IAAA,qBAAY,EAAC,UAAU,CAAC,CAAC;QAC3C,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,UAAU,EAAE,SAAS,EAAE,EACtC,uBAAuB,CACxB,CAAC;QACF,MAAM,GAAG,GAAG,GAAG,WAAW,sCAAsC,iBAAQ,eAAe,SAAS,+EAA+E,CAAC;QAEhL,MAAM,MAAM,GAAkB;YAC5B,QAAQ,EAAE,sBAAsB;YAChC,QAAQ,EAAE,EAAE;SACb,CAAC;QACF,IAAI,IAA0B,CAAC;QAC/B,IAAI;YACF,GAAG;gBACD,IAAI,GAAG,CACL,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAuB,GAAG,GAAG,SAAS,IAAI,EAAE,CAAC,CACrE,CAAC,IAAI,CAAC;gBACP,MAAM,CAAC,QAAQ,CAAC,IAAI,CAClB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC,CAC5D,CAAC;gBACF,IAAI,IAAI,CAAC,CAAC;aACX,QAAQ,IAAI,GAAG,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,iBAAQ,EAAE;SAC1D;QAAC,OAAO,GAAG,EAAE;YACZ,+CAA+C;YAC/C,IAAI,GAAG,YAAY,iBAAS,EAAE;gBAC5B,IAAI,CAAA,MAAA,GAAG,CAAC,QAAQ,0CAAE,UAAU,MAAK,GAAG,IAAI,IAAI,GAAG,CAAC,EAAE;oBAChD,gBAAgB;oBAChB,OAAO,MAAM,CAAC;iBACf;gBACD,IAAI,CAAA,MAAA,GAAG,CAAC,QAAQ,0CAAE,UAAU,MAAK,GAAG,EAAE;oBACpC,MAAM,IAAI,uCAAiB,CAAC,GAAG,CAAC,CAAC;iBAClC;aACF;YACD,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;SAC/B;QAED,OAAO,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;IAChD,CAAC;;AA3De,yBAAE,GAAG,mBAAU,CAAC;AAiBhC;IALC,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,mBAAU,EAAE;QACrC,GAAG,EAAE,CAAC,EAAE,WAAW,EAAE,UAAU,EAAqB,EAAE,EAAE,CACtD,GAAG,WAAW,IAAI,IAAA,qBAAY,EAAC,UAAU,CAAC,EAAE;KAC/C,CAAC;yDA2CD;AA5DH,wDA6DC","sourcesContent":["import { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport { cache } from '../../util/cache/package/decorator';\nimport { HttpError } from '../../util/http/types';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport {\n  datasource,\n  defaultRegistryUrl,\n  getImageType,\n  pageSize,\n} from './common';\nimport type { AdoptiumJavaResponse } from './types';\n\nexport class AdoptiumJavaDatasource extends Datasource {\n  static readonly id = datasource;\n\n  constructor() {\n    super(datasource);\n  }\n\n  override readonly customRegistrySupport = false;\n\n  override readonly defaultRegistryUrls = [defaultRegistryUrl];\n\n  override readonly caching = true;\n\n  @cache({\n    namespace: `datasource-${datasource}`,\n    key: ({ registryUrl, lookupName }: GetReleasesConfig) =>\n      `${registryUrl}:${getImageType(lookupName)}`,\n  })\n  async getReleases({\n    registryUrl,\n    lookupName,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    let page = 0;\n    const imageType = getImageType(lookupName);\n    logger.trace(\n      { registryUrl, lookupName, imageType },\n      'fetching java release'\n    );\n    const url = `${registryUrl}v3/info/release_versions?page_size=${pageSize}&image_type=${imageType}&project=jdk&release_type=ga&sort_method=DATE&sort_order=DESC&vendor=adoptium`;\n\n    const result: ReleaseResult = {\n      homepage: 'https://adoptium.net',\n      releases: [],\n    };\n    let resp: AdoptiumJavaResponse;\n    try {\n      do {\n        resp = (\n          await this.http.getJson<AdoptiumJavaResponse>(`${url}&page=${page}`)\n        ).body;\n        result.releases.push(\n          ...resp.versions.map(({ semver }) => ({ version: semver }))\n        );\n        page += 1;\n      } while (page < 50 && resp.versions.length === pageSize);\n    } catch (err) {\n      // istanbul ignore else: not testable with nock\n      if (err instanceof HttpError) {\n        if (err.response?.statusCode === 404 && page > 0) {\n          // no more pages\n          return result;\n        }\n        if (err.response?.statusCode !== 404) {\n          throw new ExternalHostError(err);\n        }\n      }\n      this.handleGenericErrors(err);\n    }\n\n    return result.releases.length ? result : null;\n  }\n}\n"]}