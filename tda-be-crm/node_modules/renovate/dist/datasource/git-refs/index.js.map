{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/git-refs/index.ts"],"names":[],"mappings":";;;;AAAA,kEAA2D;AAC3D,4CAAyC;AACzC,6EAAkD;AAClD,8CAA2C;AAE3C,iCAAuC;AAGvC,6EAA6E;AAC7E,OAAO,CAAC,GAAG,CAAC,eAAe,GAAG,sBAAsB,CAAC;AAErD,MAAa,iBAAkB,SAAQ,uBAAU;IAG/C;QACE,KAAK,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;QAGZ,0BAAqB,GAAG,KAAK,CAAC;IAFhD,CAAC;IAQQ,KAAK,CAAC,WAAW,CAAC,EACzB,UAAU,GACQ;QAClB,MAAM,OAAO,GAAc,MAAM,oBAAa,CAAC,UAAU,CACvD,EAAE,UAAU,EAAE,EACd,IAAI,CAAC,EAAE,CACR,CAAC;QAEF,MAAM,IAAI,GAAG,OAAO;aACjB,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,KAAK,MAAM,IAAI,GAAG,CAAC,IAAI,KAAK,OAAO,CAAC;aAC5D,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC;aACvB,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;QAE1C,MAAM,UAAU,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;QAEtC,MAAM,SAAS,GAAG,UAAU;aACzB,OAAO,CAAC,IAAA,aAAK,EAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;aAC5B,OAAO,CAAC,IAAA,aAAK,EAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;QAE7B,MAAM,MAAM,GAAkB;YAC5B,SAAS;YACT,QAAQ,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;gBACjC,OAAO,EAAE,GAAG;gBACZ,MAAM,EAAE,GAAG;gBACX,SAAS,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,KAAK,GAAG,CAAC,CAAC,IAAI;aAC/D,CAAC,CAAC;SACJ,CAAC;QAEF,OAAO,MAAM,CAAC;IAChB,CAAC;IAEQ,KAAK,CAAC,SAAS,CACtB,EAAE,UAAU,EAAgB,EAC5B,QAAiB;QAEjB,MAAM,OAAO,GAAc,MAAM,oBAAa,CAAC,UAAU,CACvD,EAAE,UAAU,EAAE,EACd,IAAI,CAAC,EAAE,CACR,CAAC;QACF,IAAI,GAAY,CAAC;QACjB,IAAI,QAAQ,EAAE;YACZ,GAAG,GAAG,OAAO,CAAC,IAAI,CAChB,CAAC,MAAM,EAAE,EAAE,CACT,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,KAAK,KAAK,QAAQ,CACvE,CAAC;SACH;aAAM;YACL,GAAG,GAAG,OAAO,CAAC,IAAI,CAChB,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,EAAE,IAAI,MAAM,CAAC,KAAK,KAAK,MAAM,CAC1D,CAAC;SACH;QACD,IAAI,GAAG,EAAE;YACP,OAAO,GAAG,CAAC,IAAI,CAAC;SACjB;QACD,OAAO,IAAI,CAAC;IACd,CAAC;;AAlEe,oBAAE,GAAG,UAAU,CAAC;AAYhC;IAJC,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,iBAAiB,CAAC,EAAE,EAAE;QAC/C,GAAG,EAAE,CAAC,EAAE,UAAU,EAAqB,EAAE,EAAE,CAAC,UAAU;KACvD,CAAC;oDA8BD;AA1CH,8CAoEC","sourcesContent":["import { cache } from '../../util/cache/package/decorator';\nimport { regEx } from '../../util/regex';\nimport * as semver from '../../versioning/semver';\nimport { Datasource } from '../datasource';\nimport type { DigestConfig, GetReleasesConfig, ReleaseResult } from '../types';\nimport { GitDatasource } from './base';\nimport type { RawRefs } from './types';\n\n// git will prompt for known hosts or passwords, unless we activate BatchMode\nprocess.env.GIT_SSH_COMMAND = 'ssh -o BatchMode=yes';\n\nexport class GitRefsDatasource extends Datasource {\n  static readonly id = 'git-refs';\n\n  constructor() {\n    super(GitRefsDatasource.id);\n  }\n\n  override readonly customRegistrySupport = false;\n\n  @cache({\n    namespace: `datasource-${GitRefsDatasource.id}`,\n    key: ({ lookupName }: GetReleasesConfig) => lookupName,\n  })\n  override async getReleases({\n    lookupName,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const rawRefs: RawRefs[] = await GitDatasource.getRawRefs(\n      { lookupName },\n      this.id\n    );\n\n    const refs = rawRefs\n      .filter((ref) => ref.type === 'tags' || ref.type === 'heads')\n      .map((ref) => ref.value)\n      .filter((ref) => semver.isVersion(ref));\n\n    const uniqueRefs = [...new Set(refs)];\n\n    const sourceUrl = lookupName\n      .replace(regEx(/\\.git$/), '')\n      .replace(regEx(/\\/$/), '');\n\n    const result: ReleaseResult = {\n      sourceUrl,\n      releases: uniqueRefs.map((ref) => ({\n        version: ref,\n        gitRef: ref,\n        newDigest: rawRefs.find((rawRef) => rawRef.value === ref).hash,\n      })),\n    };\n\n    return result;\n  }\n\n  override async getDigest(\n    { lookupName }: DigestConfig,\n    newValue?: string\n  ): Promise<string | null> {\n    const rawRefs: RawRefs[] = await GitDatasource.getRawRefs(\n      { lookupName },\n      this.id\n    );\n    let ref: RawRefs;\n    if (newValue) {\n      ref = rawRefs.find(\n        (rawRef) =>\n          ['heads', 'tags'].includes(rawRef.type) && rawRef.value === newValue\n      );\n    } else {\n      ref = rawRefs.find(\n        (rawRef) => rawRef.type === '' && rawRef.value === 'HEAD'\n      );\n    }\n    if (ref) {\n      return ref.hash;\n    }\n    return null;\n  }\n}\n"]}