"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitRefsDatasource = void 0;
const tslib_1 = require("tslib");
const decorator_1 = require("../../util/cache/package/decorator");
const regex_1 = require("../../util/regex");
const semver = (0, tslib_1.__importStar)(require("../../versioning/semver"));
const datasource_1 = require("../datasource");
const base_1 = require("./base");
// git will prompt for known hosts or passwords, unless we activate BatchMode
process.env.GIT_SSH_COMMAND = 'ssh -o BatchMode=yes';
class GitRefsDatasource extends datasource_1.Datasource {
    constructor() {
        super(GitRefsDatasource.id);
        this.customRegistrySupport = false;
    }
    async getReleases({ lookupName, }) {
        const rawRefs = await base_1.GitDatasource.getRawRefs({ lookupName }, this.id);
        const refs = rawRefs
            .filter((ref) => ref.type === 'tags' || ref.type === 'heads')
            .map((ref) => ref.value)
            .filter((ref) => semver.isVersion(ref));
        const uniqueRefs = [...new Set(refs)];
        const sourceUrl = lookupName
            .replace((0, regex_1.regEx)(/\.git$/), '')
            .replace((0, regex_1.regEx)(/\/$/), '');
        const result = {
            sourceUrl,
            releases: uniqueRefs.map((ref) => ({
                version: ref,
                gitRef: ref,
                newDigest: rawRefs.find((rawRef) => rawRef.value === ref).hash,
            })),
        };
        return result;
    }
    async getDigest({ lookupName }, newValue) {
        const rawRefs = await base_1.GitDatasource.getRawRefs({ lookupName }, this.id);
        let ref;
        if (newValue) {
            ref = rawRefs.find((rawRef) => ['heads', 'tags'].includes(rawRef.type) && rawRef.value === newValue);
        }
        else {
            ref = rawRefs.find((rawRef) => rawRef.type === '' && rawRef.value === 'HEAD');
        }
        if (ref) {
            return ref.hash;
        }
        return null;
    }
}
GitRefsDatasource.id = 'git-refs';
(0, tslib_1.__decorate)([
    (0, decorator_1.cache)({
        namespace: `datasource-${GitRefsDatasource.id}`,
        key: ({ lookupName }) => lookupName,
    })
], GitRefsDatasource.prototype, "getReleases", null);
exports.GitRefsDatasource = GitRefsDatasource;
//# sourceMappingURL=index.js.map