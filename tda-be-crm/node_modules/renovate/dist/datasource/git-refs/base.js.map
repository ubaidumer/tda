{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../lib/datasource/git-refs/base.ts"],"names":[],"mappings":";;;;AAAA,yEAAmC;AACnC,yCAAsC;AACtC,kEAA2D;AAC3D,kDAAwD;AACxD,4CAA2D;AAC3D,4CAAyC;AAIzC,MAAM,QAAQ,GAAG,IAAA,aAAK,EAAC,iDAAiD,CAAC,CAAC;AAC1E,MAAM,SAAS,GAAG,IAAA,aAAK,EAAC,qBAAqB,CAAC,CAAC;AAE/C,2DAA2D;AAC3D,MAAa,aAAa;IAOxB,MAAM,CAAC,KAAK,CAAC,UAAU,CACrB,EAAE,UAAU,EAAqB,EACjC,QAAgB;QAEhB,MAAM,GAAG,GAAG,IAAA,oBAAS,EAAC,IAAA,wBAAe,GAAE,CAAC,CAAC;QAEzC,oBAAoB;QACpB,MAAM,QAAQ,GAAG,MAAM,GAAG,CAAC,UAAU,CAAC;YACpC,IAAA,2BAAqB,EAAC,UAAU,EAAE,QAAQ,CAAC;SAC5C,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,IAAI,CAAC;SACb;QAED,MAAM,IAAI,GAAG,QAAQ;aAClB,IAAI,EAAE;aACN,KAAK,CAAC,IAAI,CAAC;aACX,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;aAC1B,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YACZ,IAAI,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChC,IAAI,KAAK,EAAE;gBACT,OAAO;oBACL,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,IAAI;oBACvB,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK;oBACzB,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,IAAI;iBACxB,CAAC;aACH;YACD,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC7B,IAAI,KAAK,EAAE;gBACT,OAAO;oBACL,IAAI,EAAE,EAAE;oBACR,KAAK,EAAE,MAAM;oBACb,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,IAAI;iBACxB,CAAC;aACH;YACD,eAAM,CAAC,KAAK,CAAC,kBAAkB,IAAI,EAAE,CAAC,CAAC;YACvC,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;aACD,MAAM,CAAC,OAAO,CAAC;aACf,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,KAAK,MAAM,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QAEtE,OAAO,IAAI,CAAC;IACd,CAAC;;AAhDM,gBAAE,GAAG,KAAK,CAAC;AAMlB;IAJC,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,aAAa,CAAC,EAAE,EAAE;QAC3C,GAAG,EAAE,CAAC,EAAE,UAAU,EAAqB,EAAE,EAAE,CAAC,UAAU;KACvD,CAAC;qCA2CD;AAjDH,sCAkDC","sourcesContent":["import simpleGit from 'simple-git';\nimport { logger } from '../../logger';\nimport { cache } from '../../util/cache/package/decorator';\nimport { simpleGitConfig } from '../../util/git/config';\nimport { getRemoteUrlWithToken } from '../../util/git/url';\nimport { regEx } from '../../util/regex';\nimport type { GetReleasesConfig } from '../types';\nimport type { RawRefs } from './types';\n\nconst refMatch = regEx(/(?<hash>.*?)\\s+refs\\/(?<type>.*?)\\/(?<value>.*)/);\nconst headMatch = regEx(/(?<hash>.*?)\\s+HEAD/);\n\n// TODO: extract to a separate directory structure (#10532)\nexport class GitDatasource {\n  static id = 'git';\n\n  @cache({\n    namespace: `datasource-${GitDatasource.id}`,\n    key: ({ lookupName }: GetReleasesConfig) => lookupName,\n  })\n  static async getRawRefs(\n    { lookupName }: GetReleasesConfig,\n    hostType: string\n  ): Promise<RawRefs[] | null> {\n    const git = simpleGit(simpleGitConfig());\n\n    // fetch remote tags\n    const lsRemote = await git.listRemote([\n      getRemoteUrlWithToken(lookupName, hostType),\n    ]);\n    if (!lsRemote) {\n      return null;\n    }\n\n    const refs = lsRemote\n      .trim()\n      .split('\\n')\n      .map((line) => line.trim())\n      .map((line) => {\n        let match = refMatch.exec(line);\n        if (match) {\n          return {\n            type: match.groups.type,\n            value: match.groups.value,\n            hash: match.groups.hash,\n          };\n        }\n        match = headMatch.exec(line);\n        if (match) {\n          return {\n            type: '',\n            value: 'HEAD',\n            hash: match.groups.hash,\n          };\n        }\n        logger.trace(`malformed ref: ${line}`);\n        return null;\n      })\n      .filter(Boolean)\n      .filter((ref) => ref.type !== 'pull' && !ref.value.endsWith('^{}'));\n\n    return refs;\n  }\n}\n"]}