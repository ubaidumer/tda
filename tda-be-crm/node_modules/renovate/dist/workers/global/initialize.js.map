{"version":3,"file":"initialize.js","sourceRoot":"","sources":["../../../lib/workers/global/initialize.ts"],"names":[],"mappings":";;;;AAAA,yDAAoB;AACpB,qEAA0B;AAC1B,+DAA0B;AAE1B,yCAAsC;AACtC,6CAA8C;AAC9C,oFAAyD;AACzD,4CAAkD;AAClD,qCAA8C;AAE9C,KAAK,UAAU,cAAc,CAAC,KAAgB;IAC5C,MAAM,MAAM,GAAc,EAAE,GAAG,KAAK,EAAE,CAAC;IACvC,OAAO,CAAC,GAAG,CAAC,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,IAAI,YAAE,CAAC,MAAM,EAAE,CAAC;IAChE,IAAI,MAAM,CAAC,OAAO,EAAE;QAClB,eAAM,CAAC,KAAK,CAAC,4BAA4B,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;KAC7D;SAAM;QACL,MAAM,CAAC,OAAO,GAAG,eAAK,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QAC5D,eAAM,CAAC,KAAK,CAAC,iBAAiB,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;KAClD;IACD,MAAM,kBAAE,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACnC,IAAI,MAAM,CAAC,QAAQ,EAAE;QACnB,eAAM,CAAC,KAAK,CAAC,6BAA6B,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;KAC/D;SAAM;QACL,MAAM,CAAC,QAAQ,GAAG,eAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACtD,eAAM,CAAC,KAAK,CAAC,kBAAkB,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;KACpD;IACD,MAAM,kBAAE,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACpC,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,SAAS,kBAAkB,CAAC,MAAsB;IAChD,IAAI,KAAK,GAAG,MAAM,CAAC,oBAAoB,CAAC;IACxC,KAAK,GAAG,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;IAC9D,IAAA,oBAAW,EAAC,cAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AACpC,CAAC;AAEM,KAAK,UAAU,gBAAgB,CACpC,OAAuB;IAEvB,IAAI,MAAM,GAAG,OAAO,CAAC;IACrB,MAAM,GAAG,MAAM,IAAA,uBAAY,EAAC,MAAM,CAAC,CAAC;IACpC,MAAM,GAAG,MAAM,cAAc,CAAC,MAAM,CAAC,CAAC;IACtC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC1B,kBAAkB,CAAC,MAAM,CAAC,CAAC;IAC3B,IAAA,sBAAc,EAAC,MAAM,CAAC,CAAC;IACvB,OAAO,MAAM,CAAC;AAChB,CAAC;AAVD,4CAUC;AAED,SAAgB,cAAc,CAAC,MAAsB;IACnD,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AAC/B,CAAC;AAFD,wCAEC","sourcesContent":["import os from 'os';\nimport fs from 'fs-extra';\nimport upath from 'upath';\nimport type { AllConfig, RenovateConfig } from '../../config/types';\nimport { logger } from '../../logger';\nimport { initPlatform } from '../../platform';\nimport * as packageCache from '../../util/cache/package';\nimport { setEmojiConfig } from '../../util/emoji';\nimport { Limit, setMaxLimit } from './limits';\n\nasync function setDirectories(input: AllConfig): Promise<AllConfig> {\n  const config: AllConfig = { ...input };\n  process.env.TMPDIR = process.env.RENOVATE_TMPDIR || os.tmpdir();\n  if (config.baseDir) {\n    logger.debug('Using configured baseDir: ' + config.baseDir);\n  } else {\n    config.baseDir = upath.join(process.env.TMPDIR, 'renovate');\n    logger.debug('Using baseDir: ' + config.baseDir);\n  }\n  await fs.ensureDir(config.baseDir);\n  if (config.cacheDir) {\n    logger.debug('Using configured cacheDir: ' + config.cacheDir);\n  } else {\n    config.cacheDir = upath.join(config.baseDir, 'cache');\n    logger.debug('Using cacheDir: ' + config.cacheDir);\n  }\n  await fs.ensureDir(config.cacheDir);\n  return config;\n}\n\nfunction limitCommitsPerRun(config: RenovateConfig): void {\n  let limit = config.prCommitsPerRunLimit;\n  limit = typeof limit === 'number' && limit > 0 ? limit : null;\n  setMaxLimit(Limit.Commits, limit);\n}\n\nexport async function globalInitialize(\n  config_: RenovateConfig\n): Promise<RenovateConfig> {\n  let config = config_;\n  config = await initPlatform(config);\n  config = await setDirectories(config);\n  packageCache.init(config);\n  limitCommitsPerRun(config);\n  setEmojiConfig(config);\n  return config;\n}\n\nexport function globalFinalize(config: RenovateConfig): void {\n  packageCache.cleanup(config);\n}\n"]}