{"version":3,"file":"autodiscover.js","sourceRoot":"","sources":["../../../lib/workers/global/autodiscover.ts"],"names":[],"mappings":";;;;AAAA,uEAAkC;AAClC,uEAAkC;AAElC,yCAAsC;AACtC,6CAA0C;AAE1C,uBAAuB;AACvB,SAAS,QAAQ,CAAC,KAAsC;IACtD,OAAO,MAAM,CAAC,YAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,CAAC;AAC3E,CAAC;AAEM,KAAK,UAAU,wBAAwB,CAC5C,MAAiB;;IAEjB,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE;QACxB,IAAI,CAAC,CAAA,MAAA,MAAM,CAAC,YAAY,0CAAE,MAAM,CAAA,EAAE;YAChC,eAAM,CAAC,IAAI,CACT,uEAAuE,CACxE,CAAC;SACH;QACD,OAAO,MAAM,CAAC;KACf;IACD,oCAAoC;IACpC,IAAI,UAAU,GAAG,MAAM,mBAAQ,CAAC,QAAQ,EAAE,CAAC;IAC3C,IAAI,CAAC,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,MAAM,CAAA,EAAE;QACvB,4DAA4D;QAC5D,eAAM,CAAC,KAAK,CACV,0EAA0E,CAC3E,CAAC;QACF,OAAO,MAAM,CAAC;KACf;IACD,IAAI,MAAM,CAAC,kBAAkB,EAAE;QAC7B,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,mBAAS,CAAC,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAC5E,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;YACtB,6EAA6E;YAC7E,eAAM,CAAC,KAAK,CAAC,wDAAwD,CAAC,CAAC;YACvE,OAAO,MAAM,CAAC;SACf;KACF;IACD,eAAM,CAAC,IAAI,CACT,EAAE,MAAM,EAAE,UAAU,CAAC,MAAM,EAAE,YAAY,EAAE,UAAU,EAAE,EACvD,6BAA6B,CAC9B,CAAC;IACF,qBAAqB;IACrB,IAAI,MAAA,MAAM,CAAC,YAAY,0CAAE,MAAM,EAAE;QAC/B,eAAM,CAAC,KAAK,CACV,sEAAsE,CACvE,CAAC;QACF,KAAK,MAAM,cAAc,IAAI,MAAM,CAAC,YAAY,EAAE;YAChD,MAAM,UAAU,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAC;YAC5C,IAAI,KAAK,GAAG,KAAK,CAAC;YAClB,KAAK,IAAI,CAAC,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;gBAClD,IAAI,UAAU,KAAK,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE;oBAC1C,KAAK,GAAG,IAAI,CAAC;oBACb,eAAM,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,EAAE,sCAAsC,CAAC,CAAC;oBACrE,oBAAoB;oBACpB,UAAU,CAAC,CAAC,CAAC,GAAG,cAAuB,CAAC;iBACzC;aACF;YACD,IAAI,CAAC,KAAK,EAAE;gBACV,eAAM,CAAC,IAAI,CACT,EAAE,UAAU,EAAE,EACd,sDAAsD,CACvD,CAAC;aACH;SACF;KACF;IACD,OAAO,EAAE,GAAG,MAAM,EAAE,YAAY,EAAE,UAAU,EAAE,CAAC;AACjD,CAAC;AAzDD,4DAyDC","sourcesContent":["import is from '@sindresorhus/is';\nimport minimatch from 'minimatch';\nimport type { AllConfig } from '../../config/types';\nimport { logger } from '../../logger';\nimport { platform } from '../../platform';\n\n// istanbul ignore next\nfunction repoName(value: string | { repository: string }): string {\n  return String(is.string(value) ? value : value.repository).toLowerCase();\n}\n\nexport async function autodiscoverRepositories(\n  config: AllConfig\n): Promise<AllConfig> {\n  if (!config.autodiscover) {\n    if (!config.repositories?.length) {\n      logger.warn(\n        'No repositories found - did you want to run with flag --autodiscover?'\n      );\n    }\n    return config;\n  }\n  // Autodiscover list of repositories\n  let discovered = await platform.getRepos();\n  if (!discovered?.length) {\n    // Soft fail (no error thrown) if no accessible repositories\n    logger.debug(\n      'The account associated with your token does not have access to any repos'\n    );\n    return config;\n  }\n  if (config.autodiscoverFilter) {\n    discovered = discovered.filter(minimatch.filter(config.autodiscoverFilter));\n    if (!discovered.length) {\n      // Soft fail (no error thrown) if no accessible repositories match the filter\n      logger.debug('None of the discovered repositories matched the filter');\n      return config;\n    }\n  }\n  logger.info(\n    { length: discovered.length, repositories: discovered },\n    `Autodiscovered repositories`\n  );\n  // istanbul ignore if\n  if (config.repositories?.length) {\n    logger.debug(\n      'Checking autodiscovered repositories against configured repositories'\n    );\n    for (const configuredRepo of config.repositories) {\n      const repository = repoName(configuredRepo);\n      let found = false;\n      for (let i = discovered.length - 1; i > -1; i -= 1) {\n        if (repository === repoName(discovered[i])) {\n          found = true;\n          logger.debug({ repository }, 'Using configured repository settings');\n          // TODO: fix typings\n          discovered[i] = configuredRepo as never;\n        }\n      }\n      if (!found) {\n        logger.warn(\n          { repository },\n          'Configured repository is in not in autodiscover list'\n        );\n      }\n    }\n  }\n  return { ...config, repositories: discovered };\n}\n"]}