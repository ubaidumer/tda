{"version":3,"file":"env.js","sourceRoot":"","sources":["../../../../../lib/workers/global/config/parse/env.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { getOptions } from '../../../../config/options';\nimport type { AllConfig, RenovateOptions } from '../../../../config/types';\nimport { PlatformId } from '../../../../constants';\nimport { logger } from '../../../../logger';\n\nfunction normalizePrefixes(\n  env: NodeJS.ProcessEnv,\n  prefix: string | undefined\n): NodeJS.ProcessEnv {\n  const result = { ...env };\n  if (prefix) {\n    for (const [key, val] of Object.entries(result)) {\n      if (key.startsWith(prefix)) {\n        const newKey = key.replace(prefix, 'RENOVATE_');\n        result[newKey] = val;\n        delete result[key];\n      }\n    }\n  }\n  return result;\n}\n\nexport function getEnvName(option: Partial<RenovateOptions>): string {\n  if (option.env === false) {\n    return '';\n  }\n  if (option.env) {\n    return option.env;\n  }\n  const nameWithUnderscores = option.name.replace(/([A-Z])/g, '_$1');\n  return `RENOVATE_${nameWithUnderscores.toUpperCase()}`;\n}\n\nconst renameKeys = {\n  azureAutoComplete: 'platformAutomerge', // migrate: azureAutoComplete\n  gitLabAutomerge: 'platformAutomerge', // migrate: gitLabAutomerge\n};\n\nfunction renameEnvKeys(env: NodeJS.ProcessEnv): NodeJS.ProcessEnv {\n  const result = { ...env };\n  for (const [from, to] of Object.entries(renameKeys)) {\n    const fromKey = getEnvName({ name: from });\n    const toKey = getEnvName({ name: to });\n    if (env[fromKey]) {\n      result[toKey] = env[fromKey];\n      delete result[fromKey];\n    }\n  }\n  return result;\n}\n\nexport function getConfig(inputEnv: NodeJS.ProcessEnv): AllConfig {\n  let env = inputEnv;\n  env = normalizePrefixes(inputEnv, inputEnv.ENV_PREFIX);\n  env = renameEnvKeys(env);\n\n  const options = getOptions();\n\n  let config: AllConfig = {};\n\n  if (env.RENOVATE_CONFIG) {\n    try {\n      config = JSON.parse(env.RENOVATE_CONFIG);\n      logger.debug({ config }, 'Detected config in env RENOVATE_CONFIG');\n    } catch (err) {\n      logger.fatal({ err }, 'Could not parse RENOVATE_CONFIG');\n      process.exit(1);\n    }\n  }\n\n  config.hostRules ||= [];\n\n  const coersions = {\n    boolean: (val: string): boolean => val === 'true',\n    array: (val: string): string[] => val.split(',').map((el) => el.trim()),\n    string: (val: string): string => val.replace(/\\\\n/g, '\\n'),\n    object: (val: string): any => JSON.parse(val),\n    integer: parseInt,\n  };\n\n  options.forEach((option) => {\n    if (option.env !== false) {\n      const envName = getEnvName(option);\n      if (env[envName]) {\n        if (option.type === 'array' && option.subType === 'object') {\n          try {\n            const parsed = JSON.parse(env[envName]);\n            if (is.array(parsed)) {\n              config[option.name] = parsed;\n            } else {\n              logger.debug(\n                { val: env[envName], envName },\n                'Could not parse object array'\n              );\n            }\n          } catch (err) {\n            logger.debug(\n              { val: env[envName], envName },\n              'Could not parse environment variable'\n            );\n          }\n        } else {\n          const coerce = coersions[option.type];\n          config[option.name] = coerce(env[envName]);\n        }\n      }\n    }\n  });\n\n  if (env.GITHUB_COM_TOKEN) {\n    logger.debug(`Converting GITHUB_COM_TOKEN into a global host rule`);\n    config.hostRules.push({\n      hostType: PlatformId.Github,\n      matchHost: 'github.com',\n      token: env.GITHUB_COM_TOKEN,\n    });\n  }\n\n  // These env vars are deprecated and deleted to make sure they're not used\n  const unsupportedEnv = [\n    'BITBUCKET_TOKEN',\n    'BITBUCKET_USERNAME',\n    'BITBUCKET_PASSWORD',\n    'GITHUB_ENDPOINT',\n    'GITHUB_TOKEN',\n    'GITLAB_ENDPOINT',\n    'GITLAB_TOKEN',\n    'VSTS_ENDPOINT',\n    'VSTS_TOKEN',\n  ];\n\n  unsupportedEnv.forEach((val) => delete env[val]);\n\n  return config;\n}\n"]}