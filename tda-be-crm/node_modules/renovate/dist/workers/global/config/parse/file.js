"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfig = void 0;
const tslib_1 = require("tslib");
const upath_1 = (0, tslib_1.__importDefault)(require("upath"));
const migration_1 = require("../../../../config/migration");
const logger_1 = require("../../../../logger");
async function getConfig(env) {
    let configFile = env.RENOVATE_CONFIG_FILE || 'config';
    if (!upath_1.default.isAbsolute(configFile)) {
        configFile = `${process.cwd()}/${configFile}`;
        logger_1.logger.debug('Checking for config file in ' + configFile);
    }
    let config = {};
    try {
        const tmpConfig = await Promise.resolve().then(() => (0, tslib_1.__importStar)(require(configFile)));
        config = tmpConfig.default ? tmpConfig.default : tmpConfig;
    }
    catch (err) {
        // istanbul ignore if
        if (err instanceof SyntaxError || err instanceof TypeError) {
            logger_1.logger.fatal(`Could not parse config file \n ${err.stack}`);
            process.exit(1);
        }
        else if (env.RENOVATE_CONFIG_FILE) {
            logger_1.logger.fatal('No custom config file found on disk');
            process.exit(1);
        }
        else {
            // istanbul ignore next: we can ignore this
            logger_1.logger.debug('No config file found on disk - skipping');
        }
    }
    const { isMigrated, migratedConfig } = (0, migration_1.migrateConfig)(config);
    if (isMigrated) {
        logger_1.logger.warn({ originalConfig: config, migratedConfig }, 'Config needs migrating');
        config = migratedConfig;
    }
    return config;
}
exports.getConfig = getConfig;
//# sourceMappingURL=file.js.map