{"version":3,"file":"host-rules-from-env.js","sourceRoot":"","sources":["../../../../../lib/workers/global/config/parse/host-rules-from-env.ts"],"names":[],"mappings":";;;AAAA,uDAA2D;AAC3D,+CAA4C;AAG5C,SAAgB,gBAAgB,CAAC,GAAsB;IACrD,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,IAAA,8BAAiB,GAAE,CAAC,CAAC;IACjD,MAAM,MAAM,GAAG,CAAC,OAAO,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;IAEjD,MAAM,SAAS,GAAe,EAAE,CAAC;IAEjC,MAAM,cAAc,GAAG,CAAC,aAAa,EAAE,gBAAgB,EAAE,cAAc,CAAC,CAAC;IAEzE,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QAC7C,IAAI,cAAc,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE;YAC/D,eAAM,CAAC,KAAK,CAAC,oBAAoB,GAAG,OAAO,CAAC,CAAC;YAC7C,SAAS;SACV;QACD,oDAAoD;QACpD,MAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACtE,MAAM,QAAQ,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAC;QAClC,IAAI,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YAC7B,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,EAAE,CAAC;YAC9B,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;gBAC3B,IAAI,SAAiB,CAAC;gBACtB,MAAM,IAAI,GAAa,EAAE,CAAC;gBAC1B,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;gBAC5B,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;oBACzB,iBAAiB;iBAClB;qBAAM,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;oBAChC,eAAM,CAAC,IAAI,CAAC,gBAAgB,OAAO,MAAM,CAAC,CAAC;oBAC3C,SAAS;iBACV;qBAAM;oBACL,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;iBAChC;gBACD,MAAM,YAAY,GAAG,SAAS,CAAC,IAAI,CACjC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,QAAQ,KAAK,QAAQ,IAAI,EAAE,CAAC,SAAS,KAAK,SAAS,CAC/D,CAAC;gBACF,eAAM,CAAC,KAAK,CAAC,cAAc,OAAO,0BAA0B,CAAC,CAAC;gBAC9D,IAAI,YAAY,EAAE;oBAChB,qCAAqC;oBACrC,YAAY,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;iBACrC;qBAAM;oBACL,oBAAoB;oBACpB,MAAM,OAAO,GAAa;wBACxB,QAAQ;qBACT,CAAC;oBACF,IAAI,SAAS,EAAE;wBACb,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC;qBAC/B;oBACD,OAAO,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;oBAC/B,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBACzB;aACF;SACF;KACF;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AApDD,4CAoDC","sourcesContent":["import { getDatasourceList } from '../../../../datasource';\nimport { logger } from '../../../../logger';\nimport type { HostRule } from '../../../../types';\n\nexport function hostRulesFromEnv(env: NodeJS.ProcessEnv): HostRule[] {\n  const datasources = new Set(getDatasourceList());\n  const fields = ['token', 'username', 'password'];\n\n  const hostRules: HostRule[] = [];\n\n  const npmEnvPrefixes = ['npm_config_', 'npm_lifecycle_', 'npm_package_'];\n\n  for (const envName of Object.keys(env).sort()) {\n    if (npmEnvPrefixes.some((prefix) => envName.startsWith(prefix))) {\n      logger.trace('Ignoring npm env: ' + envName);\n      continue;\n    }\n    // Double underscore __ is used in place of hyphen -\n    const splitEnv = envName.toLowerCase().replace(/__/g, '-').split('_');\n    const hostType = splitEnv.shift();\n    if (datasources.has(hostType)) {\n      const suffix = splitEnv.pop();\n      if (fields.includes(suffix)) {\n        let matchHost: string;\n        const rule: HostRule = {};\n        rule[suffix] = env[envName];\n        if (splitEnv.length === 0) {\n          // host-less rule\n        } else if (splitEnv.length === 1) {\n          logger.warn(`Cannot parse ${envName} env`);\n          continue;\n        } else {\n          matchHost = splitEnv.join('.');\n        }\n        const existingRule = hostRules.find(\n          (hr) => hr.hostType === hostType && hr.matchHost === matchHost\n        );\n        logger.debug(`Converting ${envName} into a global host rule`);\n        if (existingRule) {\n          // Add current field to existing rule\n          existingRule[suffix] = env[envName];\n        } else {\n          // Create a new rule\n          const newRule: HostRule = {\n            hostType,\n          };\n          if (matchHost) {\n            newRule.matchHost = matchHost;\n          }\n          newRule[suffix] = env[envName];\n          hostRules.push(newRule);\n        }\n      }\n    }\n  }\n  return hostRules;\n}\n"]}