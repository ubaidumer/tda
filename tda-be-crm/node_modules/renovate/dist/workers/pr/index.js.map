{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/workers/pr/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { GlobalConfig } from '../../config/global';\nimport type { RenovateConfig } from '../../config/types';\nimport {\n  PLATFORM_INTEGRATION_UNAUTHORIZED,\n  PLATFORM_RATE_LIMIT_EXCEEDED,\n  REPOSITORY_CHANGED,\n} from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { PlatformPrOptions, Pr, platform } from '../../platform';\nimport { BranchStatus } from '../../types';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport { sampleSize } from '../../util';\nimport { stripEmojis } from '../../util/emoji';\nimport { deleteBranch, getBranchLastCommitTime } from '../../util/git';\nimport { regEx } from '../../util/regex';\nimport * as template from '../../util/template';\nimport { resolveBranchStatus } from '../branch/status-checks';\nimport { Limit, incLimitedValue, isLimitReached } from '../global/limits';\nimport type { BranchConfig, BranchUpgradeConfig, PrBlockedBy } from '../types';\nimport { getPrBody } from './body';\nimport { ChangeLogError } from './changelog/types';\nimport { codeOwnersForPr } from './code-owners';\n\nfunction noWhitespaceOrHeadings(input: string): string {\n  return input.replace(regEx(/\\r?\\n|\\r|\\s|#/g), '');\n}\n\nfunction noLeadingAtSymbol(input: string): string {\n  return input.length && input.startsWith('@') ? input.slice(1) : input;\n}\n\nasync function addCodeOwners(\n  assigneesOrReviewers: string[],\n  pr: Pr\n): Promise<string[]> {\n  return [...new Set(assigneesOrReviewers.concat(await codeOwnersForPr(pr)))];\n}\n\nfunction filterUnavailableUsers(\n  config: RenovateConfig,\n  users: string[]\n): Promise<string[]> {\n  return config.filterUnavailableUsers && platform.filterUnavailableUsers\n    ? platform.filterUnavailableUsers(users)\n    : Promise.resolve(users);\n}\n\nfunction prepareAssigneesReviewers(\n  config: RenovateConfig,\n  usernames: string[]\n): Promise<string[]> {\n  const normalizedUsernames = [...new Set(usernames.map(noLeadingAtSymbol))];\n  return filterUnavailableUsers(config, normalizedUsernames);\n}\n\nexport async function addAssigneesReviewers(\n  config: RenovateConfig,\n  pr: Pr\n): Promise<void> {\n  let assignees = config.assignees;\n  logger.debug(`addAssigneesReviewers(pr=${pr?.number})`);\n  if (config.assigneesFromCodeOwners) {\n    assignees = await addCodeOwners(assignees, pr);\n  }\n  if (assignees.length > 0) {\n    try {\n      assignees = await prepareAssigneesReviewers(config, assignees);\n      if (config.assigneesSampleSize !== null) {\n        assignees = sampleSize(assignees, config.assigneesSampleSize);\n      }\n      if (assignees.length > 0) {\n        // istanbul ignore if\n        if (GlobalConfig.get('dryRun')) {\n          logger.info(`DRY-RUN: Would add assignees to PR #${pr.number}`);\n        } else {\n          await platform.addAssignees(pr.number, assignees);\n          logger.debug({ assignees }, 'Added assignees');\n        }\n      }\n    } catch (err) {\n      logger.debug(\n        { assignees: config.assignees, err },\n        'Failed to add assignees'\n      );\n    }\n  }\n  let reviewers = config.reviewers;\n  if (config.reviewersFromCodeOwners) {\n    reviewers = await addCodeOwners(reviewers, pr);\n  }\n  if (config.additionalReviewers.length > 0) {\n    reviewers = reviewers.concat(config.additionalReviewers);\n  }\n  if (reviewers.length > 0) {\n    try {\n      reviewers = await prepareAssigneesReviewers(config, reviewers);\n      if (config.reviewersSampleSize !== null) {\n        reviewers = sampleSize(reviewers, config.reviewersSampleSize);\n      }\n      if (reviewers.length > 0) {\n        // istanbul ignore if\n        if (GlobalConfig.get('dryRun')) {\n          logger.info(`DRY-RUN: Would add reviewers to PR #${pr.number}`);\n        } else {\n          await platform.addReviewers(pr.number, reviewers);\n          logger.debug({ reviewers }, 'Added reviewers');\n        }\n      }\n    } catch (err) {\n      logger.debug(\n        { reviewers: config.reviewers, err },\n        'Failed to add reviewers'\n      );\n    }\n  }\n}\n\nexport function getPlatformPrOptions(\n  config: RenovateConfig & PlatformPrOptions\n): PlatformPrOptions {\n  const usePlatformAutomerge = Boolean(\n    config.automerge &&\n      (config.automergeType === 'pr' || config.automergeType === 'branch') &&\n      config.platformAutomerge\n  );\n\n  return {\n    azureAutoApprove: config.azureAutoApprove,\n    azureWorkItemId: config.azureWorkItemId,\n    bbUseDefaultReviewers: config.bbUseDefaultReviewers,\n    gitLabIgnoreApprovals: config.gitLabIgnoreApprovals,\n    usePlatformAutomerge,\n  };\n}\n\nexport type ResultWithPr = {\n  pr: Pr;\n  prBlockedBy?: never;\n};\n\nexport type ResultWithoutPr = {\n  pr?: never;\n  prBlockedBy: PrBlockedBy;\n};\n\nexport type EnsurePrResult = ResultWithPr | ResultWithoutPr;\n\n// Ensures that PR exists with matching title/body\nexport async function ensurePr(\n  prConfig: BranchConfig\n): Promise<EnsurePrResult> {\n  let branchStatus: BranchStatus;\n  async function getBranchStatus(): Promise<BranchStatus> {\n    if (branchStatus) {\n      return branchStatus;\n    }\n    branchStatus = await resolveBranchStatus(branchName, ignoreTests);\n    logger.debug(`Branch status is: ${branchStatus}`);\n    return branchStatus;\n  }\n\n  const config: BranchConfig = { ...prConfig };\n\n  logger.trace({ config }, 'ensurePr');\n  // If there is a group, it will use the config of the first upgrade in the array\n  const { branchName, ignoreTests, prTitle, upgrades } = config;\n  const dependencyDashboardCheck = (config.dependencyDashboardChecks || {})[\n    config.branchName\n  ];\n  // Check if existing PR exists\n  const existingPr = await platform.getBranchPr(branchName);\n  if (existingPr) {\n    logger.debug('Found existing PR');\n  }\n  config.upgrades = [];\n\n  if (config.artifactErrors?.length) {\n    logger.debug('Forcing PR because of artifact errors');\n    config.forcePr = true;\n  }\n\n  // Only create a PR if a branch automerge has failed\n  if (\n    config.automerge === true &&\n    config.automergeType.startsWith('branch') &&\n    !config.forcePr\n  ) {\n    logger.debug(`Branch automerge is enabled`);\n    if (\n      config.stabilityStatus !== BranchStatus.yellow &&\n      (await getBranchStatus()) === BranchStatus.yellow\n    ) {\n      logger.debug('Checking how long this branch has been pending');\n      const lastCommitTime = await getBranchLastCommitTime(branchName);\n      const currentTime = new Date();\n      const millisecondsPerHour = 1000 * 60 * 60;\n      const elapsedHours = Math.round(\n        (currentTime.getTime() - lastCommitTime.getTime()) / millisecondsPerHour\n      );\n      if (elapsedHours >= config.prNotPendingHours) {\n        logger.debug('Branch exceeds prNotPending hours - forcing PR creation');\n        config.forcePr = true;\n      }\n    }\n    if (config.forcePr || (await getBranchStatus()) === BranchStatus.red) {\n      logger.debug(`Branch tests failed, so will create PR`);\n    } else {\n      // Branch should be automerged, so we don't want to create a PR\n      return { prBlockedBy: 'BranchAutomerge' };\n    }\n  }\n  if (config.prCreation === 'status-success') {\n    logger.debug('Checking branch combined status');\n    if ((await getBranchStatus()) !== BranchStatus.green) {\n      logger.debug(`Branch status isn't green - not creating PR`);\n      return { prBlockedBy: 'AwaitingTests' };\n    }\n    logger.debug('Branch status success');\n  } else if (\n    config.prCreation === 'approval' &&\n    !existingPr &&\n    dependencyDashboardCheck !== 'approvePr'\n  ) {\n    return { prBlockedBy: 'NeedsApproval' };\n  } else if (\n    config.prCreation === 'not-pending' &&\n    !existingPr &&\n    !config.forcePr\n  ) {\n    logger.debug('Checking branch combined status');\n    if ((await getBranchStatus()) === BranchStatus.yellow) {\n      logger.debug(`Branch status is yellow - checking timeout`);\n      const lastCommitTime = await getBranchLastCommitTime(branchName);\n      const currentTime = new Date();\n      const millisecondsPerHour = 1000 * 60 * 60;\n      const elapsedHours = Math.round(\n        (currentTime.getTime() - lastCommitTime.getTime()) / millisecondsPerHour\n      );\n      if (\n        !dependencyDashboardCheck &&\n        ((config.stabilityStatus &&\n          config.stabilityStatus !== BranchStatus.yellow) ||\n          elapsedHours < config.prNotPendingHours)\n      ) {\n        logger.debug(\n          `Branch is ${elapsedHours} hours old - skipping PR creation`\n        );\n        return {\n          prBlockedBy: 'AwaitingTests',\n        };\n      }\n      const prNotPendingHours = String(config.prNotPendingHours);\n      logger.debug(\n        `prNotPendingHours=${prNotPendingHours} threshold hit - creating PR`\n      );\n    }\n    logger.debug('Branch status success');\n  }\n\n  const processedUpgrades: string[] = [];\n  const commitRepos: string[] = [];\n\n  function getRepoNameWithSourceDirectory(\n    upgrade: BranchUpgradeConfig\n  ): string {\n    return `${upgrade.repoName}${\n      upgrade.sourceDirectory ? `:${upgrade.sourceDirectory}` : ''\n    }`;\n  }\n\n  // Get changelog and then generate template strings\n  for (const upgrade of upgrades) {\n    const upgradeKey = `${upgrade.depType}-${upgrade.depName}-${\n      upgrade.manager\n    }-${upgrade.currentVersion || upgrade.currentValue}-${upgrade.newVersion}`;\n    if (processedUpgrades.includes(upgradeKey)) {\n      continue;\n    }\n    processedUpgrades.push(upgradeKey);\n\n    const logJSON = upgrade.logJSON;\n\n    if (logJSON) {\n      if (typeof logJSON.error === 'undefined') {\n        if (logJSON.project) {\n          upgrade.repoName = logJSON.project.repository;\n        }\n        upgrade.hasReleaseNotes = logJSON.hasReleaseNotes;\n        upgrade.releases = [];\n        if (\n          upgrade.hasReleaseNotes &&\n          upgrade.repoName &&\n          !commitRepos.includes(getRepoNameWithSourceDirectory(upgrade))\n        ) {\n          commitRepos.push(getRepoNameWithSourceDirectory(upgrade));\n          if (logJSON.versions) {\n            logJSON.versions.forEach((version) => {\n              const release = { ...version };\n              upgrade.releases.push(release);\n            });\n          }\n        }\n      } else if (logJSON.error === ChangeLogError.MissingGithubToken) {\n        upgrade.prBodyNotes = [\n          ...upgrade.prBodyNotes,\n          [\n            '\\n',\n            ':warning: Release Notes retrieval for this PR were skipped because no github.com credentials were available.',\n            'If you are self-hosted, please see [this instruction](https://github.com/renovatebot/renovate/blob/master/docs/usage/examples/self-hosting.md#githubcom-token-for-release-notes).',\n            '\\n',\n          ].join('\\n'),\n        ];\n      }\n    }\n    config.upgrades.push(upgrade);\n  }\n\n  config.hasReleaseNotes = config.upgrades.some((upg) => upg.hasReleaseNotes);\n\n  const releaseNotesSources: string[] = [];\n  for (const upgrade of config.upgrades) {\n    const notesSourceUrl =\n      upgrade.releases?.[0]?.releaseNotes?.notesSourceUrl || upgrade.sourceUrl;\n\n    if (upgrade.hasReleaseNotes && notesSourceUrl) {\n      if (releaseNotesSources.includes(notesSourceUrl)) {\n        logger.debug(\n          { depName: upgrade.depName },\n          'Removing duplicate release notes'\n        );\n        upgrade.hasReleaseNotes = false;\n      } else {\n        releaseNotesSources.push(notesSourceUrl);\n      }\n    }\n  }\n\n  const prBody = await getPrBody(config);\n\n  try {\n    if (existingPr) {\n      logger.debug('Processing existing PR');\n      // istanbul ignore if\n      if (\n        !existingPr.hasAssignees &&\n        !existingPr.hasReviewers &&\n        config.automerge &&\n        (await getBranchStatus()) === BranchStatus.red\n      ) {\n        logger.debug(`Setting assignees and reviewers as status checks failed`);\n        await addAssigneesReviewers(config, existingPr);\n      }\n      // Check if existing PR needs updating\n      const reviewableIndex = existingPr.body.indexOf(\n        '<!-- Reviewable:start -->'\n      );\n      let existingPrBody = existingPr.body;\n      if (reviewableIndex > -1) {\n        logger.debug('Stripping Reviewable content');\n        existingPrBody = existingPrBody.slice(0, reviewableIndex);\n      }\n      const existingPrTitle = stripEmojis(existingPr.title);\n      const newPrTitle = stripEmojis(prTitle);\n      existingPrBody = existingPrBody.trim();\n      if (\n        existingPrTitle === newPrTitle &&\n        noWhitespaceOrHeadings(stripEmojis(existingPrBody)) ===\n          noWhitespaceOrHeadings(stripEmojis(prBody))\n      ) {\n        logger.debug(`${existingPr.displayNumber} does not need updating`);\n        return { pr: existingPr };\n      }\n      // PR must need updating\n      if (existingPrTitle !== newPrTitle) {\n        logger.debug(\n          {\n            branchName,\n            oldPrTitle: existingPr.title,\n            newPrTitle: prTitle,\n          },\n          'PR title changed'\n        );\n      } else if (!config.committedFiles && !config.rebaseRequested) {\n        logger.debug(\n          {\n            prTitle,\n          },\n          'PR body changed'\n        );\n      }\n      // istanbul ignore if\n      if (GlobalConfig.get('dryRun')) {\n        logger.info(`DRY-RUN: Would update PR #${existingPr.number}`);\n      } else {\n        await platform.updatePr({\n          number: existingPr.number,\n          prTitle,\n          prBody,\n          platformOptions: getPlatformPrOptions(config),\n        });\n        logger.info({ pr: existingPr.number, prTitle }, `PR updated`);\n      }\n      return {\n        pr: existingPr,\n      };\n    }\n    logger.debug({ branch: branchName, prTitle }, `Creating PR`);\n    // istanbul ignore if\n    if (config.updateType === 'rollback') {\n      logger.info('Creating Rollback PR');\n    }\n    let pr: Pr;\n    try {\n      // istanbul ignore if\n      if (GlobalConfig.get('dryRun')) {\n        logger.info('DRY-RUN: Would create PR: ' + prTitle);\n        pr = { number: 0, displayNumber: 'Dry run PR' } as never;\n      } else {\n        if (\n          !dependencyDashboardCheck &&\n          isLimitReached(Limit.PullRequests) &&\n          !config.isVulnerabilityAlert\n        ) {\n          logger.debug('Skipping PR - limit reached');\n          return { prBlockedBy: 'RateLimited' };\n        }\n        pr = await platform.createPr({\n          sourceBranch: branchName,\n          targetBranch: config.baseBranch,\n          prTitle,\n          prBody,\n          labels: [...new Set([...config.labels, ...config.addLabels])].map(\n            (label) => template.compile(label, config)\n          ),\n          platformOptions: getPlatformPrOptions(config),\n          draftPR: config.draftPR,\n        });\n        incLimitedValue(Limit.PullRequests);\n        logger.info({ pr: pr.number, prTitle }, 'PR created');\n      }\n    } catch (err) /* istanbul ignore next */ {\n      logger.debug({ err }, 'Pull request creation error');\n      if (\n        err.body?.message === 'Validation failed' &&\n        err.body.errors?.length &&\n        err.body.errors.some((error: { message?: string }) =>\n          error.message?.startsWith('A pull request already exists')\n        )\n      ) {\n        logger.warn('A pull requests already exists');\n        return { prBlockedBy: 'Error' };\n      }\n      if (err.statusCode === 502) {\n        logger.warn(\n          { branch: branchName },\n          'Deleting branch due to server error'\n        );\n        if (GlobalConfig.get('dryRun')) {\n          logger.info('DRY-RUN: Would delete branch: ' + config.branchName);\n        } else {\n          await deleteBranch(branchName);\n        }\n      }\n      return { prBlockedBy: 'Error' };\n    }\n    if (\n      config.branchAutomergeFailureMessage &&\n      !config.suppressNotifications.includes('branchAutomergeFailure')\n    ) {\n      const topic = 'Branch automerge failure';\n      let content =\n        'This PR was configured for branch automerge, however this is not possible so it has been raised as a PR instead.';\n      if (config.branchAutomergeFailureMessage === 'branch status error') {\n        content += '\\n___\\n * Branch has one or more failed status checks';\n      }\n      content = platform.massageMarkdown(content);\n      logger.debug('Adding branch automerge failure message to PR');\n      // istanbul ignore if\n      if (GlobalConfig.get('dryRun')) {\n        logger.info(`DRY-RUN: Would add comment to PR #${pr.number}`);\n      } else {\n        await platform.ensureComment({\n          number: pr.number,\n          topic,\n          content,\n        });\n      }\n    }\n    // Skip assign and review if automerging PR\n    if (\n      config.automerge &&\n      !config.assignAutomerge &&\n      (await getBranchStatus()) !== BranchStatus.red\n    ) {\n      logger.debug(\n        `Skipping assignees and reviewers as automerge=${config.automerge}`\n      );\n    } else {\n      await addAssigneesReviewers(config, pr);\n    }\n    logger.debug(`Created ${pr.displayNumber}`);\n    return { pr };\n  } catch (err) {\n    // istanbul ignore if\n    if (\n      err instanceof ExternalHostError ||\n      err.message === REPOSITORY_CHANGED ||\n      err.message === PLATFORM_RATE_LIMIT_EXCEEDED ||\n      err.message === PLATFORM_INTEGRATION_UNAUTHORIZED\n    ) {\n      logger.debug('Passing error up');\n      throw err;\n    }\n    logger.error({ err }, 'Failed to ensure PR: ' + prTitle);\n  }\n  if (existingPr) {\n    return { pr: existingPr };\n  }\n  // istanbul ignore next\n  return { prBlockedBy: 'Error' };\n}\n"]}