{"version":3,"file":"automerge.js","sourceRoot":"","sources":["../../../lib/workers/pr/automerge.ts"],"names":[],"mappings":"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","sourcesContent":["import { GlobalConfig } from '../../config/global';\nimport { logger } from '../../logger';\nimport { Pr, platform } from '../../platform';\nimport { BranchStatus } from '../../types';\nimport { deleteBranch, isBranchModified } from '../../util/git';\nimport { resolveBranchStatus } from '../branch/status-checks';\nimport { BranchConfig } from '../types';\n\nexport enum PrAutomergeBlockReason {\n  BranchModified = 'BranchModified',\n  BranchNotGreen = 'BranchNotGreen',\n  Conflicted = 'Conflicted',\n  DryRun = 'DryRun',\n  PlatformNotReady = 'PlatformNotReady',\n  PlatformRejection = 'PlatformRejection',\n}\n\nexport type AutomergePrResult = {\n  automerged: boolean;\n  branchRemoved?: boolean;\n  prAutomergeBlockReason?: PrAutomergeBlockReason;\n};\n\nexport async function checkAutoMerge(\n  pr: Pr,\n  config: BranchConfig\n): Promise<AutomergePrResult> {\n  logger.trace({ config }, 'checkAutoMerge');\n  const {\n    branchName,\n    automergeType,\n    automergeStrategy,\n    automergeComment,\n    ignoreTests,\n    rebaseRequested,\n  } = config;\n  // Return if PR not ready for automerge\n  if (pr.isConflicted) {\n    logger.debug('PR is conflicted');\n    return {\n      automerged: false,\n      prAutomergeBlockReason: PrAutomergeBlockReason.Conflicted,\n    };\n  }\n  if (!ignoreTests && pr.canMerge !== true) {\n    logger.debug(\n      { canMergeReason: pr.canMergeReason },\n      'PR is not ready for merge'\n    );\n    return {\n      automerged: false,\n      prAutomergeBlockReason: PrAutomergeBlockReason.PlatformNotReady,\n    };\n  }\n  const branchStatus = await resolveBranchStatus(\n    config.branchName,\n    config.ignoreTests\n  );\n  if (branchStatus !== BranchStatus.green) {\n    logger.debug(\n      `PR is not ready for merge (branch status is ${branchStatus})`\n    );\n    return {\n      automerged: false,\n      prAutomergeBlockReason: PrAutomergeBlockReason.BranchNotGreen,\n    };\n  }\n  // Check if it's been touched\n  if (await isBranchModified(branchName)) {\n    logger.debug('PR is ready for automerge but has been modified');\n    return {\n      automerged: false,\n      prAutomergeBlockReason: PrAutomergeBlockReason.BranchModified,\n    };\n  }\n  if (automergeType === 'pr-comment') {\n    logger.debug(`Applying automerge comment: ${automergeComment}`);\n    // istanbul ignore if\n    if (GlobalConfig.get('dryRun')) {\n      logger.info(\n        `DRY-RUN: Would add PR automerge comment to PR #${pr.number}`\n      );\n      return {\n        automerged: false,\n        prAutomergeBlockReason: PrAutomergeBlockReason.DryRun,\n      };\n    }\n    if (rebaseRequested) {\n      await platform.ensureCommentRemoval({\n        number: pr.number,\n        content: automergeComment,\n      });\n    }\n    await platform.ensureComment({\n      number: pr.number,\n      topic: null,\n      content: automergeComment,\n    });\n    return { automerged: true, branchRemoved: false };\n  }\n  // Let's merge this\n  // istanbul ignore if\n  if (GlobalConfig.get('dryRun')) {\n    logger.info(\n      `DRY-RUN: Would merge PR #${pr.number} with strategy \"${automergeStrategy}\"`\n    );\n    return {\n      automerged: false,\n      prAutomergeBlockReason: PrAutomergeBlockReason.DryRun,\n    };\n  }\n  logger.debug(`Automerging #${pr.number} with strategy ${automergeStrategy}`);\n  const res = await platform.mergePr({\n    branchName,\n    id: pr.number,\n    strategy: automergeStrategy,\n  });\n  if (res) {\n    logger.info({ pr: pr.number, prTitle: pr.title }, 'PR automerged');\n    let branchRemoved = false;\n    try {\n      await deleteBranch(branchName);\n      branchRemoved = true;\n    } catch (err) /* istanbul ignore next */ {\n      logger.warn({ branchName, err }, 'Branch auto-remove failed');\n    }\n    return { automerged: true, branchRemoved };\n  }\n  return {\n    automerged: false,\n    prAutomergeBlockReason: PrAutomergeBlockReason.PlatformRejection,\n  };\n}\n"]}