{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/workers/pr/body/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { platform } from '../../../platform';\nimport { regEx } from '../../../util/regex';\nimport * as template from '../../../util/template';\nimport type { BranchConfig } from '../../types';\nimport { getChangelogs } from './changelogs';\nimport { getPrConfigDescription } from './config-description';\nimport { getControls } from './controls';\nimport { getPrFooter } from './footer';\nimport { getPrHeader } from './header';\nimport { getPrExtraNotes, getPrNotes } from './notes';\nimport { getPrUpdatesTable } from './updates-table';\n\nfunction massageUpdateMetadata(config: BranchConfig): void {\n  config.upgrades.forEach((upgrade) => {\n    const {\n      homepage,\n      sourceUrl,\n      sourceDirectory,\n      changelogUrl,\n      dependencyUrl,\n    } = upgrade;\n    let depNameLinked = upgrade.depName;\n    const primaryLink = homepage || sourceUrl || dependencyUrl;\n    if (primaryLink) {\n      depNameLinked = `[${depNameLinked}](${primaryLink})`;\n    }\n    const otherLinks = [];\n    if (homepage && sourceUrl) {\n      otherLinks.push(`[source](${sourceUrl})`);\n    }\n    if (changelogUrl) {\n      otherLinks.push(`[changelog](${changelogUrl})`);\n    }\n    if (otherLinks.length) {\n      depNameLinked += ` (${otherLinks.join(', ')})`;\n    }\n    upgrade.depNameLinked = depNameLinked;\n    const references: string[] = [];\n    if (homepage) {\n      references.push(`[homepage](${homepage})`);\n    }\n    if (sourceUrl) {\n      let fullUrl = sourceUrl;\n      if (sourceDirectory) {\n        fullUrl =\n          sourceUrl.replace(regEx(/\\/?$/), '/') +\n          'tree/HEAD/' +\n          sourceDirectory.replace('^/?/', '');\n      }\n      references.push(`[source](${fullUrl})`);\n    }\n    if (changelogUrl) {\n      references.push(`[changelog](${changelogUrl})`);\n    }\n    upgrade.references = references.join(', ');\n  });\n}\n\nexport async function getPrBody(config: BranchConfig): Promise<string> {\n  massageUpdateMetadata(config);\n  const content = {\n    header: getPrHeader(config),\n    table: getPrUpdatesTable(config),\n    notes: getPrNotes(config) + getPrExtraNotes(config),\n    changelogs: getChangelogs(config),\n    configDescription: await getPrConfigDescription(config),\n    controls: await getControls(config),\n    footer: getPrFooter(config),\n  };\n  const prBodyTemplate = config.prBodyTemplate;\n  let prBody = template.compile(prBodyTemplate, content, false);\n  prBody = prBody.trim();\n  prBody = prBody.replace(regEx(/\\n\\n\\n+/g), '\\n\\n');\n  prBody = platform.massageMarkdown(prBody);\n  return prBody;\n}\n"]}