{"version":3,"file":"updates-table.js","sourceRoot":"","sources":["../../../../lib/workers/pr/body/updates-table.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { regEx } from '../../../util/regex';\nimport * as template from '../../../util/template';\nimport type { BranchConfig } from '../../types';\n\ntype TableDefinition = {\n  header: string;\n  value: string;\n};\n\nfunction getTableDefinition(config: BranchConfig): TableDefinition[] {\n  const res: TableDefinition[] = [];\n  for (const header of config.prBodyColumns) {\n    const value = config.prBodyDefinitions[header];\n    res.push({ header, value });\n  }\n  return res;\n}\n\nfunction getNonEmptyColumns(\n  definitions: TableDefinition[],\n  rows: Record<string, string>[]\n): string[] {\n  const res: string[] = [];\n  for (const column of definitions) {\n    const { header } = column;\n    for (const row of rows) {\n      if (row[header]?.length) {\n        if (!res.includes(header)) {\n          res.push(header);\n        }\n      }\n    }\n  }\n  return res;\n}\n\nexport function getPrUpdatesTable(config: BranchConfig): string {\n  const tableDefinitions = getTableDefinition(config);\n  const tableValues = config.upgrades.map((upgrade) => {\n    const res: Record<string, string> = {};\n    for (const column of tableDefinitions) {\n      const { header, value } = column;\n      try {\n        // istanbul ignore else\n        if (value) {\n          res[header] = template\n            .compile(value, upgrade)\n            .replace(regEx(/^``$/), ''); // TODO #12071\n        } else {\n          res[header] = '';\n        }\n      } catch (err) /* istanbul ignore next */ {\n        logger.warn({ header, value, err }, 'Handlebars compilation error');\n      }\n    }\n    return res;\n  });\n  const tableColumns = getNonEmptyColumns(tableDefinitions, tableValues);\n  let res = '\\n\\nThis PR contains the following updates:\\n\\n';\n  res += '| ' + tableColumns.join(' | ') + ' |\\n';\n  res += '|' + tableColumns.map(() => '---|').join('') + '\\n';\n  const rows = [];\n  for (const row of tableValues) {\n    let val = '|';\n    for (const column of tableColumns) {\n      const content = row[column]\n        ? row[column]\n            .replace(regEx(/^@/), '@&#8203;')\n            .replace(regEx(/\\|/g), '\\\\|') // TODO #12071\n        : '';\n      val += ` ${content} |`;\n    }\n    val += '\\n';\n    rows.push(val);\n  }\n  const uniqueRows = [...new Set(rows)];\n  res += uniqueRows.join('');\n  res += '\\n\\n';\n  return res;\n}\n"]}