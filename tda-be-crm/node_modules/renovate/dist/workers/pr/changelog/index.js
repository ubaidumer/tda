"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getChangeLogJSON = void 0;
const tslib_1 = require("tslib");
const logger_1 = require("../../../logger");
const allVersioning = (0, tslib_1.__importStar)(require("../../../versioning"));
const releases_1 = require("./releases");
const sourceGithub = (0, tslib_1.__importStar)(require("./source-github"));
const sourceGitlab = (0, tslib_1.__importStar)(require("./source-gitlab"));
(0, tslib_1.__exportStar)(require("./types"), exports);
async function getChangeLogJSON(args) {
    var _a;
    const { sourceUrl, versioning, currentVersion, newVersion } = args;
    try {
        if (!(sourceUrl && currentVersion && newVersion)) {
            return null;
        }
        const version = allVersioning.get(versioning);
        if (version.equals(currentVersion, newVersion)) {
            return null;
        }
        logger_1.logger.debug(`Fetching changelog: ${sourceUrl} (${currentVersion} -> ${newVersion})`);
        const releases = args.releases || (await (0, releases_1.getInRangeReleases)(args));
        let res = null;
        if (((_a = args.sourceUrl) === null || _a === void 0 ? void 0 : _a.includes('gitlab')) ||
            (args.platform === 'gitlab' &&
                new URL(args.sourceUrl).hostname === new URL(args.endpoint).hostname)) {
            res = await sourceGitlab.getChangeLogJSON({ ...args, releases });
        }
        else {
            res = await sourceGithub.getChangeLogJSON({ ...args, releases });
        }
        return res;
    }
    catch (err) /* istanbul ignore next */ {
        logger_1.logger.error({ config: args, err }, 'getChangeLogJSON error');
        return null;
    }
}
exports.getChangeLogJSON = getChangeLogJSON;
//# sourceMappingURL=index.js.map