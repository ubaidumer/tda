{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../lib/workers/pr/changelog/gitlab/index.ts"],"names":[],"mappings":"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","sourcesContent":["import changelogFilenameRegex from 'changelog-filename-regex';\nimport type { GitlabRelease } from '../../../../datasource/gitlab-releases/types';\nimport type { GitlabTag } from '../../../../datasource/gitlab-tags/types';\nimport { logger } from '../../../../logger';\nimport type { GitlabTreeNode } from '../../../../types/platform/gitlab';\nimport { GitlabHttp } from '../../../../util/http/gitlab';\nimport { regEx } from '../../../../util/regex';\nimport { ensureTrailingSlash } from '../../../../util/url';\nimport type { ChangeLogFile, ChangeLogNotes } from '../types';\n\nconst http = new GitlabHttp();\n\nfunction getRepoId(repository: string): string {\n  return repository.replace(regEx(/\\//g), '%2f');\n}\n\nexport async function getTags(\n  endpoint: string,\n  repository: string\n): Promise<string[]> {\n  logger.trace('gitlab.getTags()');\n  const url = `${ensureTrailingSlash(endpoint)}projects/${getRepoId(\n    repository\n  )}/repository/tags?per_page=100`;\n  try {\n    const res = await http.getJson<GitlabTag[]>(url, {\n      paginate: true,\n    });\n\n    const tags = res.body;\n\n    if (!tags.length) {\n      logger.debug({ sourceRepo: repository }, 'repository has no Gitlab tags');\n    }\n\n    return tags.map((tag) => tag.name).filter(Boolean);\n  } catch (err) {\n    logger.debug(\n      { sourceRepo: repository, err },\n      'Failed to fetch Gitlab tags'\n    );\n    // istanbul ignore if\n    if (err.message?.includes('Bad credentials')) {\n      logger.warn('Bad credentials triggering tag fail lookup in changelog');\n      throw err;\n    }\n    return [];\n  }\n}\n\nexport async function getReleaseNotesMd(\n  repository: string,\n  apiBaseUrl: string,\n  sourceDirectory?: string\n): Promise<ChangeLogFile> | null {\n  logger.trace('gitlab.getReleaseNotesMd()');\n  const repoid = getRepoId(repository);\n  const apiPrefix = `${ensureTrailingSlash(\n    apiBaseUrl\n  )}projects/${repoid}/repository/`;\n\n  // https://docs.gitlab.com/13.2/ee/api/repositories.html#list-repository-tree\n  const tree = (\n    await http.getJson<GitlabTreeNode[]>(\n      `${apiPrefix}tree?per_page=100${\n        sourceDirectory ? `&path=${sourceDirectory}` : ''\n      }`,\n      {\n        paginate: true,\n      }\n    )\n  ).body;\n  const allFiles = tree.filter((f) => f.type === 'blob');\n  let files: GitlabTreeNode[] = [];\n  if (!files.length) {\n    files = allFiles.filter((f) => changelogFilenameRegex.test(f.name));\n  }\n  if (!files.length) {\n    logger.trace('no changelog file found');\n    return null;\n  }\n  const { path: changelogFile, id } = files.shift();\n  /* istanbul ignore if */\n  if (files.length !== 0) {\n    logger.debug(\n      `Multiple candidates for changelog file, using ${changelogFile}`\n    );\n  }\n\n  // https://docs.gitlab.com/13.2/ee/api/repositories.html#raw-blob-content\n  const fileRes = await http.get(`${apiPrefix}blobs/${id}/raw`);\n  const changelogMd = fileRes.body + '\\n#\\n##';\n  return { changelogFile, changelogMd };\n}\n\nexport async function getReleaseList(\n  apiBaseUrl: string,\n  repository: string\n): Promise<ChangeLogNotes[]> {\n  logger.trace('gitlab.getReleaseNotesMd()');\n\n  const repoId = getRepoId(repository);\n  const apiUrl = `${ensureTrailingSlash(\n    apiBaseUrl\n  )}projects/${repoId}/releases`;\n\n  const res = await http.getJson<GitlabRelease[]>(`${apiUrl}?per_page=100`, {\n    paginate: true,\n  });\n  return res.body.map((release) => ({\n    url: `${apiUrl}/${release.tag_name}`,\n    notesSourceUrl: apiUrl,\n    name: release.name,\n    body: release.description,\n    tag: release.tag_name,\n  }));\n}\n"]}