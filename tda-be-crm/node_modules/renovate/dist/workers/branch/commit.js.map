{"version":3,"file":"commit.js","sourceRoot":"","sources":["../../../lib/workers/branch/commit.ts"],"names":[],"mappings":";;;;AAAA,uEAAkC;AAClC,uEAAkC;AAClC,gDAAmD;AACnD,mEAAwE;AACxE,yCAAsC;AACtC,wCAA6C;AAC7C,kDAA+C;AAG/C,SAAgB,mBAAmB,CACjC,MAAoB;IAEpB,IAAI,YAAY,GAAG,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;IAC9E,qBAAqB;IACrB,IAAI,YAAE,CAAC,aAAa,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAE;QAC/C,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE;YACvC,MAAM,QAAQ,GAAG,CAAC,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YACxE,MAAM,mBAAmB,GAAG,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAClE,IAAA,mBAAS,EAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CACzC,CAAC;YACF,IAAI,mBAAmB,EAAE;gBACvB,eAAM,CAAC,KAAK,CAAC,aAAa,QAAQ,cAAc,CAAC,CAAC;gBAClD,OAAO,KAAK,CAAC;aACd;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;KACJ;IACD,IAAI,CAAC,YAAE,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE;QACnC,eAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACnC,OAAO,IAAI,CAAC;KACb;IACD,MAAM,UAAU,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;IAC9E,eAAM,CAAC,KAAK,CAAC,GAAG,UAAU,oBAAoB,CAAC,CAAC;IAChD,qBAAqB;IACrB,IAAI,qBAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;QAC9B,eAAM,CAAC,IAAI,CAAC,wCAAwC,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;QAC1E,OAAO,IAAI,CAAC;KACb;IACD,qBAAqB;IACrB,IACE,MAAM,CAAC,UAAU,KAAK,IAAA,mBAAQ,EAAC,MAAM,CAAC,UAAU,CAAC;QACjD,MAAM,CAAC,aAAa,KAAK,IAAA,mBAAQ,EAAC,MAAM,CAAC,aAAa,CAAC,EACvD;QACA,eAAM,CAAC,KAAK,CACV,EAAE,UAAU,EAAE,MAAM,CAAC,UAAU,EAAE,EACjC,gDAAgD,CACjD,CAAC;QACF,MAAM,IAAI,KAAK,CAAC,uCAAsB,CAAC,CAAC;KACzC;IACD,oDAAoD;IACpD,OAAO,IAAA,iBAAW,EAAC;QACjB,UAAU,EAAE,MAAM,CAAC,UAAU;QAC7B,KAAK,EAAE,YAAY;QACnB,OAAO,EAAE,MAAM,CAAC,aAAa;QAC7B,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW;KAC5B,CAAC,CAAC;AACL,CAAC;AA/CD,kDA+CC","sourcesContent":["import is from '@sindresorhus/is';\nimport minimatch from 'minimatch';\nimport { GlobalConfig } from '../../config/global';\nimport { CONFIG_SECRETS_EXPOSED } from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { commitFiles } from '../../util/git';\nimport { sanitize } from '../../util/sanitize';\nimport type { BranchConfig } from '../types';\n\nexport function commitFilesToBranch(\n  config: BranchConfig\n): Promise<string | null> {\n  let updatedFiles = config.updatedPackageFiles.concat(config.updatedArtifacts);\n  // istanbul ignore if\n  if (is.nonEmptyArray(config.excludeCommitPaths)) {\n    updatedFiles = updatedFiles.filter((f) => {\n      const filename = f.name === '|delete|' ? f.contents.toString() : f.name;\n      const matchesExcludePaths = config.excludeCommitPaths.some((path) =>\n        minimatch(filename, path, { dot: true })\n      );\n      if (matchesExcludePaths) {\n        logger.debug(`Excluding ${filename} from commit`);\n        return false;\n      }\n      return true;\n    });\n  }\n  if (!is.nonEmptyArray(updatedFiles)) {\n    logger.debug(`No files to commit`);\n    return null;\n  }\n  const fileLength = [...new Set(updatedFiles.map((file) => file.name))].length;\n  logger.debug(`${fileLength} file(s) to commit`);\n  // istanbul ignore if\n  if (GlobalConfig.get('dryRun')) {\n    logger.info('DRY-RUN: Would commit files to branch ' + config.branchName);\n    return null;\n  }\n  // istanbul ignore if\n  if (\n    config.branchName !== sanitize(config.branchName) ||\n    config.commitMessage !== sanitize(config.commitMessage)\n  ) {\n    logger.debug(\n      { branchName: config.branchName },\n      'Secrets exposed in branchName or commitMessage'\n    );\n    throw new Error(CONFIG_SECRETS_EXPOSED);\n  }\n  // API will know whether to create new branch or not\n  return commitFiles({\n    branchName: config.branchName,\n    files: updatedFiles,\n    message: config.commitMessage,\n    force: !!config.forceCommit,\n  });\n}\n"]}