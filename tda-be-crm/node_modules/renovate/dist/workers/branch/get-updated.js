"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUpdatedPackageFiles = void 0;
const tslib_1 = require("tslib");
const is_1 = (0, tslib_1.__importDefault)(require("@sindresorhus/is"));
const error_messages_1 = require("../../constants/error-messages");
const logger_1 = require("../../logger");
const manager_1 = require("../../manager");
const git_1 = require("../../util/git");
const auto_replace_1 = require("./auto-replace");
async function getUpdatedPackageFiles(config) {
    logger_1.logger.trace({ config });
    const { reuseExistingBranch } = config;
    logger_1.logger.debug(`manager.getUpdatedPackageFiles() reuseExistinbranch=${reuseExistingBranch}`);
    let updatedFileContents = {};
    const nonUpdatedFileContents = {};
    const packageFileManagers = {};
    const packageFileUpdatedDeps = {};
    const lockFileMaintenanceFiles = [];
    for (const upgrade of config.upgrades) {
        const { manager, packageFile, lockFile, depName } = upgrade;
        packageFileManagers[packageFile] = manager;
        packageFileUpdatedDeps[packageFile] =
            packageFileUpdatedDeps[packageFile] || [];
        packageFileUpdatedDeps[packageFile].push({ ...upgrade });
        let packageFileContent = updatedFileContents[packageFile];
        if (!packageFileContent) {
            packageFileContent = await (0, git_1.getFile)(packageFile, reuseExistingBranch ? config.branchName : config.baseBranch);
        }
        // istanbul ignore if
        if (reuseExistingBranch && !packageFileContent) {
            logger_1.logger.debug({ packageFile, depName }, 'Rebasing branch after file not found');
            return getUpdatedPackageFiles({
                ...config,
                reuseExistingBranch: false,
            });
        }
        if (upgrade.updateType === 'lockFileMaintenance') {
            lockFileMaintenanceFiles.push(packageFile);
        }
        else if (upgrade.isRemediation) {
            let lockFileContent = updatedFileContents[lockFile];
            if (!lockFileContent) {
                lockFileContent = await (0, git_1.getFile)(lockFile, reuseExistingBranch ? config.branchName : config.baseBranch);
            }
            // istanbul ignore if: to hard to test
            if (reuseExistingBranch && !lockFileContent) {
                logger_1.logger.debug({ lockFile, depName }, 'Rebasing branch after lock file not found');
                return getUpdatedPackageFiles({
                    ...config,
                    reuseExistingBranch: false,
                });
            }
            const updateLockedDependency = (0, manager_1.get)(manager, 'updateLockedDependency');
            const files = await updateLockedDependency({
                ...upgrade,
                packageFileContent,
                lockFileContent,
            });
            if (files) {
                if (reuseExistingBranch) {
                    // This ensure it's always 1 commit from the bot
                    logger_1.logger.debug({ lockFile, depName }, 'Need to update file(s) so will rebase first');
                    return getUpdatedPackageFiles({
                        ...config,
                        reuseExistingBranch: false,
                    });
                }
                updatedFileContents = { ...updatedFileContents, ...files };
            }
        }
        else {
            const bumpPackageVersion = (0, manager_1.get)(manager, 'bumpPackageVersion');
            const updateDependency = (0, manager_1.get)(manager, 'updateDependency');
            if (!updateDependency) {
                let res = await (0, auto_replace_1.doAutoReplace)(upgrade, packageFileContent, reuseExistingBranch);
                if (res) {
                    if (bumpPackageVersion && upgrade.bumpVersion) {
                        const { bumpedContent } = await bumpPackageVersion(res, upgrade.packageFileVersion, upgrade.bumpVersion);
                        res = bumpedContent;
                    }
                    if (res === packageFileContent) {
                        logger_1.logger.debug({ packageFile, depName }, 'No content changed');
                        if (upgrade.rangeStrategy === 'update-lockfile') {
                            logger_1.logger.debug({ packageFile, depName }, 'update-lockfile add');
                            nonUpdatedFileContents[packageFile] = res;
                        }
                    }
                    else {
                        logger_1.logger.debug({ packageFile, depName }, 'Contents updated');
                        updatedFileContents[packageFile] = res;
                    }
                    continue;
                }
                else if (reuseExistingBranch) {
                    return getUpdatedPackageFiles({
                        ...config,
                        reuseExistingBranch: false,
                    });
                }
                logger_1.logger.error({ packageFile, depName }, 'Could not autoReplace');
                throw new Error(error_messages_1.WORKER_FILE_UPDATE_FAILED);
            }
            let newContent = await updateDependency({
                fileContent: packageFileContent,
                upgrade,
            });
            if (bumpPackageVersion && upgrade.bumpVersion) {
                const { bumpedContent } = await bumpPackageVersion(newContent, upgrade.packageFileVersion, upgrade.bumpVersion);
                newContent = bumpedContent;
            }
            if (!newContent) {
                if (reuseExistingBranch) {
                    logger_1.logger.debug({ packageFile, depName }, 'Rebasing branch after error updating content');
                    return getUpdatedPackageFiles({
                        ...config,
                        reuseExistingBranch: false,
                    });
                }
                logger_1.logger.debug({ existingContent: packageFileContent, config: upgrade }, 'Error updating file');
                throw new Error(error_messages_1.WORKER_FILE_UPDATE_FAILED);
            }
            if (newContent !== packageFileContent) {
                if (reuseExistingBranch) {
                    // This ensure it's always 1 commit from the bot
                    logger_1.logger.debug({ packageFile, depName }, 'Need to update package file so will rebase first');
                    return getUpdatedPackageFiles({
                        ...config,
                        reuseExistingBranch: false,
                    });
                }
                logger_1.logger.debug(`Updating ${depName} in ${packageFile || lockFile}`);
                updatedFileContents[packageFile] = newContent;
            }
            if (newContent === packageFileContent) {
                // istanbul ignore else
                if (upgrade.manager === 'git-submodules') {
                    updatedFileContents[packageFile] = newContent;
                }
                else if (upgrade.rangeStrategy === 'update-lockfile') {
                    nonUpdatedFileContents[packageFile] = newContent;
                }
            }
        }
    }
    const updatedPackageFiles = Object.keys(updatedFileContents).map((name) => ({
        name,
        contents: updatedFileContents[name],
    }));
    const updatedArtifacts = [];
    const artifactErrors = [];
    for (const packageFile of updatedPackageFiles) {
        const manager = packageFileManagers[packageFile.name];
        const updatedDeps = packageFileUpdatedDeps[packageFile.name];
        const updateArtifacts = (0, manager_1.get)(manager, 'updateArtifacts');
        if (updateArtifacts) {
            const results = await updateArtifacts({
                packageFileName: packageFile.name,
                updatedDeps,
                newPackageFileContent: packageFile.contents,
                config,
            });
            if (is_1.default.nonEmptyArray(results)) {
                for (const res of results) {
                    const { file, artifactError } = res;
                    if (file) {
                        updatedArtifacts.push(file);
                    }
                    else if (artifactError) {
                        artifactErrors.push(artifactError);
                    }
                }
            }
        }
    }
    const nonUpdatedPackageFiles = Object.keys(nonUpdatedFileContents).map((name) => ({
        name,
        contents: nonUpdatedFileContents[name],
    }));
    for (const packageFile of nonUpdatedPackageFiles) {
        const manager = packageFileManagers[packageFile.name];
        const updatedDeps = packageFileUpdatedDeps[packageFile.name];
        const updateArtifacts = (0, manager_1.get)(manager, 'updateArtifacts');
        if (updateArtifacts) {
            const results = await updateArtifacts({
                packageFileName: packageFile.name,
                updatedDeps,
                newPackageFileContent: packageFile.contents,
                config,
            });
            if (is_1.default.nonEmptyArray(results)) {
                updatedPackageFiles.push(packageFile);
                for (const res of results) {
                    const { file, artifactError } = res;
                    // istanbul ignore else
                    if (file) {
                        updatedArtifacts.push(file);
                    }
                    else if (artifactError) {
                        artifactErrors.push(artifactError);
                    }
                }
            }
        }
    }
    if (!reuseExistingBranch) {
        // Only perform lock file maintenance if it's a fresh commit
        for (const packageFile of lockFileMaintenanceFiles) {
            const manager = packageFileManagers[packageFile];
            const updateArtifacts = (0, manager_1.get)(manager, 'updateArtifacts');
            if (updateArtifacts) {
                const packageFileContents = updatedFileContents[packageFile] ||
                    (await (0, git_1.getFile)(packageFile, reuseExistingBranch ? config.branchName : config.baseBranch));
                const results = await updateArtifacts({
                    packageFileName: packageFile,
                    updatedDeps: [],
                    newPackageFileContent: packageFileContents,
                    config,
                });
                if (is_1.default.nonEmptyArray(results)) {
                    for (const res of results) {
                        const { file, artifactError } = res;
                        if (file) {
                            updatedArtifacts.push(file);
                        }
                        else if (artifactError) {
                            artifactErrors.push(artifactError);
                        }
                    }
                }
            }
        }
    }
    return {
        reuseExistingBranch,
        updatedPackageFiles,
        updatedArtifacts,
        artifactErrors,
    };
}
exports.getUpdatedPackageFiles = getUpdatedPackageFiles;
//# sourceMappingURL=get-updated.js.map