{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/workers/repository/process/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { mergeChildConfig } from '../../../config';\nimport type { RenovateConfig } from '../../../config/types';\nimport { logger } from '../../../logger';\nimport type { PackageFile } from '../../../manager/types';\nimport { branchExists } from '../../../util/git';\nimport { addSplit } from '../../../util/split';\nimport type { BranchConfig } from '../../types';\nimport { readDashboardBody } from '../dependency-dashboard';\nimport { ExtractResult, extract, lookup, update } from './extract-update';\nimport type { WriteUpdateResult } from './write';\n\nfunction getBaseBranchConfig(\n  baseBranch: string,\n  config: RenovateConfig\n): RenovateConfig {\n  logger.debug(`baseBranch: ${baseBranch}`);\n  const baseBranchConfig = mergeChildConfig(config, { baseBranch });\n  if (config.baseBranches.length > 1) {\n    baseBranchConfig.branchPrefix += `${baseBranch}-`;\n    baseBranchConfig.hasBaseBranches = true;\n  }\n  return baseBranchConfig;\n}\n\nexport async function extractDependencies(\n  config: RenovateConfig\n): Promise<ExtractResult> {\n  await readDashboardBody(config);\n  let res: ExtractResult = {\n    branches: [],\n    branchList: [],\n    packageFiles: null,\n  };\n  if (config.baseBranches?.length) {\n    logger.debug({ baseBranches: config.baseBranches }, 'baseBranches');\n    const extracted: Record<string, Record<string, PackageFile[]>> = {};\n    for (const baseBranch of config.baseBranches) {\n      if (branchExists(baseBranch)) {\n        const baseBranchConfig = getBaseBranchConfig(baseBranch, config);\n        extracted[baseBranch] = await extract(baseBranchConfig);\n      } else {\n        logger.warn({ baseBranch }, 'Base branch does not exist - skipping');\n      }\n    }\n    addSplit('extract');\n    for (const baseBranch of config.baseBranches) {\n      if (branchExists(baseBranch)) {\n        const baseBranchConfig = getBaseBranchConfig(baseBranch, config);\n        const packageFiles = extracted[baseBranch];\n        const baseBranchRes = await lookup(baseBranchConfig, packageFiles);\n        res.branches = res.branches.concat(baseBranchRes?.branches);\n        res.branchList = res.branchList.concat(baseBranchRes?.branchList);\n        res.packageFiles = res.packageFiles || baseBranchRes?.packageFiles; // Use the first branch\n      }\n    }\n  } else {\n    logger.debug('No baseBranches');\n    const packageFiles = await extract(config);\n    addSplit('extract');\n    res = await lookup(config, packageFiles);\n  }\n  addSplit('lookup');\n  return res;\n}\n\nexport function updateRepo(\n  config: RenovateConfig,\n  branches: BranchConfig[]\n): Promise<WriteUpdateResult | undefined> {\n  logger.debug('processRepo()');\n\n  return update(config, branches);\n}\n"]}