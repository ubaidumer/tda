{"version":3,"file":"generate.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/process/lookup/generate.ts"],"names":[],"mappings":";;;AACA,+CAA4C;AAK5C,+CAA8C;AAE9C,SAAgB,cAAc,CAC5B,MAA0B,EAC1B,UAAyB,EACzB,aAA4B,EAC5B,cAAsB,EACtB,MAAc,EACd,OAAgB;IAEhB,MAAM,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC;IACnC,MAAM,MAAM,GAAiB;QAC3B,MAAM;QACN,UAAU;QACV,QAAQ,EAAE,IAAI;KACf,CAAC;IACF,MAAM,aAAa,GAAG;QACpB,aAAa;QACb,aAAa;QACb,WAAW;QACX,kBAAkB;KACnB,CAAC;IACF,KAAK,MAAM,KAAK,IAAI,aAAa,EAAE;QACjC,IAAI,OAAO,CAAC,KAAK,CAAC,KAAK,SAAS,EAAE;YAChC,MAAM,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;SAChC;KACF;IACD,MAAM,EAAE,YAAY,EAAE,GAAG,MAAM,CAAC;IAChC,IAAI,YAAY,EAAE;QAChB,IAAI;YACF,MAAM,CAAC,QAAQ,GAAG,UAAU,CAAC,WAAW,CAAC;gBACvC,YAAY;gBACZ,aAAa;gBACb,cAAc;gBACd,UAAU;aACX,CAAC,CAAC;SACJ;QAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC;YACvC,eAAM,CAAC,IAAI,CACT,EAAE,GAAG,EAAE,YAAY,EAAE,aAAa,EAAE,cAAc,EAAE,UAAU,EAAE,EAChE,mBAAmB,CACpB,CAAC;YACF,MAAM,CAAC,QAAQ,GAAG,YAAY,CAAC;SAChC;KACF;SAAM;QACL,MAAM,CAAC,QAAQ,GAAG,YAAY,CAAC;KAChC;IACD,MAAM,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IAClD,MAAM,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IAClD,qBAAqB;IACrB,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,CAAC,cAAc,EAAE;QACzC,eAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,EAAE,8BAA8B,CAAC,CAAC;QACzD,MAAM,CAAC,QAAQ,GAAG,YAAY,CAAC;QAC/B,OAAO,MAAM,CAAC;KACf;IACD,MAAM,CAAC,UAAU;QACf,MAAM,CAAC,UAAU;YACjB,IAAA,2BAAa,EAAC,MAAM,EAAE,UAAU,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC;IAChE,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;QAC1C,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;KACvB;IACD,IAAI,aAAa,KAAK,iBAAiB,IAAI,YAAY,KAAK,MAAM,CAAC,QAAQ,EAAE;QAC3E,MAAM,CAAC,gBAAgB,GAAG,IAAI,CAAC;KAChC;IACD,IACE,aAAa,KAAK,MAAM;QACxB,UAAU,CAAC,OAAO,CAAC,UAAU,EAAE,YAAY,CAAC,EAC5C;QACA,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;KACtB;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AApED,wCAoEC","sourcesContent":["import type { Release } from '../../../../datasource';\nimport { logger } from '../../../../logger';\nimport type { LookupUpdate } from '../../../../manager/types';\nimport { RangeStrategy } from '../../../../types';\nimport type { VersioningApi } from '../../../../versioning';\nimport type { LookupUpdateConfig } from './types';\nimport { getUpdateType } from './update-type';\n\nexport function generateUpdate(\n  config: LookupUpdateConfig,\n  versioning: VersioningApi,\n  rangeStrategy: RangeStrategy,\n  currentVersion: string,\n  bucket: string,\n  release: Release\n): LookupUpdate {\n  const newVersion = release.version;\n  const update: LookupUpdate = {\n    bucket,\n    newVersion,\n    newValue: null,\n  };\n  const releaseFields = [\n    'checksumUrl',\n    'downloadUrl',\n    'newDigest',\n    'releaseTimestamp',\n  ];\n  for (const field of releaseFields) {\n    if (release[field] !== undefined) {\n      update[field] = release[field];\n    }\n  }\n  const { currentValue } = config;\n  if (currentValue) {\n    try {\n      update.newValue = versioning.getNewValue({\n        currentValue,\n        rangeStrategy,\n        currentVersion,\n        newVersion,\n      });\n    } catch (err) /* istanbul ignore next */ {\n      logger.warn(\n        { err, currentValue, rangeStrategy, currentVersion, newVersion },\n        'getNewValue error'\n      );\n      update.newValue = currentValue;\n    }\n  } else {\n    update.newValue = currentValue;\n  }\n  update.newMajor = versioning.getMajor(newVersion);\n  update.newMinor = versioning.getMinor(newVersion);\n  // istanbul ignore if\n  if (!update.updateType && !currentVersion) {\n    logger.debug({ update }, 'Update has no currentVersion');\n    update.newValue = currentValue;\n    return update;\n  }\n  update.updateType =\n    update.updateType ||\n    getUpdateType(config, versioning, currentVersion, newVersion);\n  if (!versioning.isVersion(update.newValue)) {\n    update.isRange = true;\n  }\n  if (rangeStrategy === 'update-lockfile' && currentValue === update.newValue) {\n    update.isLockfileUpdate = true;\n  }\n  if (\n    rangeStrategy === 'bump' &&\n    versioning.matches(newVersion, currentValue)\n  ) {\n    update.isBump = true;\n  }\n  return update;\n}\n"]}