{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/process/lookup/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { mergeChildConfig } from '../../../../config';\nimport type { ValidationMessage } from '../../../../config/types';\nimport { CONFIG_VALIDATION } from '../../../../constants/error-messages';\nimport {\n  Release,\n  getDatasourceList,\n  getDefaultVersioning,\n  getDigest,\n  getPkgReleases,\n  isGetPkgReleasesConfig,\n  supportsDigests,\n} from '../../../../datasource';\nimport { logger } from '../../../../logger';\nimport { getRangeStrategy } from '../../../../manager';\nimport { SkipReason } from '../../../../types';\nimport { ExternalHostError } from '../../../../types/errors/external-host-error';\nimport { clone } from '../../../../util/clone';\nimport { applyPackageRules } from '../../../../util/package-rules';\nimport { regEx } from '../../../../util/regex';\nimport * as allVersioning from '../../../../versioning';\nimport { getBucket } from './bucket';\nimport { getCurrentVersion } from './current';\nimport { filterVersions } from './filter';\nimport { filterInternalChecks } from './filter-checks';\nimport { generateUpdate } from './generate';\nimport { getRollbackUpdate } from './rollback';\nimport type { LookupUpdateConfig, UpdateResult } from './types';\n\nexport async function lookupUpdates(\n  inconfig: LookupUpdateConfig\n): Promise<UpdateResult> {\n  let config: LookupUpdateConfig = { ...inconfig };\n  const {\n    currentDigest,\n    currentValue,\n    datasource,\n    depName,\n    digestOneAndOnly,\n    followTag,\n    lockedVersion,\n    packageFile,\n    pinDigests,\n    rollbackPrs,\n    isVulnerabilityAlert,\n    updatePinnedDependencies,\n  } = config;\n  const unconstrainedValue = lockedVersion && is.undefined(currentValue);\n  const res: UpdateResult = {\n    updates: [],\n    warnings: [],\n  } as any;\n  try {\n    logger.trace({ dependency: depName, currentValue }, 'lookupUpdates');\n    // Use the datasource's default versioning if none is configured\n    config.versioning ??= getDefaultVersioning(datasource);\n    const versioning = allVersioning.get(config.versioning);\n    res.versioning = config.versioning;\n    // istanbul ignore if\n    if (\n      !isGetPkgReleasesConfig(config) ||\n      !getDatasourceList().includes(datasource)\n    ) {\n      res.skipReason = SkipReason.InvalidConfig;\n      return res;\n    }\n    const isValid = currentValue && versioning.isValid(currentValue);\n    if (unconstrainedValue || isValid) {\n      if (\n        !updatePinnedDependencies &&\n        versioning.isSingleVersion(currentValue)\n      ) {\n        res.skipReason = SkipReason.IsPinned;\n        return res;\n      }\n\n      const dependency = clone(await getPkgReleases(config));\n      if (!dependency) {\n        // If dependency lookup fails then warn and return\n        const warning: ValidationMessage = {\n          topic: depName,\n          message: `Failed to look up dependency ${depName}`,\n        };\n        logger.debug({ dependency: depName, packageFile }, warning.message);\n        // TODO: return warnings in own field\n        res.warnings.push(warning);\n        return res;\n      }\n      if (dependency.deprecationMessage) {\n        logger.debug({ dependency: depName }, 'Found deprecationMessage');\n        res.deprecationMessage = dependency.deprecationMessage;\n      }\n\n      res.sourceUrl = dependency?.sourceUrl;\n      if (dependency.sourceDirectory) {\n        res.sourceDirectory = dependency.sourceDirectory;\n      }\n      res.homepage = dependency.homepage;\n      res.changelogUrl = dependency.changelogUrl;\n      res.dependencyUrl = dependency?.dependencyUrl;\n\n      const latestVersion = dependency.tags?.latest;\n      // Filter out any results from datasource that don't comply with our versioning\n      let allVersions = dependency.releases.filter((release) =>\n        versioning.isVersion(release.version)\n      );\n      // istanbul ignore if\n      if (allVersions.length === 0) {\n        const message = `Found no results from datasource that look like a version`;\n        logger.debug({ dependency: depName, result: dependency }, message);\n        if (!currentDigest) {\n          return res;\n        }\n      }\n      // Reapply package rules in case we missed something from sourceUrl\n      config = applyPackageRules({ ...config, sourceUrl: res.sourceUrl });\n      if (followTag) {\n        const taggedVersion = dependency.tags?.[followTag];\n        if (!taggedVersion) {\n          res.warnings.push({\n            topic: depName,\n            message: `Can't find version with tag ${followTag} for ${depName}`,\n          });\n          return res;\n        }\n        allVersions = allVersions.filter(\n          (v) =>\n            v.version === taggedVersion ||\n            (v.version === currentValue &&\n              versioning.isGreaterThan(taggedVersion, currentValue))\n        );\n      }\n      // Check that existing constraint can be satisfied\n      const allSatisfyingVersions = allVersions.filter(\n        (v) => unconstrainedValue || versioning.matches(v.version, currentValue)\n      );\n      if (rollbackPrs && !allSatisfyingVersions.length) {\n        const rollback = getRollbackUpdate(config, allVersions, versioning);\n        // istanbul ignore if\n        if (!rollback) {\n          res.warnings.push({\n            topic: depName,\n            message: `Can't find version matching ${currentValue} for ${depName}`,\n          });\n          return res;\n        }\n        res.updates.push(rollback);\n      }\n      let rangeStrategy = getRangeStrategy(config);\n      if (dependency.replacementName && dependency.replacementVersion) {\n        res.updates.push({\n          updateType: 'replacement',\n          newName: dependency.replacementName,\n          newValue: versioning.getNewValue({\n            currentValue,\n            newVersion: dependency.replacementVersion,\n            rangeStrategy,\n          }),\n        });\n      }\n      // istanbul ignore next\n      if (\n        isVulnerabilityAlert &&\n        rangeStrategy === 'update-lockfile' &&\n        !lockedVersion\n      ) {\n        rangeStrategy = 'bump';\n      }\n      const nonDeprecatedVersions = dependency.releases\n        .filter((release) => !release.isDeprecated)\n        .map((release) => release.version);\n      let currentVersion: string;\n      if (rangeStrategy === 'update-lockfile') {\n        currentVersion = lockedVersion;\n      }\n      currentVersion ??=\n        getCurrentVersion(\n          currentValue,\n          lockedVersion,\n          versioning,\n          rangeStrategy,\n          latestVersion,\n          nonDeprecatedVersions\n        ) ||\n        getCurrentVersion(\n          currentValue,\n          lockedVersion,\n          versioning,\n          rangeStrategy,\n          latestVersion,\n          allVersions.map((v) => v.version)\n        );\n      // istanbul ignore if\n      if (!currentVersion && lockedVersion) {\n        return res;\n      }\n      res.currentVersion = currentVersion;\n      if (\n        currentValue &&\n        currentVersion &&\n        rangeStrategy === 'pin' &&\n        !versioning.isSingleVersion(currentValue)\n      ) {\n        res.updates.push({\n          updateType: 'pin',\n          isPin: true,\n          newValue: versioning.getNewValue({\n            currentValue,\n            rangeStrategy,\n            currentVersion,\n            newVersion: currentVersion,\n          }),\n          newMajor: versioning.getMajor(currentVersion),\n        });\n      }\n      // istanbul ignore if\n      if (!versioning.isVersion(currentVersion)) {\n        res.skipReason = SkipReason.InvalidVersion;\n        return res;\n      }\n      // Filter latest, unstable, etc\n      let filteredReleases = filterVersions(\n        config,\n        currentVersion,\n        latestVersion,\n        allVersions,\n        versioning\n      ).filter(\n        (v) =>\n          // Leave only compatible versions\n          unconstrainedValue || versioning.isCompatible(v.version, currentValue)\n      );\n      if (isVulnerabilityAlert) {\n        filteredReleases = filteredReleases.slice(0, 1);\n      }\n      const buckets: Record<string, [Release]> = {};\n      for (const release of filteredReleases) {\n        const bucket = getBucket(\n          config,\n          currentVersion,\n          release.version,\n          versioning\n        );\n        if (is.string(bucket)) {\n          if (buckets[bucket]) {\n            buckets[bucket].push(release);\n          } else {\n            buckets[bucket] = [release];\n          }\n        }\n      }\n      const depResultConfig = mergeChildConfig(config, res);\n      for (const [bucket, releases] of Object.entries(buckets)) {\n        const sortedReleases = releases.sort((r1, r2) =>\n          versioning.sortVersions(r1.version, r2.version)\n        );\n        const { release, pendingChecks, pendingReleases } =\n          await filterInternalChecks(\n            depResultConfig,\n            versioning,\n            bucket,\n            sortedReleases\n          );\n        // istanbul ignore next\n        if (!release) {\n          return res;\n        }\n        const newVersion = release.version;\n        const update = generateUpdate(\n          config,\n          versioning,\n          rangeStrategy,\n          lockedVersion || currentVersion,\n          bucket,\n          release\n        );\n        if (pendingChecks) {\n          update.pendingChecks = pendingChecks;\n        }\n        if (pendingReleases.length) {\n          update.pendingVersions = pendingReleases.map((r) => r.version);\n        }\n        if (!update.newValue || update.newValue === currentValue) {\n          if (!lockedVersion) {\n            continue;\n          }\n          // istanbul ignore if\n          if (rangeStrategy === 'bump') {\n            logger.trace(\n              { depName, currentValue, lockedVersion, newVersion },\n              'Skipping bump because newValue is the same'\n            );\n            continue;\n          }\n          res.isSingleVersion = true;\n        }\n        res.isSingleVersion =\n          res.isSingleVersion || !!versioning.isSingleVersion(update.newValue);\n\n        res.updates.push(update);\n      }\n    } else if (currentValue) {\n      logger.debug(\n        `Dependency ${depName} has unsupported value ${currentValue}`\n      );\n      if (!pinDigests && !currentDigest) {\n        res.skipReason = SkipReason.InvalidValue;\n      } else {\n        delete res.skipReason;\n      }\n    } else {\n      res.skipReason = SkipReason.InvalidValue;\n    }\n\n    // Record if the dep is fixed to a version\n    if (lockedVersion) {\n      res.currentVersion = lockedVersion;\n      res.fixedVersion = lockedVersion;\n    } else if (currentValue && versioning.isSingleVersion(currentValue)) {\n      res.fixedVersion = currentValue.replace(regEx(/^=+/), '');\n    }\n    // Add digests if necessary\n    if (supportsDigests(config)) {\n      if (currentDigest) {\n        if (!digestOneAndOnly || !res.updates.length) {\n          // digest update\n          res.updates.push({\n            updateType: 'digest',\n            newValue: currentValue,\n          });\n        }\n      } else if (pinDigests) {\n        // Create a pin only if one doesn't already exists\n        if (!res.updates.some((update) => update.updateType === 'pin')) {\n          // pin digest\n          res.updates.push({\n            updateType: 'pin',\n            newValue: currentValue,\n          });\n        }\n      }\n      if (versioning.valueToVersion) {\n        res.currentVersion = versioning.valueToVersion(res.currentVersion);\n        for (const update of res.updates || []) {\n          update.newVersion = versioning.valueToVersion(update.newVersion);\n        }\n      }\n      // update digest for all\n      for (const update of res.updates) {\n        if (pinDigests || currentDigest) {\n          update.newDigest =\n            update.newDigest || (await getDigest(config, update.newValue));\n        }\n      }\n    }\n    if (res.updates.length) {\n      delete res.skipReason;\n    }\n    // Strip out any non-changed ones\n    res.updates = res.updates\n      .filter((update) => update.newDigest !== null)\n      .filter(\n        (update) =>\n          update.newValue !== currentValue ||\n          update.isLockfileUpdate ||\n          (update.newDigest && !update.newDigest.startsWith(currentDigest))\n      );\n  } catch (err) /* istanbul ignore next */ {\n    if (err instanceof ExternalHostError || err.message === CONFIG_VALIDATION) {\n      throw err;\n    }\n    logger.error(\n      {\n        currentDigest,\n        currentValue,\n        datasource,\n        depName,\n        digestOneAndOnly,\n        followTag,\n        lockedVersion,\n        packageFile,\n        pinDigests,\n        rollbackPrs,\n        isVulnerabilityAlert,\n        updatePinnedDependencies,\n        unconstrainedValue,\n        err,\n      },\n      'lookupUpdates error'\n    );\n    res.skipReason = SkipReason.InternalError;\n  }\n  return res;\n}\n"]}