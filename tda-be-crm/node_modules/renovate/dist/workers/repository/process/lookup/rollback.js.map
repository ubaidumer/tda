{"version":3,"file":"rollback.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/process/lookup/rollback.ts"],"names":[],"mappings":";;;AACA,+CAA4C;AAK5C,SAAgB,iBAAiB,CAC/B,MAAsB,EACtB,QAAmB,EACnB,OAAsB;;IAEtB,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,OAAO,EAAE,YAAY,EAAE,GAAG,MAAM,CAAC;IAClE,qBAAqB;IACrB,IAAI,CAAC,CAAC,iBAAiB,IAAI,OAAO,CAAC,EAAE;QACnC,eAAM,CAAC,KAAK,CACV,EAAE,UAAU,EAAE,EACd,uDAAuD,CACxD,CAAC;QACF,OAAO,IAAI,CAAC;KACb;IACD,MAAM,gBAAgB,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAC7C,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,OAAO,EAAE,YAAY,CAAC,CACjD,CAAC;IACF,qBAAqB;IACrB,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE;QAC5B,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,OAAO,EAAE,YAAY,EAAE,EACtC,6CAA6C,CAC9C,CAAC;QACF,OAAO,IAAI,CAAC;KACb;IACD,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,OAAO,EAAE,YAAY,EAAE,EACtC,0CAA0C,CAC3C,CAAC;IACF,eAAM,CAAC,KAAK,CACV,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAE,EACjC,oCAAoC,CACrC,CAAC;IACF,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IAC5E,MAAM,UAAU,GAAG,MAAA,gBAAgB,CAAC,GAAG,EAAE,0CAAE,OAAO,CAAC;IACnD,qBAAqB;IACrB,IAAI,CAAC,UAAU,EAAE;QACf,eAAM,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;QAC9C,OAAO,IAAI,CAAC;KACb;IACD,MAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC;QACnC,YAAY;QACZ,aAAa,EAAE,SAAS;QACxB,UAAU;KACX,CAAC,CAAC;IACH,OAAO;QACL,MAAM,EAAE,UAAU;QAClB,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC;QACtC,QAAQ;QACR,UAAU;QACV,UAAU,EAAE,UAAU;KACvB,CAAC;AACJ,CAAC;AApDD,8CAoDC","sourcesContent":["import type { Release } from '../../../../datasource/types';\nimport { logger } from '../../../../logger';\nimport type { LookupUpdate } from '../../../../manager/types';\nimport type { VersioningApi } from '../../../../versioning';\nimport type { RollbackConfig } from './types';\n\nexport function getRollbackUpdate(\n  config: RollbackConfig,\n  versions: Release[],\n  version: VersioningApi\n): LookupUpdate {\n  const { packageFile, versioning, depName, currentValue } = config;\n  // istanbul ignore if\n  if (!('isLessThanRange' in version)) {\n    logger.debug(\n      { versioning },\n      'Current versioning does not support isLessThanRange()'\n    );\n    return null;\n  }\n  const lessThanVersions = versions.filter((v) =>\n    version.isLessThanRange(v.version, currentValue)\n  );\n  // istanbul ignore if\n  if (!lessThanVersions.length) {\n    logger.debug(\n      { packageFile, depName, currentValue },\n      'Missing version has nothing to roll back to'\n    );\n    return null;\n  }\n  logger.debug(\n    { packageFile, depName, currentValue },\n    `Current version not found - rolling back`\n  );\n  logger.debug(\n    { dependency: depName, versions },\n    'Versions found before rolling back'\n  );\n  lessThanVersions.sort((a, b) => version.sortVersions(a.version, b.version));\n  const newVersion = lessThanVersions.pop()?.version;\n  // istanbul ignore if\n  if (!newVersion) {\n    logger.debug('No newVersion to roll back to');\n    return null;\n  }\n  const newValue = version.getNewValue({\n    currentValue,\n    rangeStrategy: 'replace',\n    newVersion,\n  });\n  return {\n    bucket: 'rollback',\n    newMajor: version.getMajor(newVersion),\n    newValue,\n    newVersion,\n    updateType: 'rollback',\n  };\n}\n"]}