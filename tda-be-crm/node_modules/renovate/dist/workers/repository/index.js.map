{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/workers/repository/index.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs-extra';\nimport { GlobalConfig } from '../../config/global';\nimport type { RenovateConfig } from '../../config/types';\nimport { logger, setMeta } from '../../logger';\nimport { removeDanglingContainers } from '../../util/exec/docker';\nimport { deleteLocalFile, privateCacheDir } from '../../util/fs';\nimport * as queue from '../../util/http/queue';\nimport { addSplit, getSplits, splitInit } from '../../util/split';\nimport { setBranchCache } from './cache';\nimport { ensureDependencyDashboard } from './dependency-dashboard';\nimport handleError from './error';\nimport { finaliseRepo } from './finalise';\nimport { initRepo } from './init';\nimport { ensureOnboardingPr } from './onboarding/pr';\nimport { extractDependencies, updateRepo } from './process';\nimport { ProcessResult, processResult } from './result';\nimport { printRequestStats } from './stats';\n\nlet renovateVersion = 'unknown';\ntry {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  renovateVersion = require('../../../package.json').version;\n} catch (err) /* istanbul ignore next */ {\n  logger.debug({ err }, 'Error getting renovate version');\n}\n\n// istanbul ignore next\nexport async function renovateRepository(\n  repoConfig: RenovateConfig,\n  canRetry = true\n): Promise<ProcessResult> {\n  splitInit();\n  let config = GlobalConfig.set(repoConfig);\n  await removeDanglingContainers();\n  setMeta({ repository: config.repository });\n  logger.info({ renovateVersion }, 'Repository started');\n  logger.trace({ config });\n  let repoResult: ProcessResult;\n  queue.clear();\n  const { localDir } = GlobalConfig.get();\n  try {\n    await fs.ensureDir(localDir);\n    logger.debug('Using localDir: ' + localDir);\n    config = await initRepo(config);\n    addSplit('init');\n    const { branches, branchList, packageFiles } = await extractDependencies(\n      config\n    );\n    await ensureOnboardingPr(config, packageFiles, branches);\n    const res = await updateRepo(config, branches);\n    setMeta({ repository: config.repository });\n    addSplit('update');\n    await setBranchCache(branches);\n    if (res === 'automerged') {\n      if (canRetry) {\n        logger.info('Renovating repository again after automerge result');\n        const recursiveRes = await renovateRepository(repoConfig, false);\n        return recursiveRes;\n      }\n      logger.debug(`Automerged but already retried once`);\n    } else {\n      await ensureDependencyDashboard(config, branches);\n    }\n    await finaliseRepo(config, branchList);\n    repoResult = processResult(config, res);\n  } catch (err) /* istanbul ignore next */ {\n    setMeta({ repository: config.repository });\n    const errorRes = await handleError(config, err);\n    repoResult = processResult(config, errorRes);\n  }\n  if (localDir && !config.persistRepoData) {\n    try {\n      await deleteLocalFile('.');\n    } catch (err) /* istanbul ignore if */ {\n      logger.warn({ err }, 'localDir deletion error');\n    }\n  }\n  try {\n    await fs.remove(privateCacheDir());\n  } catch (err) /* istanbul ignore if */ {\n    logger.warn({ err }, 'privateCacheDir deletion error');\n  }\n  const splits = getSplits();\n  logger.debug(splits, 'Repository timing splits (milliseconds)');\n  printRequestStats();\n  logger.info({ durationMs: splits.total }, 'Repository finished');\n  return repoResult;\n}\n"]}