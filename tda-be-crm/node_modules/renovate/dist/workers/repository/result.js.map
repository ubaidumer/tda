{"version":3,"file":"result.js","sourceRoot":"","sources":["../../../lib/workers/repository/result.ts"],"names":[],"mappings":";;;AACA,mEAiBwC;AACxC,yCAAsC;AAUtC,SAAgB,aAAa,CAC3B,MAAsB,EACtB,GAAW;IAEX,MAAM,gBAAgB,GAAG;QACvB,4CAA2B;QAC3B,oCAAmB;QACnB,mCAAkB;QAClB,6CAA4B;QAC5B,oCAAmB;QACnB,8CAA6B;QAC7B,iCAAgB;QAChB,kCAAiB;QACjB,oCAAmB;QACnB,qCAAoB;QACpB,qCAAoB;QACpB,4CAA2B;QAC3B,mCAAkB;QAClB,uCAAsB;KACvB,CAAC;IACF,MAAM,eAAe,GAAG,CAAC,uCAAsB,EAAE,kCAAiB,CAAC,CAAC;IACpE,IAAI,MAAqB,CAAC;IAC1B,IAAI,OAAgB,CAAC;IACrB,IAAI,SAAkB,CAAC;IACvB,uBAAuB;IACvB,IAAI,gBAAgB,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAClC,MAAM,GAAG,UAAU,CAAC;QACpB,OAAO,GAAG,KAAK,CAAC;KACjB;SAAM,IAAI,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,eAAe,EAAE;QAClE,MAAM,GAAG,SAAS,CAAC;QACnB,OAAO,GAAG,IAAI,CAAC;QACf,SAAS,GAAG,IAAI,CAAC;KAClB;SAAM,IAAI,MAAM,CAAC,eAAe,KAAK,KAAK,EAAE;QAC3C,MAAM,GAAG,YAAY,CAAC;QACtB,OAAO,GAAG,IAAI,CAAC;QACf,SAAS,GAAG,KAAK,CAAC;KACnB;SAAM;QACL,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,aAAa,CAAC,CAAC;QACrC,MAAM,GAAG,SAAS,CAAC;KACpB;IACD,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;AAC7C,CAAC;AAzCD,sCAyCC","sourcesContent":["import type { RenovateConfig } from '../../config/types';\nimport {\n  CONFIG_SECRETS_EXPOSED,\n  CONFIG_VALIDATION,\n  REPOSITORY_ACCESS_FORBIDDEN,\n  REPOSITORY_ARCHIVED,\n  REPOSITORY_BLOCKED,\n  REPOSITORY_CLOSED_ONBOARDING,\n  REPOSITORY_DISABLED,\n  REPOSITORY_DISABLED_BY_CONFIG,\n  REPOSITORY_EMPTY,\n  REPOSITORY_FORKED,\n  REPOSITORY_MIRRORED,\n  REPOSITORY_NOT_FOUND,\n  REPOSITORY_NO_CONFIG,\n  REPOSITORY_NO_PACKAGE_FILES,\n  REPOSITORY_RENAMED,\n  REPOSITORY_UNINITIATED,\n} from '../../constants/error-messages';\nimport { logger } from '../../logger';\n\ntype ProcessStatus = 'disabled' | 'enabled' | 'onboarding' | 'unknown';\nexport interface ProcessResult {\n  res: string;\n  status: ProcessStatus;\n  enabled: boolean;\n  onboarded: boolean;\n}\n\nexport function processResult(\n  config: RenovateConfig,\n  res: string\n): ProcessResult {\n  const disabledStatuses = [\n    REPOSITORY_ACCESS_FORBIDDEN,\n    REPOSITORY_ARCHIVED,\n    REPOSITORY_BLOCKED,\n    REPOSITORY_CLOSED_ONBOARDING,\n    REPOSITORY_DISABLED,\n    REPOSITORY_DISABLED_BY_CONFIG,\n    REPOSITORY_EMPTY,\n    REPOSITORY_FORKED,\n    REPOSITORY_MIRRORED,\n    REPOSITORY_NOT_FOUND,\n    REPOSITORY_NO_CONFIG,\n    REPOSITORY_NO_PACKAGE_FILES,\n    REPOSITORY_RENAMED,\n    REPOSITORY_UNINITIATED,\n  ];\n  const enabledStatuses = [CONFIG_SECRETS_EXPOSED, CONFIG_VALIDATION];\n  let status: ProcessStatus;\n  let enabled: boolean;\n  let onboarded: boolean;\n  // istanbul ignore next\n  if (disabledStatuses.includes(res)) {\n    status = 'disabled';\n    enabled = false;\n  } else if (enabledStatuses.includes(res) || config.repoIsOnboarded) {\n    status = 'enabled';\n    enabled = true;\n    onboarded = true;\n  } else if (config.repoIsOnboarded === false) {\n    status = 'onboarding';\n    enabled = true;\n    onboarded = false;\n  } else {\n    logger.debug({ res }, 'Unknown res');\n    status = 'unknown';\n  }\n  return { res, status, enabled, onboarded };\n}\n"]}