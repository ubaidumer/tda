{"version":3,"file":"commit-message.js","sourceRoot":"","sources":["../../../../lib/workers/repository/model/commit-message.ts"],"names":[],"mappings":";;;AAAA,MAAa,aAAa;IAOxB,YAAY,OAAO,GAAG,EAAE;QAJhB,YAAO,GAAG,EAAE,CAAC;QAEb,WAAM,GAAG,EAAE,CAAC;QAGlB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC3B,CAAC;IAEM,MAAM,CAAC,YAAY,CAAC,MAAc;QACvC,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,EAAE,CAAC;SACX;QAED,IAAI,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE;YAC5C,OAAO,MAAM,CAAC;SACf;QAED,OAAO,GAAG,MAAM,GAAG,aAAa,CAAC,SAAS,EAAE,CAAC;IAC/C,CAAC;IAEM,UAAU,CAAC,OAAe;QAC/B,IAAI,CAAC,OAAO,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;IACxC,CAAC;IAEM,eAAe,CAAC,MAAe;QACpC,IAAI,CAAC,MAAM,GAAG,CAAC,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;IACtC,CAAC;IAEM,iBAAiB,CAAC,IAAa,EAAE,KAAc;QACpD,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,aAAJ,IAAI,cAAJ,IAAI,GAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;QAElC,IAAI,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,EAAE,EAAE;YACjB,IAAI,CAAC,MAAM,IAAI,IAAI,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC;SACpC;IACH,CAAC;IAEM,QAAQ;QACb,MAAM,MAAM,GAAG,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvD,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAErC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;IAC5C,CAAC;IAEO,aAAa;QACnB,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,OAAO,IAAI,CAAC,OAAO,CAAC;SACrB;QAED,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACtE,CAAC;;AApDH,sCAqDC;AApDwB,uBAAS,GAAW,GAAG,CAAC","sourcesContent":["export class CommitMessage {\n  public static readonly SEPARATOR: string = ':';\n\n  private message = '';\n\n  private prefix = '';\n\n  constructor(message = '') {\n    this.setMessage(message);\n  }\n\n  public static formatPrefix(prefix: string): string {\n    if (!prefix) {\n      return '';\n    }\n\n    if (prefix.endsWith(CommitMessage.SEPARATOR)) {\n      return prefix;\n    }\n\n    return `${prefix}${CommitMessage.SEPARATOR}`;\n  }\n\n  public setMessage(message: string): void {\n    this.message = (message || '').trim();\n  }\n\n  public setCustomPrefix(prefix?: string): void {\n    this.prefix = (prefix ?? '').trim();\n  }\n\n  public setSemanticPrefix(type?: string, scope?: string): void {\n    this.prefix = (type ?? '').trim();\n\n    if (scope?.trim()) {\n      this.prefix += `(${scope.trim()})`;\n    }\n  }\n\n  public toString(): string {\n    const prefix = CommitMessage.formatPrefix(this.prefix);\n    const message = this.formatMessage();\n\n    return [prefix, message].join(' ').trim();\n  }\n\n  private formatMessage(): string {\n    if (this.prefix) {\n      return this.message;\n    }\n\n    return this.message.charAt(0).toUpperCase() + this.message.slice(1);\n  }\n}\n"]}