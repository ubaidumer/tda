{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/workers/repository/extract/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { getManagerConfig, mergeChildConfig } from '../../../config';\nimport type { RenovateConfig } from '../../../config/types';\nimport { logger } from '../../../logger';\nimport { getManagerList } from '../../../manager';\nimport type { PackageFile } from '../../../manager/types';\nimport { getFileList } from '../../../util/git';\nimport { getMatchingFiles } from './file-match';\nimport { getManagerPackageFiles } from './manager-files';\n\nexport async function extractAllDependencies(\n  config: RenovateConfig\n): Promise<Record<string, PackageFile[]>> {\n  let managerList = getManagerList();\n  if (is.nonEmptyArray(config.enabledManagers)) {\n    logger.debug('Applying enabledManagers filtering');\n    managerList = managerList.filter((manager) =>\n      config.enabledManagers.includes(manager)\n    );\n  }\n  const extractList: RenovateConfig[] = [];\n  const fileList = await getFileList();\n\n  const tryConfig = (extractConfig: RenovateConfig): void => {\n    const matchingFileList = getMatchingFiles(extractConfig, fileList);\n    if (matchingFileList.length) {\n      extractList.push({ ...extractConfig, fileList: matchingFileList });\n    }\n  };\n\n  for (const manager of managerList) {\n    const managerConfig = getManagerConfig(config, manager);\n    managerConfig.manager = manager;\n    if (manager === 'regex') {\n      for (const regexManager of config.regexManagers) {\n        tryConfig(mergeChildConfig(managerConfig, regexManager));\n      }\n    } else {\n      tryConfig(managerConfig);\n    }\n  }\n\n  const extractResults = await Promise.all(\n    extractList.map(async (managerConfig) => {\n      const packageFiles = await getManagerPackageFiles(managerConfig);\n      return { manager: managerConfig.manager, packageFiles };\n    })\n  );\n  const extractions: Record<string, PackageFile[]> = {};\n  let fileCount = 0;\n  for (const { manager, packageFiles } of extractResults) {\n    if (packageFiles?.length) {\n      fileCount += packageFiles.length;\n      logger.debug(`Found ${manager} package files`);\n      extractions[manager] = (extractions[manager] || []).concat(packageFiles);\n    }\n  }\n  logger.debug(`Found ${fileCount} package file(s)`);\n\n  // If enabledManagers is non-empty, check that each of them has at least one extraction.\n  // If not, log a warning to indicate possible misconfiguration.\n  if (is.nonEmptyArray(config.enabledManagers)) {\n    for (const enabledManager of config.enabledManagers) {\n      if (!(enabledManager in extractions)) {\n        logger.debug(\n          { manager: enabledManager },\n          `Manager explicitly enabled in \"enabledManagers\" config, but found no results. Possible config error?`\n        );\n      }\n    }\n  }\n\n  return extractions;\n}\n"]}