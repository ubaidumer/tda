{"version":3,"file":"rebase.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/onboarding/branch/rebase.ts"],"names":[],"mappings":";;;AAAA,gEAAiE;AACjE,sDAAyD;AAEzD,+CAA4C;AAC5C,8CAK8B;AAC9B,qDAAkE;AAClE,qCAAuD;AAEvD,MAAM,iBAAiB,GAAG,CAAC,MAAsB,EAAU,EAAE,CAC3D,6BAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,wBAAwB,CAAC;IACvD,CAAC,CAAC,MAAM,CAAC,wBAAwB;IACjC,CAAC,CAAC,6BAAe,CAAC,CAAC,CAAC,CAAC;AAElB,KAAK,UAAU,sBAAsB,CAC1C,MAAsB;IAEtB,eAAM,CAAC,KAAK,CAAC,8CAA8C,CAAC,CAAC;IAC7D,IAAI,MAAM,IAAA,sBAAgB,EAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE;QACnD,eAAM,CAAC,KAAK,CAAC,yDAAyD,CAAC,CAAC;QACxE,OAAO,IAAI,CAAC;KACb;IACD,MAAM,UAAU,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;IAC7C,MAAM,gBAAgB,GAAG,MAAM,IAAA,aAAO,EAAC,UAAU,EAAE,MAAM,CAAC,gBAAgB,CAAC,CAAC;IAC5E,MAAM,QAAQ,GAAG,MAAM,IAAA,oCAA2B,EAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IACvE,IACE,QAAQ,KAAK,gBAAgB;QAC7B,CAAC,CAAC,MAAM,IAAA,mBAAa,EAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,EAC/C;QACA,eAAM,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;QAChD,OAAO,IAAI,CAAC;KACb;IACD,eAAM,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAC3C,uBAAuB;IACvB,MAAM,oBAAoB,GAAG,IAAI,+CAA8B,CAC7D,MAAM,EACN,UAAU,CACX,CAAC;IACF,MAAM,aAAa,GAAG,oBAAoB,CAAC,MAAM,EAAE,CAAC;IAEpD,qBAAqB;IACrB,IAAI,qBAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;QAC9B,eAAM,CAAC,IAAI,CAAC,kDAAkD,CAAC,CAAC;QAChE,OAAO,IAAI,CAAC;KACb;IACD,OAAO,IAAA,iBAAW,EAAC;QACjB,UAAU,EAAE,MAAM,CAAC,gBAAgB;QACnC,KAAK,EAAE;YACL;gBACE,IAAI,EAAE,UAAU;gBAChB,QAAQ;aACT;SACF;QACD,OAAO,EAAE,aAAa,CAAC,QAAQ,EAAE;KAClC,CAAC,CAAC;AACL,CAAC;AAzCD,wDAyCC","sourcesContent":["import { configFileNames } from '../../../../config/app-strings';\nimport { GlobalConfig } from '../../../../config/global';\nimport type { RenovateConfig } from '../../../../config/types';\nimport { logger } from '../../../../logger';\nimport {\n  commitFiles,\n  getFile,\n  isBranchModified,\n  isBranchStale,\n} from '../../../../util/git';\nimport { OnboardingCommitMessageFactory } from './commit-message';\nimport { getOnboardingConfigContents } from './config';\n\nconst defaultConfigFile = (config: RenovateConfig): string =>\n  configFileNames.includes(config.onboardingConfigFileName)\n    ? config.onboardingConfigFileName\n    : configFileNames[0];\n\nexport async function rebaseOnboardingBranch(\n  config: RenovateConfig\n): Promise<string | null> {\n  logger.debug('Checking if onboarding branch needs rebasing');\n  if (await isBranchModified(config.onboardingBranch)) {\n    logger.debug('Onboarding branch has been edited and cannot be rebased');\n    return null;\n  }\n  const configFile = defaultConfigFile(config);\n  const existingContents = await getFile(configFile, config.onboardingBranch);\n  const contents = await getOnboardingConfigContents(config, configFile);\n  if (\n    contents === existingContents &&\n    !(await isBranchStale(config.onboardingBranch))\n  ) {\n    logger.debug('Onboarding branch is up to date');\n    return null;\n  }\n  logger.debug('Rebasing onboarding branch');\n  // istanbul ignore next\n  const commitMessageFactory = new OnboardingCommitMessageFactory(\n    config,\n    configFile\n  );\n  const commitMessage = commitMessageFactory.create();\n\n  // istanbul ignore if\n  if (GlobalConfig.get('dryRun')) {\n    logger.info('DRY-RUN: Would rebase files in onboarding branch');\n    return null;\n  }\n  return commitFiles({\n    branchName: config.onboardingBranch,\n    files: [\n      {\n        name: configFile,\n        contents,\n      },\n    ],\n    message: commitMessage.toString(),\n  });\n}\n"]}