{"version":3,"file":"apis.js","sourceRoot":"","sources":["../../../../lib/workers/repository/init/apis.ts"],"names":[],"mappings":";;;;AAAA,6DAA8D;AAE9D,sEAG2C;AAC3C,6EAAkD;AAClD,gDAAqE;AAOrE,MAAM,iBAAiB,GAAG,CAAC,MAAsB,EAAU,EAAE,CAC3D,6BAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,wBAAwB,CAAC;IACvD,CAAC,CAAC,MAAM,CAAC,wBAAwB;IACjC,CAAC,CAAC,6BAAe,CAAC,CAAC,CAAC,CAAC;AAEzB,KAAK,UAAU,WAAW,CAAC,IAAY;IACrC,IAAI;QACF,OAAO,MAAM,mBAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;KACzC;IAAC,OAAO,GAAG,EAAE;QACZ,OAAO,IAAI,CAAC;KACb;AACH,CAAC;AAED,KAAK,UAAU,2BAA2B,CACxC,MAAsB;IAEtB,IAAI,MAAM,CAAC,mBAAmB,EAAE;QAC9B,MAAM,cAAc,GAAG,MAAM,WAAW,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;QACpE,IAAI,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,OAAO,MAAK,KAAK,EAAE;YACrC,MAAM,IAAI,KAAK,CAAC,8CAA6B,CAAC,CAAC;SAChD;KACF;AACH,CAAC;AAED,KAAK,UAAU,oBAAoB,CAAC,MAAsB;IACxD,IAAI,CAAC,MAAM,CAAC,YAAY,IAAI,MAAM,CAAC,MAAM,EAAE;QACzC,MAAM,cAAc,GAAG,MAAM,WAAW,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;QACpE,IAAI,CAAC,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,YAAY,CAAA,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,kCAAiB,CAAC,CAAC;SACpC;KACF;AACH,CAAC;AAED,kBAAkB;AAClB,KAAK,UAAU,iBAAiB,CAC9B,MAAkB;IAElB,MAAM,cAAc,GAAG,MAAM,mBAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IACvD,OAAO;QACL,GAAG,MAAM;QACT,GAAG,cAAc;KAClB,CAAC;AACJ,CAAC;AAED,kBAAkB;AACX,KAAK,UAAU,QAAQ,CAC5B,KAAqB;IAErB,IAAI,MAAM,GAAyB,EAAE,GAAG,KAAK,EAAW,CAAC;IACzD,MAAM,GAAG,MAAM,iBAAiB,CAAC,MAAe,CAAC,CAAC;IAClD,MAAM,2BAA2B,CAAC,MAAM,CAAC,CAAC;IAC1C,MAAM,oBAAoB,CAAC,MAAM,CAAC,CAAC;IACnC,MAAM,CAAC,aAAa,EAAE,CAAC;IACvB,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC9B,OAAO,MAAM,CAAC;AAChB,CAAC;AAVD,4BAUC","sourcesContent":["import { configFileNames } from '../../../config/app-strings';\nimport type { RenovateConfig } from '../../../config/types';\nimport {\n  REPOSITORY_DISABLED_BY_CONFIG,\n  REPOSITORY_FORKED,\n} from '../../../constants/error-messages';\nimport * as npmApi from '../../../datasource/npm';\nimport { RepoParams, RepoResult, platform } from '../../../platform';\n\n// TODO: fix types\nexport type WorkerPlatformConfig = RepoResult &\n  RenovateConfig &\n  Record<string, any>;\n\nconst defaultConfigFile = (config: RenovateConfig): string =>\n  configFileNames.includes(config.onboardingConfigFileName)\n    ? config.onboardingConfigFileName\n    : configFileNames[0];\n\nasync function getJsonFile(file: string): Promise<RenovateConfig | null> {\n  try {\n    return await platform.getJsonFile(file);\n  } catch (err) {\n    return null;\n  }\n}\n\nasync function validateOptimizeForDisabled(\n  config: RenovateConfig\n): Promise<void> {\n  if (config.optimizeForDisabled) {\n    const renovateConfig = await getJsonFile(defaultConfigFile(config));\n    if (renovateConfig?.enabled === false) {\n      throw new Error(REPOSITORY_DISABLED_BY_CONFIG);\n    }\n  }\n}\n\nasync function validateIncludeForks(config: RenovateConfig): Promise<void> {\n  if (!config.includeForks && config.isFork) {\n    const renovateConfig = await getJsonFile(defaultConfigFile(config));\n    if (!renovateConfig?.includeForks) {\n      throw new Error(REPOSITORY_FORKED);\n    }\n  }\n}\n\n// TODO: fix types\nasync function getPlatformConfig(\n  config: RepoParams\n): Promise<WorkerPlatformConfig> {\n  const platformConfig = await platform.initRepo(config);\n  return {\n    ...config,\n    ...platformConfig,\n  };\n}\n\n// TODO: fix types\nexport async function initApis(\n  input: RenovateConfig\n): Promise<WorkerPlatformConfig> {\n  let config: WorkerPlatformConfig = { ...input } as never;\n  config = await getPlatformConfig(config as never);\n  await validateOptimizeForDisabled(config);\n  await validateIncludeForks(config);\n  npmApi.resetMemCache();\n  npmApi.setNpmrc(config.npmrc);\n  return config;\n}\n"]}