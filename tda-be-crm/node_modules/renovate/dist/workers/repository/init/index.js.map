{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/workers/repository/init/index.ts"],"names":[],"mappings":";;;AAAA,qDAA+D;AAE/D,4CAAyC;AACzC,gDAA6C;AAC7C,+CAA4C;AAC5C,2CAAsD;AACtD,8CAAkD;AAClD,iCAAkC;AAClC,mCAA2C;AAC3C,qCAAyC;AACzC,mDAA4D;AAE5D,SAAS,gBAAgB,CAAC,MAAsB;IAC9C,OAAO,EAAE,GAAG,IAAA,aAAK,EAAC,MAAM,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC;AACxE,CAAC;AAED,SAAS,wBAAwB,CAAC,MAAsB;IACtD,IAAI,MAAM,CAAC,sBAAsB,IAAI,CAAC,mBAAQ,CAAC,sBAAsB,EAAE;QACrE,eAAM,CAAC,IAAI,CACT,2FAA2F,MAAM,CAAC,QAAQ,IAAI,CAC/G,CAAC;KACH;AACH,CAAC;AAEM,KAAK,UAAU,QAAQ,CAC5B,OAAuB;IAEvB,IAAI,MAAM,GAAmB,gBAAgB,CAAC,OAAO,CAAC,CAAC;IACvD,MAAM,IAAA,wBAAgB,EAAC,MAAM,CAAC,CAAC;IAC/B,MAAM,GAAG,MAAM,IAAA,eAAQ,EAAC,MAAM,CAAC,CAAC;IAChC,MAAM,GAAG,MAAM,IAAA,sBAAa,EAAC,MAAM,CAAC,CAAC;IACrC,IAAA,8BAAiB,EAAC,MAAM,CAAC,CAAC;IAC1B,wBAAwB,CAAC,MAAM,CAAC,CAAC;IACjC,MAAM,GAAG,IAAA,8BAAoB,EAAC,MAAM,CAAC,CAAC;IACtC,IAAA,uBAAiB,EAAC,MAAM,CAAC,CAAC;IAC1B,MAAM,GAAG,MAAM,IAAA,yCAAyB,EAAC,MAAM,CAAC,CAAC;IACjD,qBAAqB;IACrB,IAAI,MAAM,CAAC,WAAW,EAAE;QACtB,eAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,wCAAwC,CAAC,CAAC;KACnE;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAjBD,4BAiBC","sourcesContent":["import { applySecretsToConfig } from '../../../config/secrets';\nimport type { RenovateConfig } from '../../../config/types';\nimport { logger } from '../../../logger';\nimport { platform } from '../../../platform';\nimport { clone } from '../../../util/clone';\nimport { setUserRepoConfig } from '../../../util/git';\nimport { checkIfConfigured } from '../configured';\nimport { initApis } from './apis';\nimport { initializeCaches } from './cache';\nimport { getRepoConfig } from './config';\nimport { detectVulnerabilityAlerts } from './vulnerability';\n\nfunction initializeConfig(config: RenovateConfig): RenovateConfig {\n  return { ...clone(config), errors: [], warnings: [], branchList: [] };\n}\n\nfunction warnOnUnsupportedOptions(config: RenovateConfig): void {\n  if (config.filterUnavailableUsers && !platform.filterUnavailableUsers) {\n    logger.warn(\n      `Configuration option 'filterUnavailableUsers' is not supported on the current platform '${config.platform}'.`\n    );\n  }\n}\n\nexport async function initRepo(\n  config_: RenovateConfig\n): Promise<RenovateConfig> {\n  let config: RenovateConfig = initializeConfig(config_);\n  await initializeCaches(config);\n  config = await initApis(config);\n  config = await getRepoConfig(config);\n  checkIfConfigured(config);\n  warnOnUnsupportedOptions(config);\n  config = applySecretsToConfig(config);\n  setUserRepoConfig(config);\n  config = await detectVulnerabilityAlerts(config);\n  // istanbul ignore if\n  if (config.printConfig) {\n    logger.info({ config }, 'Full resolved config including presets');\n  }\n  return config;\n}\n"]}