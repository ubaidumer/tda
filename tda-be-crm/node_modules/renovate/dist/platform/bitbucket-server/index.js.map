{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/platform/bitbucket-server/index.ts"],"names":[],"mappings":"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","sourcesContent":["import url from 'url';\nimport is from '@sindresorhus/is';\nimport delay from 'delay';\nimport JSON5 from 'json5';\nimport type { PartialDeep } from 'type-fest';\nimport { PlatformId } from '../../constants';\nimport {\n  REPOSITORY_CHANGED,\n  REPOSITORY_EMPTY,\n  REPOSITORY_NOT_FOUND,\n} from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { BranchStatus, PrState, VulnerabilityAlert } from '../../types';\nimport { GitProtocol } from '../../types/git';\nimport type { FileData } from '../../types/platform/bitbucket-server';\nimport * as git from '../../util/git';\nimport { deleteBranch } from '../../util/git';\nimport * as hostRules from '../../util/host-rules';\nimport { HttpResponse } from '../../util/http';\nimport {\n  BitbucketServerHttp,\n  setBaseUrl,\n} from '../../util/http/bitbucket-server';\nimport { regEx } from '../../util/regex';\nimport { sanitize } from '../../util/sanitize';\nimport { ensureTrailingSlash, getQueryString } from '../../util/url';\nimport type {\n  BranchStatusConfig,\n  CreatePRConfig,\n  EnsureCommentConfig,\n  EnsureCommentRemovalConfig,\n  EnsureIssueConfig,\n  EnsureIssueResult,\n  FindPRConfig,\n  Issue,\n  MergePRConfig,\n  PlatformParams,\n  PlatformResult,\n  Pr,\n  RepoParams,\n  RepoResult,\n  UpdatePrConfig,\n} from '../types';\nimport { smartTruncate } from '../utils/pr-body';\nimport type {\n  BbsConfig,\n  BbsPr,\n  BbsRestBranch,\n  BbsRestPr,\n  BbsRestRepo,\n  BbsRestUserRef,\n} from './types';\nimport * as utils from './utils';\n\n/*\n * Version: 5.3 (EOL Date: 15 Aug 2019)\n * See following docs for api information:\n * https://docs.atlassian.com/bitbucket-server/rest/5.3.0/bitbucket-rest.html\n * https://docs.atlassian.com/bitbucket-server/rest/5.3.0/bitbucket-build-rest.html\n *\n * See following page for uptodate supported versions\n * https://confluence.atlassian.com/support/atlassian-support-end-of-life-policy-201851003.html#AtlassianSupportEndofLifePolicy-BitbucketServer\n */\n\nlet config: BbsConfig = {} as any;\n\nconst bitbucketServerHttp = new BitbucketServerHttp();\n\nconst defaults: {\n  endpoint?: string;\n  hostType: string;\n} = {\n  hostType: PlatformId.BitbucketServer,\n};\n\n/* istanbul ignore next */\nfunction updatePrVersion(pr: number, version: number): number {\n  const res = Math.max(config.prVersions.get(pr) || 0, version);\n  config.prVersions.set(pr, res);\n  return res;\n}\n\nexport function initPlatform({\n  endpoint,\n  username,\n  password,\n}: PlatformParams): Promise<PlatformResult> {\n  if (!endpoint) {\n    throw new Error('Init: You must configure a Bitbucket Server endpoint');\n  }\n  if (!(username && password)) {\n    throw new Error(\n      'Init: You must configure a Bitbucket Server username/password'\n    );\n  }\n  // TODO: Add a connection check that endpoint/username/password combination are valid (#9595)\n  defaults.endpoint = ensureTrailingSlash(endpoint);\n  setBaseUrl(defaults.endpoint);\n  const platformConfig: PlatformResult = {\n    endpoint: defaults.endpoint,\n  };\n  return Promise.resolve(platformConfig);\n}\n\n// Get all repositories that the user has access to\nexport async function getRepos(): Promise<string[]> {\n  logger.debug('Autodiscovering Bitbucket Server repositories');\n  try {\n    const repos = await utils.accumulateValues(\n      `./rest/api/1.0/repos?permission=REPO_WRITE&state=AVAILABLE`\n    );\n    const result = repos.map(\n      (r: { project: { key: string }; slug: string }) =>\n        `${r.project.key.toLowerCase()}/${r.slug}`\n    );\n    logger.debug({ result }, 'result of getRepos()');\n    return result;\n  } catch (err) /* istanbul ignore next */ {\n    logger.error({ err }, `bitbucket getRepos error`);\n    throw err;\n  }\n}\n\nexport async function getRawFile(\n  fileName: string,\n  repoName?: string,\n  branchOrTag?: string\n): Promise<string | null> {\n  const repo = repoName ?? config.repository;\n  const [project, slug] = repo.split('/');\n  const fileUrl =\n    `./rest/api/1.0/projects/${project}/repos/${slug}/browse/${fileName}?limit=20000` +\n    (branchOrTag ? '&at=' + branchOrTag : '');\n  const res = await bitbucketServerHttp.getJson<FileData>(fileUrl);\n  const { isLastPage, lines, size } = res.body;\n  if (isLastPage) {\n    return lines.map(({ text }) => text).join('');\n  }\n  const msg = `The file is too big (${size}B)`;\n  logger.warn({ size }, msg);\n  throw new Error(msg);\n}\n\nexport async function getJsonFile(\n  fileName: string,\n  repoName?: string,\n  branchOrTag?: string\n): Promise<any | null> {\n  const raw = await getRawFile(fileName, repoName, branchOrTag);\n  if (fileName.endsWith('.json5')) {\n    return JSON5.parse(raw);\n  }\n  return JSON.parse(raw);\n}\n\n// Initialize BitBucket Server by getting base branch\nexport async function initRepo({\n  repository,\n  cloneSubmodules,\n  ignorePrAuthor,\n}: RepoParams): Promise<RepoResult> {\n  logger.debug(`initRepo(\"${JSON.stringify({ repository }, null, 2)}\")`);\n  const opts = hostRules.find({\n    hostType: defaults.hostType,\n    url: defaults.endpoint,\n  });\n\n  const [projectKey, repositorySlug] = repository.split('/');\n\n  config = {\n    projectKey,\n    repositorySlug,\n    repository,\n    prVersions: new Map<number, number>(),\n    username: opts.username,\n    ignorePrAuthor,\n  } as any;\n\n  try {\n    const info = (\n      await bitbucketServerHttp.getJson<BbsRestRepo>(\n        `./rest/api/1.0/projects/${config.projectKey}/repos/${config.repositorySlug}`\n      )\n    ).body;\n    config.owner = info.project.key;\n    logger.debug(`${repository} owner = ${config.owner}`);\n    const branchRes = await bitbucketServerHttp.getJson<BbsRestBranch>(\n      `./rest/api/1.0/projects/${config.projectKey}/repos/${config.repositorySlug}/branches/default`\n    );\n\n    // 204 means empty, 404 means repo not found or missing default branch. repo must exist here.\n    if ([204, 404].includes(branchRes.statusCode)) {\n      throw new Error(REPOSITORY_EMPTY);\n    }\n\n    let cloneUrl = info.links.clone?.find(({ name }) => name === 'http');\n    if (!cloneUrl) {\n      // Http access might be disabled, try to find ssh url in this case\n      cloneUrl = info.links.clone?.find(({ name }) => name === 'ssh');\n    }\n\n    let gitUrl: string;\n    if (!cloneUrl) {\n      // Fallback to generating the url if the API didn't give us an URL\n      const { host, pathname } = url.parse(defaults.endpoint);\n      gitUrl = git.getUrl({\n        protocol: defaults.endpoint.split(':')[0] as GitProtocol,\n        auth: `${opts.username}:${opts.password}`,\n        host: `${host}${pathname}${\n          pathname.endsWith('/') ? '' : /* istanbul ignore next */ '/'\n        }scm`,\n        repository,\n      });\n    } else if (cloneUrl.name === 'http') {\n      // Inject auth into the API provided URL\n      const repoUrl = url.parse(cloneUrl.href);\n      repoUrl.auth = `${opts.username}:${opts.password}`;\n      gitUrl = url.format(repoUrl);\n    } else {\n      // SSH urls can be used directly\n      gitUrl = cloneUrl.href;\n    }\n\n    await git.initRepo({\n      ...config,\n      url: gitUrl,\n      cloneSubmodules,\n      fullClone: true,\n    });\n\n    config.mergeMethod = 'merge';\n    const repoConfig: RepoResult = {\n      defaultBranch: branchRes.body.displayId,\n      isFork: !!info.origin,\n    };\n\n    return repoConfig;\n  } catch (err) /* istanbul ignore next */ {\n    if (err.statusCode === 404) {\n      throw new Error(REPOSITORY_NOT_FOUND);\n    }\n    if (err.message === REPOSITORY_EMPTY) {\n      throw err;\n    }\n\n    logger.debug({ err }, 'Unknown Bitbucket initRepo error');\n    throw err;\n  }\n}\n\nexport async function getRepoForceRebase(): Promise<boolean> {\n  logger.debug(`getRepoForceRebase()`);\n\n  // https://docs.atlassian.com/bitbucket-server/rest/7.0.1/bitbucket-rest.html#idp342\n  const res = await bitbucketServerHttp.getJson<{\n    mergeConfig: { defaultStrategy: { id: string } };\n  }>(\n    `./rest/api/1.0/projects/${config.projectKey}/repos/${config.repositorySlug}/settings/pull-requests`\n  );\n\n  // If the default merge strategy contains `ff-only` the PR can only be merged\n  // if it is up to date with the base branch.\n  // The current options for id are:\n  // no-ff, ff, ff-only, rebase-no-ff, rebase-ff-only, squash, squash-ff-only\n  return Boolean(\n    res.body?.mergeConfig?.defaultStrategy?.id.includes('ff-only')\n  );\n}\n// Gets details for a PR\nexport async function getPr(\n  prNo: number,\n  refreshCache?: boolean\n): Promise<BbsPr | null> {\n  logger.debug(`getPr(${prNo})`);\n  if (!prNo) {\n    return null;\n  }\n\n  const res = await bitbucketServerHttp.getJson<BbsRestPr>(\n    `./rest/api/1.0/projects/${config.projectKey}/repos/${config.repositorySlug}/pull-requests/${prNo}`,\n    { useCache: !refreshCache }\n  );\n\n  const pr: BbsPr = {\n    displayNumber: `Pull Request #${res.body.id}`,\n    ...utils.prInfo(res.body),\n    reviewers: res.body.reviewers.map((r) => r.user.name),\n  };\n  pr.hasReviewers = is.nonEmptyArray(pr.reviewers);\n  pr.version = updatePrVersion(pr.number, pr.version);\n\n  if (pr.state === PrState.Open) {\n    const mergeRes = await bitbucketServerHttp.getJson<{\n      conflicted: string;\n      canMerge: string;\n    }>(\n      `./rest/api/1.0/projects/${config.projectKey}/repos/${config.repositorySlug}/pull-requests/${prNo}/merge`,\n      { useCache: !refreshCache }\n    );\n    pr.isConflicted = !!mergeRes.body.conflicted;\n    pr.canMerge = !!mergeRes.body.canMerge;\n  }\n\n  return pr;\n}\n\n// TODO: coverage (#9624)\n// istanbul ignore next\nfunction matchesState(state: string, desiredState: string): boolean {\n  if (desiredState === PrState.All) {\n    return true;\n  }\n  if (desiredState.startsWith('!')) {\n    return state !== desiredState.substring(1);\n  }\n  return state === desiredState;\n}\n\n// TODO: coverage (#9624)\n// istanbul ignore next\nconst isRelevantPr =\n  (branchName: string, prTitle: string | null | undefined, state: string) =>\n  (p: Pr): boolean =>\n    p.sourceBranch === branchName &&\n    (!prTitle || p.title === prTitle) &&\n    matchesState(p.state, state);\n\n// TODO: coverage (#9624)\nexport async function getPrList(refreshCache?: boolean): Promise<Pr[]> {\n  logger.debug(`getPrList()`);\n  // istanbul ignore next\n  if (!config.prList || refreshCache) {\n    const searchParams = {\n      state: 'ALL',\n    };\n    if (!config.ignorePrAuthor) {\n      searchParams['role.1'] = 'AUTHOR';\n      searchParams['username.1'] = config.username;\n    }\n    const query = getQueryString(searchParams);\n    const values = await utils.accumulateValues(\n      `./rest/api/1.0/projects/${config.projectKey}/repos/${config.repositorySlug}/pull-requests?${query}`\n    );\n\n    config.prList = values.map(utils.prInfo);\n    logger.debug({ length: config.prList.length }, 'Retrieved Pull Requests');\n  } else {\n    logger.debug('returning cached PR list');\n  }\n  return config.prList;\n}\n\n// TODO: coverage (#9624)\n// istanbul ignore next\nexport async function findPr({\n  branchName,\n  prTitle,\n  state = PrState.All,\n  refreshCache,\n}: FindPRConfig): Promise<Pr | null> {\n  logger.debug(`findPr(${branchName}, \"${prTitle}\", \"${state}\")`);\n  const prList = await getPrList(refreshCache);\n  const pr = prList.find(isRelevantPr(branchName, prTitle, state));\n  if (pr) {\n    logger.debug(`Found PR #${pr.number}`);\n  } else {\n    logger.debug(`DID NOT Found PR from branch #${branchName}`);\n  }\n  return pr;\n}\n\n// Returns the Pull Request for a branch. Null if not exists.\nexport async function getBranchPr(branchName: string): Promise<BbsPr | null> {\n  logger.debug(`getBranchPr(${branchName})`);\n  const existingPr = await findPr({\n    branchName,\n    state: PrState.Open,\n  });\n  return existingPr ? getPr(existingPr.number) : null;\n}\n\n// istanbul ignore next\nexport async function refreshPr(number: number): Promise<void> {\n  // wait for pr change propagation\n  await delay(1000);\n  // refresh cache\n  await getPr(number, true);\n}\n\nasync function getStatus(\n  branchName: string,\n  useCache = true\n): Promise<utils.BitbucketCommitStatus> {\n  const branchCommit = git.getBranchCommit(branchName);\n\n  return (\n    await bitbucketServerHttp.getJson<utils.BitbucketCommitStatus>(\n      `./rest/build-status/1.0/commits/stats/${branchCommit}`,\n      {\n        useCache,\n      }\n    )\n  ).body;\n}\n\n// Returns the combined status for a branch.\n// umbrella for status checks\n// https://docs.atlassian.com/bitbucket-server/rest/6.0.0/bitbucket-build-rest.html#idp2\nexport async function getBranchStatus(\n  branchName: string\n): Promise<BranchStatus> {\n  logger.debug(`getBranchStatus(${branchName})`);\n\n  if (!git.branchExists(branchName)) {\n    logger.debug('Branch does not exist - cannot fetch status');\n    throw new Error(REPOSITORY_CHANGED);\n  }\n\n  try {\n    const commitStatus = await getStatus(branchName);\n\n    logger.debug({ commitStatus }, 'branch status check result');\n\n    if (commitStatus.failed > 0) {\n      return BranchStatus.red;\n    }\n    if (commitStatus.inProgress > 0) {\n      return BranchStatus.yellow;\n    }\n    return commitStatus.successful > 0\n      ? BranchStatus.green\n      : BranchStatus.yellow;\n  } catch (err) {\n    logger.warn({ err }, `Failed to get branch status`);\n    return BranchStatus.red;\n  }\n}\n\nfunction getStatusCheck(\n  branchName: string,\n  useCache = true\n): Promise<utils.BitbucketStatus[]> {\n  const branchCommit = git.getBranchCommit(branchName);\n\n  return utils.accumulateValues(\n    `./rest/build-status/1.0/commits/${branchCommit}`,\n    'get',\n    { useCache }\n  );\n}\n\n// https://docs.atlassian.com/bitbucket-server/rest/6.0.0/bitbucket-build-rest.html#idp2\nexport async function getBranchStatusCheck(\n  branchName: string,\n  context: string\n): Promise<BranchStatus | null> {\n  logger.debug(`getBranchStatusCheck(${branchName}, context=${context})`);\n\n  try {\n    const states = await getStatusCheck(branchName);\n\n    for (const state of states) {\n      if (state.key === context) {\n        switch (state.state) {\n          case 'SUCCESSFUL':\n            return BranchStatus.green;\n          case 'INPROGRESS':\n            return BranchStatus.yellow;\n          case 'FAILED':\n          default:\n            return BranchStatus.red;\n        }\n      }\n    }\n  } catch (err) {\n    logger.warn({ err }, `Failed to check branch status`);\n  }\n  return null;\n}\n\nexport async function setBranchStatus({\n  branchName,\n  context,\n  description,\n  state,\n  url: targetUrl,\n}: BranchStatusConfig): Promise<void> {\n  logger.debug(`setBranchStatus(${branchName})`);\n\n  const existingStatus = await getBranchStatusCheck(branchName, context);\n  if (existingStatus === state) {\n    return;\n  }\n  logger.debug({ branch: branchName, context, state }, 'Setting branch status');\n\n  const branchCommit = git.getBranchCommit(branchName);\n\n  try {\n    const body: any = {\n      key: context,\n      description,\n      url: targetUrl || 'https://renovatebot.com',\n    };\n\n    switch (state) {\n      case BranchStatus.green:\n        body.state = 'SUCCESSFUL';\n        break;\n      case BranchStatus.yellow:\n        body.state = 'INPROGRESS';\n        break;\n      case BranchStatus.red:\n      default:\n        body.state = 'FAILED';\n        break;\n    }\n\n    await bitbucketServerHttp.postJson(\n      `./rest/build-status/1.0/commits/${branchCommit}`,\n      { body }\n    );\n\n    // update status cache\n    await getStatus(branchName, false);\n    await getStatusCheck(branchName, false);\n  } catch (err) {\n    logger.warn({ err }, `Failed to set branch status`);\n  }\n}\n\n// Issue\n\n/* istanbul ignore next */\nexport function findIssue(title: string): Promise<Issue | null> {\n  logger.debug(`findIssue(${title})`);\n  // This is used by Renovate when creating its own issues,\n  // e.g. for deprecated package warnings,\n  // config error notifications, or \"dependencyDashboard\"\n  //\n  // Bitbucket Server does not have issues\n  return null;\n}\n\n/* istanbul ignore next */\nexport function ensureIssue({\n  title,\n}: EnsureIssueConfig): Promise<EnsureIssueResult | null> {\n  logger.warn({ title }, 'Cannot ensure issue');\n  // This is used by Renovate when creating its own issues,\n  // e.g. for deprecated package warnings,\n  // config error notifications, or \"dependencyDashboard\"\n  //\n  // Bitbucket Server does not have issues\n  return null;\n}\n\n/* istanbul ignore next */\nexport function getIssueList(): Promise<Issue[]> {\n  logger.debug(`getIssueList()`);\n  // This is used by Renovate when creating its own issues,\n  // e.g. for deprecated package warnings,\n  // config error notifications, or \"dependencyDashboard\"\n  //\n  // Bitbucket Server does not have issues\n  return Promise.resolve([]);\n}\n\n/* istanbul ignore next */\nexport function ensureIssueClosing(title: string): Promise<void> {\n  logger.debug(`ensureIssueClosing(${title})`);\n  // This is used by Renovate when creating its own issues,\n  // e.g. for deprecated package warnings,\n  // config error notifications, or \"dependencyDashboard\"\n  //\n  // Bitbucket Server does not have issues\n  return Promise.resolve();\n}\n\nexport function addAssignees(iid: number, assignees: string[]): Promise<void> {\n  logger.debug(`addAssignees(${iid}, [${assignees.join(', ')}])`);\n  // This is used by Renovate when creating its own issues,\n  // e.g. for deprecated package warnings,\n  // config error notifications, or \"dependencyDashboard\"\n  //\n  // Bitbucket Server does not have issues\n  return Promise.resolve();\n}\n\nexport async function addReviewers(\n  prNo: number,\n  reviewers: string[]\n): Promise<void> {\n  logger.debug(`Adding reviewers '${reviewers.join(', ')}' to #${prNo}`);\n\n  try {\n    const pr = await getPr(prNo);\n    if (!pr) {\n      throw new Error(REPOSITORY_NOT_FOUND);\n    }\n\n    const reviewersSet = new Set([...pr.reviewers, ...reviewers]);\n\n    await bitbucketServerHttp.putJson(\n      `./rest/api/1.0/projects/${config.projectKey}/repos/${config.repositorySlug}/pull-requests/${prNo}`,\n      {\n        body: {\n          title: pr.title,\n          version: pr.version,\n          reviewers: Array.from(reviewersSet).map((name) => ({\n            user: { name },\n          })),\n        },\n      }\n    );\n    await getPr(prNo, true);\n  } catch (err) {\n    logger.warn({ err, reviewers, prNo }, `Failed to add reviewers`);\n    if (err.statusCode === 404) {\n      throw new Error(REPOSITORY_NOT_FOUND);\n    } else if (\n      err.statusCode === 409 &&\n      !utils.isInvalidReviewersResponse(err)\n    ) {\n      logger.debug(\n        '409 response to adding reviewers - has repository changed?'\n      );\n      throw new Error(REPOSITORY_CHANGED);\n    } else {\n      throw err;\n    }\n  }\n}\n\nexport function deleteLabel(issueNo: number, label: string): Promise<void> {\n  logger.debug(`deleteLabel(${issueNo}, ${label})`);\n  // Only used for the \"request Renovate to rebase a PR using a label\" feature\n  //\n  // Bitbucket Server does not have issues\n  return Promise.resolve();\n}\n\ntype Comment = { text: string; id: number };\n\nasync function getComments(prNo: number): Promise<Comment[]> {\n  // GET /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/activities\n  let comments = await utils.accumulateValues(\n    `./rest/api/1.0/projects/${config.projectKey}/repos/${config.repositorySlug}/pull-requests/${prNo}/activities`\n  );\n\n  comments = comments\n    .filter(\n      (a: { action: string; commentAction: string }) =>\n        a.action === 'COMMENTED' && a.commentAction === 'ADDED'\n    )\n    .map((a: { comment: Comment }) => a.comment);\n\n  logger.debug(`Found ${comments.length} comments`);\n\n  return comments;\n}\n\nasync function addComment(prNo: number, text: string): Promise<void> {\n  // POST /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments\n  await bitbucketServerHttp.postJson(\n    `./rest/api/1.0/projects/${config.projectKey}/repos/${config.repositorySlug}/pull-requests/${prNo}/comments`,\n    {\n      body: { text },\n    }\n  );\n}\n\nasync function getCommentVersion(\n  prNo: number,\n  commentId: number\n): Promise<number> {\n  // GET /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}\n  const { version } = (\n    await bitbucketServerHttp.getJson<{ version: number }>(\n      `./rest/api/1.0/projects/${config.projectKey}/repos/${config.repositorySlug}/pull-requests/${prNo}/comments/${commentId}`\n    )\n  ).body;\n\n  return version;\n}\n\nasync function editComment(\n  prNo: number,\n  commentId: number,\n  text: string\n): Promise<void> {\n  const version = await getCommentVersion(prNo, commentId);\n\n  // PUT /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}\n  await bitbucketServerHttp.putJson(\n    `./rest/api/1.0/projects/${config.projectKey}/repos/${config.repositorySlug}/pull-requests/${prNo}/comments/${commentId}`,\n    {\n      body: { text, version },\n    }\n  );\n}\n\nasync function deleteComment(prNo: number, commentId: number): Promise<void> {\n  const version = await getCommentVersion(prNo, commentId);\n\n  // DELETE /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}\n  await bitbucketServerHttp.deleteJson(\n    `./rest/api/1.0/projects/${config.projectKey}/repos/${config.repositorySlug}/pull-requests/${prNo}/comments/${commentId}?version=${version}`\n  );\n}\n\nexport async function ensureComment({\n  number,\n  topic,\n  content,\n}: EnsureCommentConfig): Promise<boolean> {\n  const sanitizedContent = sanitize(content);\n  try {\n    const comments = await getComments(number);\n    let body: string;\n    let commentId: number | undefined;\n    let commentNeedsUpdating: boolean | undefined;\n    if (topic) {\n      logger.debug(`Ensuring comment \"${topic}\" in #${number}`);\n      body = `### ${topic}\\n\\n${sanitizedContent}`;\n      comments.forEach((comment) => {\n        if (comment.text.startsWith(`### ${topic}\\n\\n`)) {\n          commentId = comment.id;\n          commentNeedsUpdating = comment.text !== body;\n        }\n      });\n    } else {\n      logger.debug(`Ensuring content-only comment in #${number}`);\n      body = `${sanitizedContent}`;\n      comments.forEach((comment) => {\n        if (comment.text === body) {\n          commentId = comment.id;\n          commentNeedsUpdating = false;\n        }\n      });\n    }\n    if (!commentId) {\n      await addComment(number, body);\n      logger.info(\n        { repository: config.repository, prNo: number, topic },\n        'Comment added'\n      );\n    } else if (commentNeedsUpdating) {\n      await editComment(number, commentId, body);\n      logger.debug(\n        { repository: config.repository, prNo: number },\n        'Comment updated'\n      );\n    } else {\n      logger.debug('Comment is already update-to-date');\n    }\n    return true;\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'Error ensuring comment');\n    return false;\n  }\n}\n\nexport async function ensureCommentRemoval({\n  number: prNo,\n  topic,\n  content,\n}: EnsureCommentRemovalConfig): Promise<void> {\n  try {\n    logger.debug(\n      `Ensuring comment \"${topic || content}\" in #${prNo} is removed`\n    );\n    const comments = await getComments(prNo);\n\n    const byTopic = (comment: Comment): boolean =>\n      comment.text.startsWith(`### ${topic}\\n\\n`);\n    const byContent = (comment: Comment): boolean =>\n      comment.text.trim() === content;\n\n    let commentId: number | null = null;\n\n    if (topic) {\n      commentId = comments.find(byTopic)?.id;\n    } else if (content) {\n      commentId = comments.find(byContent)?.id;\n    }\n\n    if (commentId) {\n      await deleteComment(prNo, commentId);\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'Error ensuring comment removal');\n  }\n}\n\n// Pull Request\n\nconst escapeHash = (input: string): string =>\n  input ? input.replace(regEx(/#/g), '%23') : input;\n\nexport async function createPr({\n  sourceBranch,\n  targetBranch,\n  prTitle: title,\n  prBody: rawDescription,\n  platformOptions,\n}: CreatePRConfig): Promise<Pr> {\n  const description = sanitize(rawDescription);\n  logger.debug(`createPr(${sourceBranch}, title=${title})`);\n  const base = targetBranch;\n  let reviewers: BbsRestUserRef[] = [];\n\n  /* istanbul ignore else */\n  if (platformOptions?.bbUseDefaultReviewers) {\n    logger.debug(`fetching default reviewers`);\n    const { id } = (\n      await bitbucketServerHttp.getJson<{ id: number }>(\n        `./rest/api/1.0/projects/${config.projectKey}/repos/${config.repositorySlug}`\n      )\n    ).body;\n\n    const defReviewers = (\n      await bitbucketServerHttp.getJson<{ name: string }[]>(\n        `./rest/default-reviewers/1.0/projects/${config.projectKey}/repos/${\n          config.repositorySlug\n        }/reviewers?sourceRefId=refs/heads/${escapeHash(\n          sourceBranch\n        )}&targetRefId=refs/heads/${base}&sourceRepoId=${id}&targetRepoId=${id}`\n      )\n    ).body;\n\n    reviewers = defReviewers.map((u) => ({\n      user: { name: u.name },\n    }));\n  }\n\n  const body: PartialDeep<BbsRestPr> = {\n    title,\n    description,\n    fromRef: {\n      id: `refs/heads/${sourceBranch}`,\n    },\n    toRef: {\n      id: `refs/heads/${base}`,\n    },\n    reviewers,\n  };\n  let prInfoRes: HttpResponse<BbsRestPr>;\n  try {\n    prInfoRes = await bitbucketServerHttp.postJson<BbsRestPr>(\n      `./rest/api/1.0/projects/${config.projectKey}/repos/${config.repositorySlug}/pull-requests`,\n      { body }\n    );\n  } catch (err) /* istanbul ignore next */ {\n    if (\n      err.body?.errors?.[0]?.exceptionName ===\n      'com.atlassian.bitbucket.pull.EmptyPullRequestException'\n    ) {\n      logger.debug(\n        'Empty pull request - deleting branch so it can be recreated next run'\n      );\n      await deleteBranch(sourceBranch);\n      throw new Error(REPOSITORY_CHANGED);\n    }\n    throw err;\n  }\n\n  const pr: BbsPr = {\n    displayNumber: `Pull Request #${prInfoRes.body.id}`,\n    ...utils.prInfo(prInfoRes.body),\n  };\n\n  updatePrVersion(pr.number, pr.version);\n\n  // istanbul ignore if\n  if (config.prList) {\n    config.prList.push(pr);\n  }\n\n  return pr;\n}\n\nexport async function updatePr({\n  number: prNo,\n  prTitle: title,\n  prBody: rawDescription,\n  state,\n  bitbucketInvalidReviewers,\n}: UpdatePrConfig & {\n  bitbucketInvalidReviewers: string[] | undefined;\n}): Promise<void> {\n  const description = sanitize(rawDescription);\n  logger.debug(`updatePr(${prNo}, title=${title})`);\n\n  try {\n    const pr = await getPr(prNo);\n    if (!pr) {\n      throw Object.assign(new Error(REPOSITORY_NOT_FOUND), { statusCode: 404 });\n    }\n\n    const { body: updatedPr } = await bitbucketServerHttp.putJson<{\n      version: number;\n      state: string;\n    }>(\n      `./rest/api/1.0/projects/${config.projectKey}/repos/${config.repositorySlug}/pull-requests/${prNo}`,\n      {\n        body: {\n          title,\n          description,\n          version: pr.version,\n          reviewers: pr.reviewers\n            .filter(\n              (name: string) => !bitbucketInvalidReviewers?.includes(name)\n            )\n            .map((name: string) => ({ user: { name } })),\n        },\n      }\n    );\n\n    updatePrVersion(prNo, updatedPr.version);\n\n    const currentState = updatedPr.state;\n    const newState = {\n      [PrState.Open]: 'OPEN',\n      [PrState.Closed]: 'DECLINED',\n    }[state];\n\n    if (\n      newState &&\n      ['OPEN', 'DECLINED'].includes(currentState) &&\n      currentState !== newState\n    ) {\n      const command = state === PrState.Open ? 'reopen' : 'decline';\n      const { body: updatedStatePr } = await bitbucketServerHttp.postJson<{\n        version: number;\n      }>(\n        `./rest/api/1.0/projects/${config.projectKey}/repos/${config.repositorySlug}/pull-requests/${pr.number}/${command}?version=${updatedPr.version}`\n      );\n\n      updatePrVersion(pr.number, updatedStatePr.version);\n    }\n  } catch (err) {\n    logger.debug({ err, prNo }, `Failed to update PR`);\n    if (err.statusCode === 404) {\n      throw new Error(REPOSITORY_NOT_FOUND);\n    } else if (err.statusCode === 409) {\n      if (utils.isInvalidReviewersResponse(err) && !bitbucketInvalidReviewers) {\n        // Retry again with invalid reviewers being removed\n        const invalidReviewers = utils.getInvalidReviewers(err);\n        await updatePr({\n          number: prNo,\n          prTitle: title,\n          prBody: rawDescription,\n          state,\n          bitbucketInvalidReviewers: invalidReviewers,\n        });\n      } else {\n        throw new Error(REPOSITORY_CHANGED);\n      }\n    } else {\n      throw err;\n    }\n  }\n}\n\n// https://docs.atlassian.com/bitbucket-server/rest/6.0.0/bitbucket-rest.html#idp261\nexport async function mergePr({\n  branchName,\n  id: prNo,\n}: MergePRConfig): Promise<boolean> {\n  logger.debug(`mergePr(${prNo}, ${branchName})`);\n  // Used for \"automerge\" feature\n  try {\n    const pr = await getPr(prNo);\n    if (!pr) {\n      throw Object.assign(new Error(REPOSITORY_NOT_FOUND), { statusCode: 404 });\n    }\n    const { body } = await bitbucketServerHttp.postJson<{ version: number }>(\n      `./rest/api/1.0/projects/${config.projectKey}/repos/${config.repositorySlug}/pull-requests/${prNo}/merge?version=${pr.version}`\n    );\n    updatePrVersion(prNo, body.version);\n  } catch (err) {\n    if (err.statusCode === 404) {\n      throw new Error(REPOSITORY_NOT_FOUND);\n    } else if (err.statusCode === 409) {\n      logger.warn({ err }, `Failed to merge PR`);\n      return false;\n    } else {\n      logger.warn({ err }, `Failed to merge PR`);\n      return false;\n    }\n  }\n\n  logger.debug({ pr: prNo }, 'PR merged');\n  return true;\n}\n\nexport function massageMarkdown(input: string): string {\n  logger.debug(`massageMarkdown(${input.split('\\n')[0]})`);\n  // Remove any HTML we use\n  return smartTruncate(input, 30000)\n    .replace(\n      'you tick the rebase/retry checkbox',\n      'rename PR to start with \"rebase!\"'\n    )\n    .replace(regEx(/<\\/?summary>/g), '**')\n    .replace(regEx(/<\\/?details>/g), '')\n    .replace(regEx(`\\n---\\n\\n.*?<!-- rebase-check -->.*?(\\n|$)`), '')\n    .replace(regEx('<!--.*?-->', 'g'), '');\n}\n\nexport function getVulnerabilityAlerts(): Promise<VulnerabilityAlert[]> {\n  logger.debug(`getVulnerabilityAlerts()`);\n  return Promise.resolve([]);\n}\n"]}