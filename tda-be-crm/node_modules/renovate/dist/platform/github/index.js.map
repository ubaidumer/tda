{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/platform/github/index.ts"],"names":[],"mappings":"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","sourcesContent":["import URL from 'url';\nimport is from '@sindresorhus/is';\nimport delay from 'delay';\nimport JSON5 from 'json5';\nimport { DateTime } from 'luxon';\nimport { valid as semverValid } from 'semver';\nimport { PlatformId } from '../../constants';\nimport {\n  PLATFORM_INTEGRATION_UNAUTHORIZED,\n  REPOSITORY_ACCESS_FORBIDDEN,\n  REPOSITORY_ARCHIVED,\n  REPOSITORY_BLOCKED,\n  REPOSITORY_CANNOT_FORK,\n  REPOSITORY_CHANGED,\n  REPOSITORY_DISABLED,\n  REPOSITORY_EMPTY,\n  REPOSITORY_FORKED,\n  REPOSITORY_NOT_FOUND,\n  REPOSITORY_RENAMED,\n} from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { BranchStatus, PrState, VulnerabilityAlert } from '../../types';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport * as git from '../../util/git';\nimport * as hostRules from '../../util/host-rules';\nimport * as githubHttp from '../../util/http/github';\nimport { regEx } from '../../util/regex';\nimport { sanitize } from '../../util/sanitize';\nimport { ensureTrailingSlash } from '../../util/url';\nimport type {\n  AggregatedVulnerabilities,\n  BranchStatusConfig,\n  CreatePRConfig,\n  EnsureCommentConfig,\n  EnsureCommentRemovalConfig,\n  EnsureIssueConfig,\n  EnsureIssueResult,\n  FindPRConfig,\n  Issue,\n  MergePRConfig,\n  PlatformParams,\n  PlatformPrOptions,\n  PlatformResult,\n  Pr,\n  RepoParams,\n  RepoResult,\n  UpdatePrConfig,\n} from '../types';\nimport { smartTruncate } from '../utils/pr-body';\nimport {\n  closedPrsQuery,\n  enableAutoMergeMutation,\n  getIssuesQuery,\n  openPrsQuery,\n  repoInfoQuery,\n  vulnerabilityAlertsQuery,\n} from './graphql';\nimport { massageMarkdownLinks } from './massage-markdown-links';\nimport {\n  BranchProtection,\n  CombinedBranchStatus,\n  Comment,\n  GhAutomergeResponse,\n  GhBranchStatus,\n  GhGraphQlPr,\n  GhRepo,\n  GhRestPr,\n  LocalRepoConfig,\n  PlatformConfig,\n  PrList,\n} from './types';\nimport { UserDetails, getUserDetails, getUserEmail } from './user';\n\nconst githubApi = new githubHttp.GithubHttp();\n\nlet config: LocalRepoConfig = {} as any;\n\nconst platformConfig: PlatformConfig = {\n  hostType: PlatformId.Github,\n  endpoint: 'https://api.github.com/',\n};\n\nconst escapeHash = (input: string): string =>\n  input ? input.replace(regEx(/#/g), '%23') : input;\n\nexport async function detectGhe(token: string): Promise<void> {\n  platformConfig.isGhe =\n    URL.parse(platformConfig.endpoint).host !== 'api.github.com';\n  if (platformConfig.isGhe) {\n    const gheHeaderKey = 'x-github-enterprise-version';\n    const gheQueryRes = await githubApi.headJson('/', { token });\n    const gheHeaders: Record<string, string> = gheQueryRes?.headers || {};\n    const [, gheVersion] =\n      Object.entries(gheHeaders).find(\n        ([k]) => k.toLowerCase() === gheHeaderKey\n      ) ?? [];\n    platformConfig.gheVersion = semverValid(gheVersion) ?? null;\n  }\n}\n\nexport async function initPlatform({\n  endpoint,\n  token,\n  username,\n  gitAuthor,\n}: PlatformParams): Promise<PlatformResult> {\n  if (!token) {\n    throw new Error('Init: You must configure a GitHub personal access token');\n  }\n\n  if (endpoint) {\n    platformConfig.endpoint = ensureTrailingSlash(endpoint);\n    githubHttp.setBaseUrl(platformConfig.endpoint);\n  } else {\n    logger.debug('Using default github endpoint: ' + platformConfig.endpoint);\n  }\n\n  await detectGhe(token);\n\n  let userDetails: UserDetails;\n  let renovateUsername: string;\n  if (username) {\n    renovateUsername = username;\n  } else {\n    userDetails = await getUserDetails(platformConfig.endpoint, token);\n    renovateUsername = userDetails.username;\n  }\n  let discoveredGitAuthor: string;\n  if (!gitAuthor) {\n    userDetails = await getUserDetails(platformConfig.endpoint, token);\n    const userEmail = await getUserEmail(platformConfig.endpoint, token);\n    if (userEmail) {\n      discoveredGitAuthor = `${userDetails.name} <${userEmail}>`;\n    }\n  }\n  logger.debug({ platformConfig, renovateUsername }, 'Platform config');\n  const platformResult: PlatformResult = {\n    endpoint: platformConfig.endpoint,\n    gitAuthor: gitAuthor || discoveredGitAuthor,\n    renovateUsername,\n  };\n\n  return platformResult;\n}\n\n// Get all repositories that the user has access to\nexport async function getRepos(): Promise<string[]> {\n  logger.debug('Autodiscovering GitHub repositories');\n  try {\n    const res = await githubApi.getJson<{ full_name: string }[]>(\n      'user/repos?per_page=100',\n      { paginate: 'all' }\n    );\n    return res.body.map((repo) => repo.full_name);\n  } catch (err) /* istanbul ignore next */ {\n    logger.error({ err }, `GitHub getRepos error`);\n    throw err;\n  }\n}\n\nasync function getBranchProtection(\n  branchName: string\n): Promise<BranchProtection> {\n  // istanbul ignore if\n  if (config.parentRepo) {\n    return {};\n  }\n  const res = await githubApi.getJson<BranchProtection>(\n    `repos/${config.repository}/branches/${escapeHash(branchName)}/protection`\n  );\n  return res.body;\n}\n\nexport async function getRawFile(\n  fileName: string,\n  repoName?: string,\n  branchOrTag?: string\n): Promise<string | null> {\n  const repo = repoName ?? config.repository;\n  let url = `repos/${repo}/contents/${fileName}`;\n  if (branchOrTag) {\n    url += `?ref=` + branchOrTag;\n  }\n  const res = await githubApi.getJson<{ content: string }>(url);\n  const buf = res.body.content;\n  const str = Buffer.from(buf, 'base64').toString();\n  return str;\n}\n\nexport async function getJsonFile(\n  fileName: string,\n  repoName?: string,\n  branchOrTag?: string\n): Promise<any | null> {\n  const raw = await getRawFile(fileName, repoName, branchOrTag);\n  if (fileName.endsWith('.json5')) {\n    return JSON5.parse(raw);\n  }\n  return JSON.parse(raw);\n}\n\nlet existingRepos;\n\n// Initialize GitHub by getting base branch and SHA\nexport async function initRepo({\n  endpoint,\n  repository,\n  forkMode,\n  forkToken,\n  renovateUsername,\n  cloneSubmodules,\n  ignorePrAuthor,\n}: RepoParams): Promise<RepoResult> {\n  logger.debug(`initRepo(\"${repository}\")`);\n  // config is used by the platform api itself, not necessary for the app layer to know\n  config = {\n    repository,\n    cloneSubmodules,\n    ignorePrAuthor,\n  } as any;\n  // istanbul ignore if\n  if (endpoint) {\n    // Necessary for Renovate Pro - do not remove\n    logger.debug({ endpoint }, 'Overriding default GitHub endpoint');\n    platformConfig.endpoint = endpoint;\n    githubHttp.setBaseUrl(endpoint);\n  }\n  const opts = hostRules.find({\n    hostType: PlatformId.Github,\n    url: platformConfig.endpoint,\n  });\n  config.renovateUsername = renovateUsername;\n  [config.repositoryOwner, config.repositoryName] = repository.split('/');\n  let repo: GhRepo;\n  try {\n    let infoQuery = repoInfoQuery;\n\n    if (platformConfig.isGhe) {\n      infoQuery = infoQuery.replace(/\\n\\s*autoMergeAllowed\\s*\\n/, '\\n');\n      infoQuery = infoQuery.replace(/\\n\\s*hasIssuesEnabled\\s*\\n/, '\\n');\n    }\n\n    const res = await githubApi.requestGraphql<{\n      repository: GhRepo;\n    }>(infoQuery, {\n      variables: {\n        owner: config.repositoryOwner,\n        name: config.repositoryName,\n      },\n    });\n    repo = res?.data?.repository;\n    // istanbul ignore if\n    if (!repo) {\n      throw new Error(REPOSITORY_NOT_FOUND);\n    }\n    // istanbul ignore if\n    if (!repo.defaultBranchRef?.name) {\n      throw new Error(REPOSITORY_EMPTY);\n    }\n    if (repo.nameWithOwner && repo.nameWithOwner !== repository) {\n      logger.debug(\n        { repository, this_repository: repo.nameWithOwner },\n        'Repository has been renamed'\n      );\n      throw new Error(REPOSITORY_RENAMED);\n    }\n    if (repo.isArchived) {\n      logger.debug(\n        'Repository is archived - throwing error to abort renovation'\n      );\n      throw new Error(REPOSITORY_ARCHIVED);\n    }\n    // Use default branch as PR target unless later overridden.\n    config.defaultBranch = repo.defaultBranchRef.name;\n    // Base branch may be configured but defaultBranch is always fixed\n    logger.debug(`${repository} default branch = ${config.defaultBranch}`);\n    // GitHub allows administrators to block certain types of merge, so we need to check it\n    if (repo.rebaseMergeAllowed) {\n      config.mergeMethod = 'rebase';\n    } else if (repo.squashMergeAllowed) {\n      config.mergeMethod = 'squash';\n    } else if (repo.mergeCommitAllowed) {\n      config.mergeMethod = 'merge';\n    } else {\n      // This happens if we don't have Administrator read access, it is not a critical error\n      logger.debug('Could not find allowed merge methods for repo');\n    }\n    config.autoMergeAllowed = repo.autoMergeAllowed;\n    config.hasIssuesEnabled = repo.hasIssuesEnabled;\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ err }, 'Caught initRepo error');\n    if (\n      err.message === REPOSITORY_ARCHIVED ||\n      err.message === REPOSITORY_RENAMED ||\n      err.message === REPOSITORY_NOT_FOUND\n    ) {\n      throw err;\n    }\n    if (err.statusCode === 403) {\n      throw new Error(REPOSITORY_ACCESS_FORBIDDEN);\n    }\n    if (err.statusCode === 404) {\n      throw new Error(REPOSITORY_NOT_FOUND);\n    }\n    if (err.message.startsWith('Repository access blocked')) {\n      throw new Error(REPOSITORY_BLOCKED);\n    }\n    if (err.message === REPOSITORY_FORKED) {\n      throw err;\n    }\n    if (err.message === REPOSITORY_DISABLED) {\n      throw err;\n    }\n    if (err.message === 'Response code 451 (Unavailable for Legal Reasons)') {\n      throw new Error(REPOSITORY_ACCESS_FORBIDDEN);\n    }\n    logger.debug({ err }, 'Unknown GitHub initRepo error');\n    throw err;\n  }\n  // This shouldn't be necessary, but occasional strange errors happened until it was added\n  config.issueList = null;\n  config.prList = null;\n  config.openPrList = null;\n  config.closedPrList = null;\n  config.branchPrs = [];\n\n  config.forkMode = !!forkMode;\n  if (forkMode) {\n    logger.debug('Bot is in forkMode');\n    config.forkToken = forkToken;\n    // save parent name then delete\n    config.parentRepo = config.repository;\n    config.repository = null;\n    // Get list of existing repos\n    existingRepos =\n      existingRepos ||\n      (\n        await githubApi.getJson<{ full_name: string }[]>(\n          'user/repos?per_page=100',\n          {\n            token: forkToken || opts.token,\n            paginate: true,\n            pageLimit: 100,\n          }\n        )\n      ).body.map((r) => r.full_name);\n    try {\n      const forkedRepo = await githubApi.postJson<{\n        full_name: string;\n        default_branch: string;\n      }>(`repos/${repository}/forks`, {\n        token: forkToken || opts.token,\n      });\n      config.repository = forkedRepo.body.full_name;\n      const forkDefaultBranch = forkedRepo.body.default_branch;\n      if (forkDefaultBranch !== config.defaultBranch) {\n        const body = {\n          ref: `refs/heads/${config.defaultBranch}`,\n          sha: repo.defaultBranchRef.target.oid,\n        };\n        logger.debug(\n          {\n            defaultBranch: config.defaultBranch,\n            forkDefaultBranch,\n            body,\n          },\n          'Fork has different default branch to parent, attempting to create branch'\n        );\n        try {\n          await githubApi.postJson(`repos/${config.repository}/git/refs`, {\n            body,\n            token: forkToken,\n          });\n          logger.debug('Created new default branch in fork');\n        } catch (err) /* istanbul ignore next */ {\n          if (err.response?.body?.message === 'Reference already exists') {\n            logger.debug(\n              `Branch ${config.defaultBranch} already exists in the fork`\n            );\n          } else {\n            logger.warn(\n              { err, body: err.response?.body },\n              'Could not create parent defaultBranch in fork'\n            );\n          }\n        }\n        logger.debug(\n          `Setting ${config.defaultBranch} as default branch for ${config.repository}`\n        );\n        try {\n          await githubApi.patchJson(`repos/${config.repository}`, {\n            body: {\n              name: config.repository.split('/')[1],\n              default_branch: config.defaultBranch,\n            },\n            token: forkToken,\n          });\n          logger.debug('Successfully changed default branch for fork');\n        } catch (err) /* istanbul ignore next */ {\n          logger.warn({ err }, 'Could not set default branch');\n        }\n      }\n    } catch (err) /* istanbul ignore next */ {\n      logger.debug({ err }, 'Error forking repository');\n      throw new Error(REPOSITORY_CANNOT_FORK);\n    }\n    if (existingRepos.includes(config.repository)) {\n      logger.debug(\n        { repository_fork: config.repository },\n        'Found existing fork'\n      );\n      // This is a lovely \"hack\" by GitHub that lets us force update our fork's default branch\n      // with the base commit from the parent repository\n      try {\n        logger.debug(\n          'Updating forked repository default sha to match upstream'\n        );\n        await githubApi.patchJson(\n          `repos/${config.repository}/git/refs/heads/${config.defaultBranch}`,\n          {\n            body: {\n              sha: repo.defaultBranchRef.target.oid,\n              force: true,\n            },\n            token: forkToken || opts.token,\n          }\n        );\n      } catch (err) /* istanbul ignore next */ {\n        logger.warn(\n          { err: err.err || err },\n          'Error updating fork from upstream - cannot continue'\n        );\n        if (err instanceof ExternalHostError) {\n          throw err;\n        }\n        throw new ExternalHostError(err);\n      }\n    } else {\n      logger.debug({ repository_fork: config.repository }, 'Created fork');\n      existingRepos.push(config.repository);\n      // Wait an arbitrary 30s to hopefully give GitHub enough time for forking to complete\n      await delay(30000);\n    }\n  }\n\n  const parsedEndpoint = URL.parse(platformConfig.endpoint);\n  // istanbul ignore else\n  if (forkMode) {\n    logger.debug('Using forkToken for git init');\n    parsedEndpoint.auth = config.forkToken;\n  } else {\n    const tokenType = opts.token?.startsWith('x-access-token:')\n      ? 'app'\n      : 'personal access';\n    logger.debug(`Using ${tokenType} token for git init`);\n    parsedEndpoint.auth = opts.token;\n  }\n  parsedEndpoint.host = parsedEndpoint.host.replace(\n    'api.github.com',\n    'github.com'\n  );\n  parsedEndpoint.pathname = config.repository + '.git';\n  const url = URL.format(parsedEndpoint);\n  await git.initRepo({\n    ...config,\n    url,\n  });\n  const repoConfig: RepoResult = {\n    defaultBranch: config.defaultBranch,\n    isFork: repo.isFork === true,\n  };\n  return repoConfig;\n}\n\nexport async function getRepoForceRebase(): Promise<boolean> {\n  if (config.repoForceRebase === undefined) {\n    try {\n      config.repoForceRebase = false;\n      const branchProtection = await getBranchProtection(config.defaultBranch);\n      logger.debug('Found branch protection');\n      if (branchProtection.required_pull_request_reviews) {\n        logger.debug(\n          'Branch protection: PR Reviews are required before merging'\n        );\n        config.prReviewsRequired = true;\n      }\n      if (branchProtection.required_status_checks) {\n        if (branchProtection.required_status_checks.strict) {\n          logger.debug(\n            'Branch protection: PRs must be up-to-date before merging'\n          );\n          config.repoForceRebase = true;\n        }\n      }\n      if (branchProtection.restrictions) {\n        logger.debug(\n          {\n            users: branchProtection.restrictions.users,\n            teams: branchProtection.restrictions.teams,\n          },\n          'Branch protection: Pushing to branch is restricted'\n        );\n        config.pushProtection = true;\n      }\n    } catch (err) {\n      if (err.statusCode === 404) {\n        logger.debug(`No branch protection found`);\n      } else if (\n        err.message === PLATFORM_INTEGRATION_UNAUTHORIZED ||\n        err.statusCode === 403\n      ) {\n        logger.debug(\n          'Branch protection: Do not have permissions to detect branch protection'\n        );\n      } else {\n        throw err;\n      }\n    }\n  }\n  return config.repoForceRebase;\n}\n\nasync function getClosedPrs(): Promise<PrList> {\n  if (!config.closedPrList) {\n    config.closedPrList = {};\n    try {\n      // prettier-ignore\n      const nodes = await githubApi.queryRepoField<GhGraphQlPr>(\n        closedPrsQuery,\n        'pullRequests',\n        {\n          variables: {\n            owner: config.repositoryOwner,\n            name: config.repositoryName,\n          },\n        }\n      );\n      const prNumbers: number[] = [];\n      // istanbul ignore if\n      if (!nodes?.length) {\n        logger.debug('getClosedPrs(): no graphql data');\n        return {};\n      }\n      for (const pr of nodes) {\n        // https://developer.github.com/v4/object/pullrequest/\n        pr.displayNumber = `Pull Request #${pr.number}`;\n        pr.state = pr.state.toLowerCase();\n        pr.sourceBranch = pr.headRefName;\n        delete pr.headRefName;\n        pr.comments = pr.comments.nodes.map((comment) => ({\n          id: comment.databaseId,\n          body: comment.body,\n        }));\n        pr.body = 'dummy body'; // just in case\n        config.closedPrList[pr.number] = pr;\n        prNumbers.push(pr.number);\n      }\n      prNumbers.sort();\n      logger.debug({ prNumbers }, 'Retrieved closed PR list with graphql');\n    } catch (err) /* istanbul ignore next */ {\n      logger.warn({ err }, 'getClosedPrs(): error');\n    }\n  }\n  return config.closedPrList;\n}\n\nasync function getOpenPrs(): Promise<PrList> {\n  // The graphql query is supported in the current oldest GHE version 2.19\n  if (!config.openPrList) {\n    config.openPrList = {};\n    try {\n      // prettier-ignore\n      const nodes = await githubApi.queryRepoField<GhGraphQlPr>(\n        openPrsQuery,\n        'pullRequests',\n        {\n          variables: {\n            owner: config.repositoryOwner,\n            name: config.repositoryName,\n          },\n          acceptHeader: 'application/vnd.github.merge-info-preview+json',\n        }\n      );\n      const prNumbers: number[] = [];\n      // istanbul ignore if\n      if (!nodes?.length) {\n        logger.debug('getOpenPrs(): no graphql data');\n        return {};\n      }\n      for (const pr of nodes) {\n        // https://developer.github.com/v4/object/pullrequest/\n        pr.displayNumber = `Pull Request #${pr.number}`;\n        pr.state = PrState.Open;\n        pr.sourceBranch = pr.headRefName;\n        delete pr.headRefName;\n        pr.targetBranch = pr.baseRefName;\n        delete pr.baseRefName;\n        // https://developer.github.com/v4/enum/mergeablestate\n        const canMergeStates = ['BEHIND', 'CLEAN', 'HAS_HOOKS', 'UNSTABLE'];\n        const hasNegativeReview = pr.reviews?.nodes?.length > 0;\n        // istanbul ignore if\n        if (hasNegativeReview) {\n          pr.canMerge = false;\n          pr.canMergeReason = `hasNegativeReview`;\n        } else if (canMergeStates.includes(pr.mergeStateStatus)) {\n          pr.canMerge = true;\n        } else if (config.forkToken && pr.mergeStateStatus === 'BLOCKED') {\n          // The main token can't merge but maybe the forking token can\n          // istanbul ignore next\n          pr.canMerge = true;\n        } else {\n          pr.canMerge = false;\n          pr.canMergeReason = `mergeStateStatus = ${pr.mergeStateStatus}`;\n        }\n        // https://developer.github.com/v4/enum/mergestatestatus\n        if (pr.mergeStateStatus === 'DIRTY') {\n          pr.isConflicted = true;\n        } else {\n          pr.isConflicted = false;\n        }\n        if (pr.labels) {\n          pr.labels = pr.labels.nodes.map((label) => label.name);\n        }\n        pr.hasAssignees = !!(pr.assignees?.totalCount > 0);\n        delete pr.assignees;\n        pr.hasReviewers = !!(pr.reviewRequests?.totalCount > 0);\n        delete pr.reviewRequests;\n        delete pr.mergeable;\n        delete pr.mergeStateStatus;\n        delete pr.commits;\n        config.openPrList[pr.number] = pr;\n        prNumbers.push(pr.number);\n      }\n      prNumbers.sort();\n      logger.trace({ prNumbers }, 'Retrieved open PR list with graphql');\n    } catch (err) /* istanbul ignore next */ {\n      logger.warn({ err }, 'getOpenPrs(): error');\n    }\n  }\n  return config.openPrList;\n}\n\n// Gets details for a PR\nexport async function getPr(prNo: number): Promise<Pr | null> {\n  if (!prNo) {\n    return null;\n  }\n  const openPrs = await getOpenPrs();\n  const openPr = openPrs[prNo];\n  if (openPr) {\n    logger.debug('Returning from graphql open PR list');\n    return openPr;\n  }\n  const closedPrs = await getClosedPrs();\n  const closedPr = closedPrs[prNo];\n  if (closedPr) {\n    logger.debug('Returning from graphql closed PR list');\n    return closedPr;\n  }\n  logger.debug(\n    { prNo },\n    'PR not found in open or closed PRs list - trying to fetch it directly'\n  );\n  const pr = (\n    await githubApi.getJson<GhRestPr>(\n      `repos/${config.parentRepo || config.repository}/pulls/${prNo}`\n    )\n  ).body;\n  if (!pr) {\n    return null;\n  }\n  // Harmonise PR values\n  pr.displayNumber = `Pull Request #${pr.number}`;\n  if (pr.state === PrState.Open) {\n    pr.sourceBranch = pr.head ? pr.head.ref : undefined;\n    pr.sha = pr.head ? pr.head.sha : undefined;\n    if (pr.mergeable === true) {\n      pr.canMerge = true;\n    } else {\n      pr.canMerge = false;\n      pr.canMergeReason = `mergeable = ${pr.mergeable}`;\n    }\n    if (pr.mergeable_state === 'dirty') {\n      logger.debug({ prNo }, 'PR state is dirty so unmergeable');\n      pr.isConflicted = true;\n    }\n  }\n  return pr;\n}\n\nfunction matchesState(state: string, desiredState: string): boolean {\n  if (desiredState === PrState.All) {\n    return true;\n  }\n  if (desiredState.startsWith('!')) {\n    return state !== desiredState.substring(1);\n  }\n  return state === desiredState;\n}\n\nexport async function getPrList(): Promise<Pr[]> {\n  logger.trace('getPrList()');\n  if (!config.prList) {\n    logger.debug('Retrieving PR list');\n    let prList: GhRestPr[];\n    try {\n      prList = (\n        await githubApi.getJson<GhRestPr[]>(\n          `repos/${\n            config.parentRepo || config.repository\n          }/pulls?per_page=100&state=all`,\n          { paginate: true }\n        )\n      ).body;\n    } catch (err) /* istanbul ignore next */ {\n      logger.debug({ err }, 'getPrList err');\n      throw new ExternalHostError(err, PlatformId.Github);\n    }\n    config.prList = prList\n      .filter(\n        (pr) =>\n          config.forkMode ||\n          config.ignorePrAuthor ||\n          (pr?.user?.login && config?.renovateUsername\n            ? pr.user.login === config.renovateUsername\n            : true)\n      )\n      .map(\n        (pr) =>\n          ({\n            number: pr.number,\n            sourceBranch: pr.head.ref,\n            sha: pr.head.sha,\n            title: pr.title,\n            state:\n              pr.state === PrState.Closed && pr.merged_at?.length\n                ? /* istanbul ignore next */ PrState.Merged\n                : pr.state,\n            createdAt: pr.created_at,\n            closedAt: pr.closed_at,\n            sourceRepo: pr.head?.repo?.full_name,\n          } as never)\n      );\n    logger.debug(`Retrieved ${config.prList.length} Pull Requests`);\n  }\n  return config.prList;\n}\n\nexport async function findPr({\n  branchName,\n  prTitle,\n  state = PrState.All,\n}: FindPRConfig): Promise<Pr | null> {\n  logger.debug(`findPr(${branchName}, ${prTitle}, ${state})`);\n  const prList = await getPrList();\n  const pr = prList.find(\n    (p) =>\n      p.sourceBranch === branchName &&\n      (!prTitle || p.title === prTitle) &&\n      matchesState(p.state, state) &&\n      (config.forkMode || config.repository === p.sourceRepo) // #5188\n  );\n  if (pr) {\n    logger.debug(`Found PR #${pr.number}`);\n  }\n  return pr;\n}\n\nconst REOPEN_THRESHOLD_MILLIS = 1000 * 60 * 60 * 24 * 7;\n\n// Returns the Pull Request for a branch. Null if not exists.\nexport async function getBranchPr(branchName: string): Promise<Pr | null> {\n  // istanbul ignore if\n  if (config.branchPrs[branchName]) {\n    return config.branchPrs[branchName];\n  }\n  logger.debug(`getBranchPr(${branchName})`);\n  const openPr = await findPr({\n    branchName,\n    state: PrState.Open,\n  });\n  if (openPr) {\n    config.branchPrs[branchName] = await getPr(openPr.number);\n    return config.branchPrs[branchName];\n  }\n  const autoclosedPr = await findPr({\n    branchName,\n    state: PrState.Closed,\n  });\n  if (\n    autoclosedPr?.title?.endsWith(' - autoclosed') &&\n    autoclosedPr?.closedAt\n  ) {\n    const closedMillisAgo = DateTime.fromISO(autoclosedPr.closedAt)\n      .diffNow()\n      .negate()\n      .toMillis();\n    if (closedMillisAgo > REOPEN_THRESHOLD_MILLIS) {\n      return null;\n    }\n    logger.debug({ autoclosedPr }, 'Found autoclosed PR for branch');\n    const { sha, number } = autoclosedPr;\n    try {\n      await githubApi.postJson(`repos/${config.repository}/git/refs`, {\n        body: { ref: `refs/heads/${branchName}`, sha },\n      });\n      logger.debug({ branchName, sha }, 'Recreated autoclosed branch');\n    } catch (err) {\n      logger.debug('Could not recreate autoclosed branch - skipping reopen');\n      return null;\n    }\n    try {\n      const title = autoclosedPr.title.replace(regEx(/ - autoclosed$/), '');\n      await githubApi.patchJson(`repos/${config.repository}/pulls/${number}`, {\n        body: {\n          state: 'open',\n          title,\n        },\n      });\n      logger.info(\n        { branchName, title, number },\n        'Successfully reopened autoclosed PR'\n      );\n    } catch (err) {\n      logger.debug('Could not reopen autoclosed PR');\n      return null;\n    }\n    delete config.openPrList; // So that it gets refreshed\n    delete config.closedPrList?.[number]; // So that it's no longer found in the closed list\n    config.branchPrs[branchName] = await getPr(number);\n    return config.branchPrs[branchName];\n  }\n  return null;\n}\n\nasync function getStatus(\n  branchName: string,\n  useCache = true\n): Promise<CombinedBranchStatus> {\n  const commitStatusUrl = `repos/${config.repository}/commits/${escapeHash(\n    branchName\n  )}/status`;\n\n  return (\n    await githubApi.getJson<CombinedBranchStatus>(commitStatusUrl, { useCache })\n  ).body;\n}\n\n// Returns the combined status for a branch.\nexport async function getBranchStatus(\n  branchName: string\n): Promise<BranchStatus> {\n  logger.debug(`getBranchStatus(${branchName})`);\n  let commitStatus: CombinedBranchStatus;\n  try {\n    commitStatus = await getStatus(branchName);\n  } catch (err) /* istanbul ignore next */ {\n    if (err.statusCode === 404) {\n      logger.debug(\n        'Received 404 when checking branch status, assuming that branch has been deleted'\n      );\n      throw new Error(REPOSITORY_CHANGED);\n    }\n    logger.debug('Unknown error when checking branch status');\n    throw err;\n  }\n  logger.debug(\n    { state: commitStatus.state, statuses: commitStatus.statuses },\n    'branch status check result'\n  );\n  let checkRuns: { name: string; status: string; conclusion: string }[] = [];\n  // API is supported in oldest available GHE version 2.19\n  try {\n    const checkRunsUrl = `repos/${config.repository}/commits/${escapeHash(\n      branchName\n    )}/check-runs?per_page=100`;\n    const opts = {\n      headers: {\n        accept: 'application/vnd.github.antiope-preview+json',\n      },\n      paginate: true,\n      paginationField: 'check_runs',\n    };\n    const checkRunsRaw = (\n      await githubApi.getJson<{\n        check_runs: { name: string; status: string; conclusion: string }[];\n      }>(checkRunsUrl, opts)\n    ).body;\n    if (checkRunsRaw.check_runs?.length) {\n      checkRuns = checkRunsRaw.check_runs.map((run) => ({\n        name: run.name,\n        status: run.status,\n        conclusion: run.conclusion,\n      }));\n      logger.debug({ checkRuns }, 'check runs result');\n    } else {\n      // istanbul ignore next\n      logger.debug({ result: checkRunsRaw }, 'No check runs found');\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (err instanceof ExternalHostError) {\n      throw err;\n    }\n    if (\n      err.statusCode === 403 ||\n      err.message === PLATFORM_INTEGRATION_UNAUTHORIZED\n    ) {\n      logger.debug('No permission to view check runs');\n    } else {\n      logger.warn({ err }, 'Error retrieving check runs');\n    }\n  }\n  if (checkRuns.length === 0) {\n    if (commitStatus.state === 'success') {\n      return BranchStatus.green;\n    }\n    if (commitStatus.state === 'failure') {\n      return BranchStatus.red;\n    }\n    return BranchStatus.yellow;\n  }\n  if (\n    commitStatus.state === 'failure' ||\n    checkRuns.some((run) => run.conclusion === 'failure')\n  ) {\n    return BranchStatus.red;\n  }\n  if (\n    (commitStatus.state === 'success' || commitStatus.statuses.length === 0) &&\n    checkRuns.every((run) =>\n      ['skipped', 'neutral', 'success'].includes(run.conclusion)\n    )\n  ) {\n    return BranchStatus.green;\n  }\n  return BranchStatus.yellow;\n}\n\nasync function getStatusCheck(\n  branchName: string,\n  useCache = true\n): Promise<GhBranchStatus[]> {\n  const branchCommit = git.getBranchCommit(branchName);\n\n  const url = `repos/${config.repository}/commits/${branchCommit}/statuses`;\n\n  return (await githubApi.getJson<GhBranchStatus[]>(url, { useCache })).body;\n}\n\nconst githubToRenovateStatusMapping = {\n  success: BranchStatus.green,\n  error: BranchStatus.red,\n  failure: BranchStatus.red,\n  pending: BranchStatus.yellow,\n};\n\nexport async function getBranchStatusCheck(\n  branchName: string,\n  context: string\n): Promise<BranchStatus | null> {\n  try {\n    const res = await getStatusCheck(branchName);\n    for (const check of res) {\n      if (check.context === context) {\n        return (\n          githubToRenovateStatusMapping[check.state] || BranchStatus.yellow\n        );\n      }\n    }\n    return null;\n  } catch (err) /* istanbul ignore next */ {\n    if (err.statusCode === 404) {\n      logger.debug('Commit not found when checking statuses');\n      throw new Error(REPOSITORY_CHANGED);\n    }\n    throw err;\n  }\n}\n\nexport async function setBranchStatus({\n  branchName,\n  context,\n  description,\n  state,\n  url: targetUrl,\n}: BranchStatusConfig): Promise<void> {\n  // istanbul ignore if\n  if (config.parentRepo) {\n    logger.debug('Cannot set branch status when in forking mode');\n    return;\n  }\n  const existingStatus = await getBranchStatusCheck(branchName, context);\n  if (existingStatus === state) {\n    return;\n  }\n  logger.debug({ branch: branchName, context, state }, 'Setting branch status');\n  let url: string;\n  try {\n    const branchCommit = git.getBranchCommit(branchName);\n    url = `repos/${config.repository}/statuses/${branchCommit}`;\n    const renovateToGitHubStateMapping = {\n      green: 'success',\n      yellow: 'pending',\n      red: 'failure',\n    };\n    const options: any = {\n      state: renovateToGitHubStateMapping[state],\n      description,\n      context,\n    };\n    if (targetUrl) {\n      options.target_url = targetUrl;\n    }\n    await githubApi.postJson(url, { body: options });\n\n    // update status cache\n    await getStatus(branchName, false);\n    await getStatusCheck(branchName, false);\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ err, url }, 'Caught error setting branch status - aborting');\n    throw new Error(REPOSITORY_CHANGED);\n  }\n}\n\n// Issue\n\n/* istanbul ignore next */\nasync function getIssues(): Promise<Issue[]> {\n  const result = await githubApi.queryRepoField<Issue>(\n    getIssuesQuery,\n    'issues',\n    {\n      variables: {\n        owner: config.repositoryOwner,\n        name: config.repositoryName,\n        user: config.renovateUsername,\n      },\n    }\n  );\n\n  logger.debug(`Retrieved ${result.length} issues`);\n  return result.map((issue) => ({\n    ...issue,\n    state: issue.state.toLowerCase(),\n  }));\n}\n\nexport async function getIssueList(): Promise<Issue[]> {\n  // istanbul ignore if\n  if (config.hasIssuesEnabled === false) {\n    return [];\n  }\n  if (!config.issueList) {\n    logger.debug('Retrieving issueList');\n    config.issueList = await getIssues();\n  }\n  return config.issueList;\n}\n\nexport async function getIssue(\n  number: number,\n  useCache = true\n): Promise<Issue | null> {\n  // istanbul ignore if\n  if (config.hasIssuesEnabled === false) {\n    return null;\n  }\n  try {\n    const issueBody = (\n      await githubApi.getJson<{ body: string }>(\n        `repos/${config.parentRepo || config.repository}/issues/${number}`,\n        { useCache }\n      )\n    ).body.body;\n    return {\n      number,\n      body: issueBody,\n    };\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ err, number }, 'Error getting issue');\n    return null;\n  }\n}\n\nexport async function findIssue(title: string): Promise<Issue | null> {\n  logger.debug(`findIssue(${title})`);\n  const [issue] = (await getIssueList()).filter(\n    (i) => i.state === 'open' && i.title === title\n  );\n  if (!issue) {\n    return null;\n  }\n  logger.debug(`Found issue ${issue.number}`);\n  return getIssue(issue.number);\n}\n\nasync function closeIssue(issueNumber: number): Promise<void> {\n  logger.debug(`closeIssue(${issueNumber})`);\n  await githubApi.patchJson(\n    `repos/${config.parentRepo || config.repository}/issues/${issueNumber}`,\n    {\n      body: { state: 'closed' },\n    }\n  );\n}\n\nexport async function ensureIssue({\n  title,\n  reuseTitle,\n  body: rawBody,\n  labels,\n  once = false,\n  shouldReOpen = true,\n}: EnsureIssueConfig): Promise<EnsureIssueResult | null> {\n  logger.debug(`ensureIssue(${title})`);\n  // istanbul ignore if\n  if (config.hasIssuesEnabled === false) {\n    logger.info(\n      'Cannot ensure issue because issues are disabled in this repository'\n    );\n    return null;\n  }\n  const body = sanitize(rawBody);\n  try {\n    const issueList = await getIssueList();\n    let issues = issueList.filter((i) => i.title === title);\n    if (!issues.length) {\n      issues = issueList.filter((i) => i.title === reuseTitle);\n      if (issues.length) {\n        logger.debug({ reuseTitle, title }, 'Reusing issue title');\n      }\n    }\n    if (issues.length) {\n      let issue = issues.find((i) => i.state === 'open');\n      if (!issue) {\n        if (once) {\n          logger.debug('Issue already closed - skipping recreation');\n          return null;\n        }\n        if (shouldReOpen) {\n          logger.debug('Reopening previously closed issue');\n        }\n        issue = issues[issues.length - 1];\n      }\n      for (const i of issues) {\n        if (i.state === 'open' && i.number !== issue.number) {\n          logger.warn(`Closing duplicate issue ${i.number}`);\n          await closeIssue(i.number);\n        }\n      }\n      const issueBody = (\n        await githubApi.getJson<{ body: string }>(\n          `repos/${config.parentRepo || config.repository}/issues/${\n            issue.number\n          }`\n        )\n      ).body.body;\n      if (\n        issue.title === title &&\n        issueBody === body &&\n        issue.state === 'open'\n      ) {\n        logger.debug('Issue is open and up to date - nothing to do');\n        return null;\n      }\n      if (shouldReOpen) {\n        logger.debug('Patching issue');\n        const data: Record<string, unknown> = { body, state: 'open', title };\n        if (labels) {\n          data.labels = labels;\n        }\n        await githubApi.patchJson(\n          `repos/${config.parentRepo || config.repository}/issues/${\n            issue.number\n          }`,\n          {\n            body: data,\n          }\n        );\n        logger.debug('Issue updated');\n        return 'updated';\n      }\n    }\n    await githubApi.postJson(\n      `repos/${config.parentRepo || config.repository}/issues`,\n      {\n        body: {\n          title,\n          body,\n          labels: labels || [],\n        },\n      }\n    );\n    logger.info('Issue created');\n    // reset issueList so that it will be fetched again as-needed\n    delete config.issueList;\n    return 'created';\n  } catch (err) /* istanbul ignore next */ {\n    if (err.body?.message?.startsWith('Issues are disabled for this repo')) {\n      logger.debug(`Issues are disabled, so could not create issue: ${title}`);\n    } else {\n      logger.warn({ err }, 'Could not ensure issue');\n    }\n  }\n  return null;\n}\n\nexport async function ensureIssueClosing(title: string): Promise<void> {\n  logger.trace(`ensureIssueClosing(${title})`);\n  // istanbul ignore if\n  if (config.hasIssuesEnabled === false) {\n    logger.info(\n      'Cannot ensure issue because issues are disabled in this repository'\n    );\n    return;\n  }\n  const issueList = await getIssueList();\n  for (const issue of issueList) {\n    if (issue.state === 'open' && issue.title === title) {\n      await closeIssue(issue.number);\n      logger.debug({ number: issue.number }, 'Issue closed');\n    }\n  }\n}\n\nexport async function addAssignees(\n  issueNo: number,\n  assignees: string[]\n): Promise<void> {\n  logger.debug(`Adding assignees '${assignees.join(', ')}' to #${issueNo}`);\n  const repository = config.parentRepo || config.repository;\n  await githubApi.postJson(`repos/${repository}/issues/${issueNo}/assignees`, {\n    body: {\n      assignees,\n    },\n  });\n}\n\nexport async function addReviewers(\n  prNo: number,\n  reviewers: string[]\n): Promise<void> {\n  logger.debug(`Adding reviewers '${reviewers.join(', ')}' to #${prNo}`);\n\n  const userReviewers = reviewers.filter((e) => !e.startsWith('team:'));\n  const teamReviewers = reviewers\n    .filter((e) => e.startsWith('team:'))\n    .map((e) => e.replace(regEx(/^team:/), '')); // TODO #12071\n  try {\n    await githubApi.postJson(\n      `repos/${\n        config.parentRepo || config.repository\n      }/pulls/${prNo}/requested_reviewers`,\n      {\n        body: {\n          reviewers: userReviewers,\n          team_reviewers: teamReviewers,\n        },\n      }\n    );\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'Failed to assign reviewer');\n  }\n}\n\nasync function addLabels(\n  issueNo: number,\n  labels: string[] | null\n): Promise<void> {\n  logger.debug(`Adding labels '${labels?.join(', ')}' to #${issueNo}`);\n  const repository = config.parentRepo || config.repository;\n  if (is.array(labels) && labels.length) {\n    await githubApi.postJson(`repos/${repository}/issues/${issueNo}/labels`, {\n      body: labels,\n    });\n  }\n}\n\nexport async function deleteLabel(\n  issueNo: number,\n  label: string\n): Promise<void> {\n  logger.debug(`Deleting label ${label} from #${issueNo}`);\n  const repository = config.parentRepo || config.repository;\n  try {\n    await githubApi.deleteJson(\n      `repos/${repository}/issues/${issueNo}/labels/${label}`\n    );\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err, issueNo, label }, 'Failed to delete label');\n  }\n}\n\nasync function addComment(issueNo: number, body: string): Promise<void> {\n  // POST /repos/:owner/:repo/issues/:number/comments\n  await githubApi.postJson(\n    `repos/${\n      config.parentRepo || config.repository\n    }/issues/${issueNo}/comments`,\n    {\n      body: { body },\n    }\n  );\n}\n\nasync function editComment(commentId: number, body: string): Promise<void> {\n  // PATCH /repos/:owner/:repo/issues/comments/:id\n  await githubApi.patchJson(\n    `repos/${\n      config.parentRepo || config.repository\n    }/issues/comments/${commentId}`,\n    {\n      body: { body },\n    }\n  );\n}\n\nasync function deleteComment(commentId: number): Promise<void> {\n  // DELETE /repos/:owner/:repo/issues/comments/:id\n  await githubApi.deleteJson(\n    `repos/${\n      config.parentRepo || config.repository\n    }/issues/comments/${commentId}`\n  );\n}\n\nasync function getComments(issueNo: number): Promise<Comment[]> {\n  const pr = (await getClosedPrs())[issueNo];\n  if (pr) {\n    logger.debug('Returning closed PR list comments');\n    return pr.comments;\n  }\n  // GET /repos/:owner/:repo/issues/:number/comments\n  logger.debug(`Getting comments for #${issueNo}`);\n  const url = `repos/${\n    config.parentRepo || config.repository\n  }/issues/${issueNo}/comments?per_page=100`;\n  try {\n    const comments = (\n      await githubApi.getJson<Comment[]>(url, {\n        paginate: true,\n      })\n    ).body;\n    logger.debug(`Found ${comments.length} comments`);\n    return comments;\n  } catch (err) /* istanbul ignore next */ {\n    if (err.statusCode === 404) {\n      logger.debug('404 response when retrieving comments');\n      throw new ExternalHostError(err, PlatformId.Github);\n    }\n    throw err;\n  }\n}\n\nexport async function ensureComment({\n  number,\n  topic,\n  content,\n}: EnsureCommentConfig): Promise<boolean> {\n  const sanitizedContent = sanitize(content);\n  try {\n    const comments = await getComments(number);\n    let body: string;\n    let commentId: number | null = null;\n    let commentNeedsUpdating = false;\n    if (topic) {\n      logger.debug(`Ensuring comment \"${topic}\" in #${number}`);\n      body = `### ${topic}\\n\\n${sanitizedContent}`;\n      comments.forEach((comment) => {\n        if (comment.body.startsWith(`### ${topic}\\n\\n`)) {\n          commentId = comment.id;\n          commentNeedsUpdating = comment.body !== body;\n        }\n      });\n    } else {\n      logger.debug(`Ensuring content-only comment in #${number}`);\n      body = `${sanitizedContent}`;\n      comments.forEach((comment) => {\n        if (comment.body === body) {\n          commentId = comment.id;\n          commentNeedsUpdating = false;\n        }\n      });\n    }\n    if (!commentId) {\n      await addComment(number, body);\n      logger.info(\n        { repository: config.repository, issueNo: number, topic },\n        'Comment added'\n      );\n    } else if (commentNeedsUpdating) {\n      await editComment(commentId, body);\n      logger.debug(\n        { repository: config.repository, issueNo: number },\n        'Comment updated'\n      );\n    } else {\n      logger.debug('Comment is already update-to-date');\n    }\n    return true;\n  } catch (err) /* istanbul ignore next */ {\n    if (err instanceof ExternalHostError) {\n      throw err;\n    }\n    if (err.body?.message?.includes('is locked')) {\n      logger.debug('Issue is locked - cannot add comment');\n    } else {\n      logger.warn({ err }, 'Error ensuring comment');\n    }\n    return false;\n  }\n}\n\nexport async function ensureCommentRemoval({\n  number: issueNo,\n  topic,\n  content,\n}: EnsureCommentRemovalConfig): Promise<void> {\n  logger.trace(\n    `Ensuring comment \"${topic || content}\" in #${issueNo} is removed`\n  );\n  const comments = await getComments(issueNo);\n  let commentId: number | null = null;\n\n  const byTopic = (comment: Comment): boolean =>\n    comment.body.startsWith(`### ${topic}\\n\\n`);\n  const byContent = (comment: Comment): boolean =>\n    comment.body.trim() === content;\n\n  if (topic) {\n    commentId = comments.find(byTopic)?.id;\n  } else if (content) {\n    commentId = comments.find(byContent)?.id;\n  }\n\n  try {\n    if (commentId) {\n      logger.debug({ issueNo }, 'Removing comment');\n      await deleteComment(commentId);\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'Error deleting comment');\n  }\n}\n\n// Pull Request\n\nasync function tryPrAutomerge(\n  prNumber: number,\n  prNodeId: string,\n  platformOptions: PlatformPrOptions\n): Promise<void> {\n  if (platformConfig.isGhe || !platformOptions?.usePlatformAutomerge) {\n    return;\n  }\n\n  if (!config.autoMergeAllowed) {\n    logger.debug(\n      { prNumber },\n      'GitHub-native automerge: not enabled in repo settings'\n    );\n    return;\n  }\n\n  try {\n    const mergeMethod = config.mergeMethod?.toUpperCase() || 'MERGE';\n    const variables = { pullRequestId: prNodeId, mergeMethod };\n    const queryOptions = { variables };\n\n    const { errors } = await githubApi.requestGraphql<GhAutomergeResponse>(\n      enableAutoMergeMutation,\n      queryOptions\n    );\n\n    if (errors) {\n      logger.debug({ prNumber, errors }, 'GitHub-native automerge: fail');\n      return;\n    }\n\n    logger.debug({ prNumber }, 'GitHub-native automerge: success');\n  } catch (err) {\n    logger.warn({ prNumber, err }, 'GitHub-native automerge: REST API error');\n  }\n}\n\n// Creates PR and returns PR number\nexport async function createPr({\n  sourceBranch,\n  targetBranch,\n  prTitle: title,\n  prBody: rawBody,\n  labels,\n  draftPR = false,\n  platformOptions,\n}: CreatePRConfig): Promise<Pr> {\n  const body = sanitize(rawBody);\n  const base = targetBranch;\n  // Include the repository owner to handle forkMode and regular mode\n  const head = `${config.repository.split('/')[0]}:${sourceBranch}`;\n  const options: any = {\n    body: {\n      title,\n      head,\n      base,\n      body,\n      draft: draftPR,\n    },\n  };\n  // istanbul ignore if\n  if (config.forkToken) {\n    options.token = config.forkToken;\n    options.body.maintainer_can_modify = true;\n  }\n  logger.debug({ title, head, base, draft: draftPR }, 'Creating PR');\n  const pr = (\n    await githubApi.postJson<GhRestPr>(\n      `repos/${config.parentRepo || config.repository}/pulls`,\n      options\n    )\n  ).body;\n  logger.debug(\n    { branch: sourceBranch, pr: pr.number, draft: draftPR },\n    'PR created'\n  );\n  // istanbul ignore if\n  if (config.prList) {\n    config.prList.push(pr);\n  }\n  pr.displayNumber = `Pull Request #${pr.number}`;\n  pr.sourceBranch = sourceBranch;\n  pr.sourceRepo = pr.head.repo.full_name;\n  await addLabels(pr.number, labels);\n  await tryPrAutomerge(pr.number, pr.node_id, platformOptions);\n  return pr;\n}\n\nexport async function updatePr({\n  number: prNo,\n  prTitle: title,\n  prBody: rawBody,\n  state,\n}: UpdatePrConfig): Promise<void> {\n  logger.debug(`updatePr(${prNo}, ${title}, body)`);\n  const body = sanitize(rawBody);\n  const patchBody: any = { title };\n  if (body) {\n    patchBody.body = body;\n  }\n  if (state) {\n    patchBody.state = state;\n  }\n  const options: any = {\n    body: patchBody,\n  };\n  // istanbul ignore if\n  if (config.forkToken) {\n    options.token = config.forkToken;\n  }\n  try {\n    await githubApi.patchJson(\n      `repos/${config.parentRepo || config.repository}/pulls/${prNo}`,\n      options\n    );\n    logger.debug({ pr: prNo }, 'PR updated');\n  } catch (err) /* istanbul ignore next */ {\n    if (err instanceof ExternalHostError) {\n      throw err;\n    }\n    logger.warn({ err }, 'Error updating PR');\n  }\n}\n\nexport async function mergePr({\n  branchName,\n  id: prNo,\n}: MergePRConfig): Promise<boolean> {\n  logger.debug(`mergePr(${prNo}, ${branchName})`);\n  // istanbul ignore if\n  if (config.prReviewsRequired) {\n    logger.debug(\n      { branch: branchName, prNo },\n      'Branch protection: Attempting to merge PR when PR reviews are enabled'\n    );\n    const repository = config.parentRepo || config.repository;\n    const reviews = await githubApi.getJson<{ state: string }[]>(\n      `repos/${repository}/pulls/${prNo}/reviews`\n    );\n    const isApproved = reviews.body.some(\n      (review) => review.state === 'APPROVED'\n    );\n    if (!isApproved) {\n      logger.debug(\n        { branch: branchName, prNo },\n        'Branch protection: Cannot automerge PR until there is an approving review'\n      );\n      return false;\n    }\n    logger.debug('Found approving reviews');\n  }\n  const url = `repos/${\n    config.parentRepo || config.repository\n  }/pulls/${prNo}/merge`;\n  const options: any = {\n    body: {} as { merge_method?: string },\n  };\n  // istanbul ignore if\n  if (config.forkToken) {\n    options.token = config.forkToken;\n  }\n  let automerged = false;\n  let automergeResult: any;\n  if (config.mergeMethod) {\n    // This path is taken if we have auto-detected the allowed merge types from the repo\n    options.body.merge_method = config.mergeMethod;\n    try {\n      logger.debug({ options, url }, `mergePr`);\n      automergeResult = await githubApi.putJson(url, options);\n      automerged = true;\n    } catch (err) {\n      if (err.statusCode === 404 || err.statusCode === 405) {\n        // istanbul ignore next\n        logger.debug(\n          { response: err.response ? err.response.body : undefined },\n          'GitHub blocking PR merge -- will keep trying'\n        );\n      } else {\n        logger.warn({ err }, `Failed to ${config.mergeMethod} merge PR`);\n        return false;\n      }\n    }\n  }\n  if (!automerged) {\n    // We need to guess the merge method and try squash -> rebase -> merge\n    options.body.merge_method = 'rebase';\n    try {\n      logger.debug({ options, url }, `mergePr`);\n      automergeResult = await githubApi.putJson(url, options);\n    } catch (err1) {\n      logger.debug({ err: err1 }, `Failed to rebase merge PR`);\n      try {\n        options.body.merge_method = 'squash';\n        logger.debug({ options, url }, `mergePr`);\n        automergeResult = await githubApi.putJson(url, options);\n      } catch (err2) {\n        logger.debug({ err: err2 }, `Failed to merge squash PR`);\n        try {\n          options.body.merge_method = 'merge';\n          logger.debug({ options, url }, `mergePr`);\n          automergeResult = await githubApi.putJson(url, options);\n        } catch (err3) {\n          logger.debug({ err: err3 }, `Failed to merge commit PR`);\n          logger.info({ pr: prNo }, 'All merge attempts failed');\n          return false;\n        }\n      }\n    }\n  }\n  logger.debug(\n    { automergeResult: automergeResult.body, pr: prNo },\n    'PR merged'\n  );\n  return true;\n}\n\nexport function massageMarkdown(input: string): string {\n  if (platformConfig.isGhe) {\n    return smartTruncate(input, 60000);\n  }\n  const massagedInput = massageMarkdownLinks(input)\n    // to be safe, replace all github.com links with renovatebot redirector\n    .replace(\n      regEx(/href=\"https?:\\/\\/github.com\\//g),\n      'href=\"https://togithub.com/'\n    )\n    .replace(regEx(/]\\(https:\\/\\/github\\.com\\//g), '](https://togithub.com/')\n    .replace(regEx(/]: https:\\/\\/github\\.com\\//g), ']: https://togithub.com/');\n  return smartTruncate(massagedInput, 60000);\n}\n\nexport async function getVulnerabilityAlerts(): Promise<VulnerabilityAlert[]> {\n  let vulnerabilityAlerts: { node: VulnerabilityAlert }[];\n  try {\n    vulnerabilityAlerts = await githubApi.queryRepoField<{\n      node: VulnerabilityAlert;\n    }>(vulnerabilityAlertsQuery, 'vulnerabilityAlerts', {\n      variables: { owner: config.repositoryOwner, name: config.repositoryName },\n      paginate: false,\n      acceptHeader: 'application/vnd.github.vixen-preview+json',\n    });\n  } catch (err) {\n    logger.debug({ err }, 'Error retrieving vulnerability alerts');\n    logger.warn(\n      {\n        url: 'https://docs.renovatebot.com/configuration-options/#vulnerabilityalerts',\n      },\n      'Cannot access vulnerability alerts. Please ensure permissions have been granted.'\n    );\n  }\n  let alerts: VulnerabilityAlert[] = [];\n  try {\n    if (vulnerabilityAlerts?.length) {\n      alerts = vulnerabilityAlerts.map((edge) => edge.node);\n      const shortAlerts: AggregatedVulnerabilities = {};\n      if (alerts.length) {\n        logger.trace({ alerts }, 'GitHub vulnerability details');\n        for (const alert of alerts) {\n          const {\n            package: { name, ecosystem },\n            vulnerableVersionRange,\n            firstPatchedVersion,\n          } = alert.securityVulnerability;\n          const patch = firstPatchedVersion?.identifier;\n\n          const key = `${ecosystem.toLowerCase()}/${name}`;\n          const range = vulnerableVersionRange;\n          const elem = shortAlerts[key] || {};\n          elem[range] = patch || null;\n          shortAlerts[key] = elem;\n        }\n        logger.debug({ alerts: shortAlerts }, 'GitHub vulnerability details');\n      }\n    } else {\n      logger.debug('No vulnerability alerts found');\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.error({ err }, 'Error processing vulnerabity alerts');\n  }\n  return alerts;\n}\n"]}